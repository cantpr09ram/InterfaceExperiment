
InterfaceExperiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004278  08004278  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004278  08004278  00005278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004280  08004280  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004280  08004280  00005280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004284  08004284  00005284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004288  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          000008f8  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000954  20000954  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e707  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f73  00000000  00000000  00014793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b88  00000000  00000000  00016708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008de  00000000  00000000  00017290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000240ed  00000000  00000000  00017b6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dbaf  00000000  00000000  0003bc5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d98dd  00000000  00000000  0004980a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001230e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003580  00000000  00000000  0012312c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  001266ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000005c 	.word	0x2000005c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080041b0 	.word	0x080041b0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000060 	.word	0x20000060
 80001ec:	080041b0 	.word	0x080041b0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <Keypad_SetRowPins>:
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

void Keypad_SetRowPins(GPIO_TypeDef* ports[ROW_NUM], uint16_t pins[ROW_NUM]) {
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < ROW_NUM; i++) {
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
 800059e:	e014      	b.n	80005ca <Keypad_SetRowPins+0x3a>
        rowPorts[i] = ports[i];
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	009b      	lsls	r3, r3, #2
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	4413      	add	r3, r2
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	490d      	ldr	r1, [pc, #52]	@ (80005e0 <Keypad_SetRowPins+0x50>)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        rowPins[i] = pins[i];
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	683a      	ldr	r2, [r7, #0]
 80005b8:	4413      	add	r3, r2
 80005ba:	8819      	ldrh	r1, [r3, #0]
 80005bc:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <Keypad_SetRowPins+0x54>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < ROW_NUM; i++) {
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	3301      	adds	r3, #1
 80005c8:	60fb      	str	r3, [r7, #12]
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	2b03      	cmp	r3, #3
 80005ce:	dde7      	ble.n	80005a0 <Keypad_SetRowPins+0x10>
    }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3714      	adds	r7, #20
 80005d6:	46bd      	mov	sp, r7
 80005d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	20000078 	.word	0x20000078
 80005e4:	20000088 	.word	0x20000088

080005e8 <Keypad_SetColPins>:

void Keypad_SetColPins(GPIO_TypeDef* ports[COL_NUM], uint16_t pins[COL_NUM]) {
 80005e8:	b480      	push	{r7}
 80005ea:	b085      	sub	sp, #20
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < COL_NUM; i++) {
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	e014      	b.n	8000622 <Keypad_SetColPins+0x3a>
        colPorts[i] = ports[i];
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	4413      	add	r3, r2
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	490d      	ldr	r1, [pc, #52]	@ (8000638 <Keypad_SetColPins+0x50>)
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        colPins[i] = pins[i];
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	005b      	lsls	r3, r3, #1
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	4413      	add	r3, r2
 8000612:	8819      	ldrh	r1, [r3, #0]
 8000614:	4a09      	ldr	r2, [pc, #36]	@ (800063c <Keypad_SetColPins+0x54>)
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < COL_NUM; i++) {
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	3301      	adds	r3, #1
 8000620:	60fb      	str	r3, [r7, #12]
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	2b03      	cmp	r3, #3
 8000626:	dde7      	ble.n	80005f8 <Keypad_SetColPins+0x10>
    }
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	20000090 	.word	0x20000090
 800063c:	200000a0 	.word	0x200000a0

08000640 <Keypad_Init>:

void Keypad_Init(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b088      	sub	sp, #32
 8000644:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000646:	1d3b      	adds	r3, r7, #4
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
 8000650:	60da      	str	r2, [r3, #12]
 8000652:	611a      	str	r2, [r3, #16]

    for (int i = 0; i < COL_NUM; i++) {
 8000654:	2300      	movs	r3, #0
 8000656:	61fb      	str	r3, [r7, #28]
 8000658:	e014      	b.n	8000684 <Keypad_Init+0x44>
        GPIO_InitStruct.Pin = colPins[i];
 800065a:	4a22      	ldr	r2, [pc, #136]	@ (80006e4 <Keypad_Init+0xa4>)
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000662:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000668:	2301      	movs	r3, #1
 800066a:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(colPorts[i], &GPIO_InitStruct);
 800066c:	4a1e      	ldr	r2, [pc, #120]	@ (80006e8 <Keypad_Init+0xa8>)
 800066e:	69fb      	ldr	r3, [r7, #28]
 8000670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000674:	1d3a      	adds	r2, r7, #4
 8000676:	4611      	mov	r1, r2
 8000678:	4618      	mov	r0, r3
 800067a:	f001 fa55 	bl	8001b28 <HAL_GPIO_Init>
    for (int i = 0; i < COL_NUM; i++) {
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	3301      	adds	r3, #1
 8000682:	61fb      	str	r3, [r7, #28]
 8000684:	69fb      	ldr	r3, [r7, #28]
 8000686:	2b03      	cmp	r3, #3
 8000688:	dde7      	ble.n	800065a <Keypad_Init+0x1a>
    }

    for (int i = 0; i < ROW_NUM; i++) {
 800068a:	2300      	movs	r3, #0
 800068c:	61bb      	str	r3, [r7, #24]
 800068e:	e020      	b.n	80006d2 <Keypad_Init+0x92>
        GPIO_InitStruct.Pin = rowPins[i];
 8000690:	4a16      	ldr	r2, [pc, #88]	@ (80006ec <Keypad_Init+0xac>)
 8000692:	69bb      	ldr	r3, [r7, #24]
 8000694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000698:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800069e:	2300      	movs	r3, #0
 80006a0:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(rowPorts[i], &GPIO_InitStruct);
 80006a2:	4a13      	ldr	r2, [pc, #76]	@ (80006f0 <Keypad_Init+0xb0>)
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	4611      	mov	r1, r2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fa3a 	bl	8001b28 <HAL_GPIO_Init>
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 80006b4:	4a0e      	ldr	r2, [pc, #56]	@ (80006f0 <Keypad_Init+0xb0>)
 80006b6:	69bb      	ldr	r3, [r7, #24]
 80006b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80006bc:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <Keypad_Init+0xac>)
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80006c4:	2201      	movs	r2, #1
 80006c6:	4619      	mov	r1, r3
 80006c8:	f001 fbf2 	bl	8001eb0 <HAL_GPIO_WritePin>
    for (int i = 0; i < ROW_NUM; i++) {
 80006cc:	69bb      	ldr	r3, [r7, #24]
 80006ce:	3301      	adds	r3, #1
 80006d0:	61bb      	str	r3, [r7, #24]
 80006d2:	69bb      	ldr	r3, [r7, #24]
 80006d4:	2b03      	cmp	r3, #3
 80006d6:	dddb      	ble.n	8000690 <Keypad_Init+0x50>
    }
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3720      	adds	r7, #32
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200000a0 	.word	0x200000a0
 80006e8:	20000090 	.word	0x20000090
 80006ec:	20000088 	.word	0x20000088
 80006f0:	20000078 	.word	0x20000078

080006f4 <Keypad_Scan>:

char Keypad_Scan(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
    for (int row = 0; row < ROW_NUM; row++) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	e068      	b.n	80007d2 <Keypad_Scan+0xde>
        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_RESET);
 8000700:	4a38      	ldr	r2, [pc, #224]	@ (80007e4 <Keypad_Scan+0xf0>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000708:	4a37      	ldr	r2, [pc, #220]	@ (80007e8 <Keypad_Scan+0xf4>)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000710:	2200      	movs	r2, #0
 8000712:	4619      	mov	r1, r3
 8000714:	f001 fbcc 	bl	8001eb0 <HAL_GPIO_WritePin>

        for (int col = 0; col < COL_NUM; col++) {
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
 800071c:	e047      	b.n	80007ae <Keypad_Scan+0xba>
            if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET) {
 800071e:	4a33      	ldr	r2, [pc, #204]	@ (80007ec <Keypad_Scan+0xf8>)
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000726:	4932      	ldr	r1, [pc, #200]	@ (80007f0 <Keypad_Scan+0xfc>)
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800072e:	4619      	mov	r1, r3
 8000730:	4610      	mov	r0, r2
 8000732:	f001 fba5 	bl	8001e80 <HAL_GPIO_ReadPin>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d135      	bne.n	80007a8 <Keypad_Scan+0xb4>
                HAL_Delay(20);
 800073c:	2014      	movs	r0, #20
 800073e:	f000 fd99 	bl	8001274 <HAL_Delay>
                if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET) {
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <Keypad_Scan+0xf8>)
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800074a:	4929      	ldr	r1, [pc, #164]	@ (80007f0 <Keypad_Scan+0xfc>)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000752:	4619      	mov	r1, r3
 8000754:	4610      	mov	r0, r2
 8000756:	f001 fb93 	bl	8001e80 <HAL_GPIO_ReadPin>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d123      	bne.n	80007a8 <Keypad_Scan+0xb4>
                    while (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET);
 8000760:	bf00      	nop
 8000762:	4a22      	ldr	r2, [pc, #136]	@ (80007ec <Keypad_Scan+0xf8>)
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800076a:	4921      	ldr	r1, [pc, #132]	@ (80007f0 <Keypad_Scan+0xfc>)
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f001 fb83 	bl	8001e80 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f0      	beq.n	8000762 <Keypad_Scan+0x6e>
                    HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_SET);
 8000780:	4a18      	ldr	r2, [pc, #96]	@ (80007e4 <Keypad_Scan+0xf0>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000788:	4a17      	ldr	r2, [pc, #92]	@ (80007e8 <Keypad_Scan+0xf4>)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000790:	2201      	movs	r2, #1
 8000792:	4619      	mov	r1, r3
 8000794:	f001 fb8c 	bl	8001eb0 <HAL_GPIO_WritePin>
                    return keymap[row][col];
 8000798:	4a16      	ldr	r2, [pc, #88]	@ (80007f4 <Keypad_Scan+0x100>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	441a      	add	r2, r3
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	4413      	add	r3, r2
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	e018      	b.n	80007da <Keypad_Scan+0xe6>
        for (int col = 0; col < COL_NUM; col++) {
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	603b      	str	r3, [r7, #0]
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	2b03      	cmp	r3, #3
 80007b2:	ddb4      	ble.n	800071e <Keypad_Scan+0x2a>
                }
            }
        }

        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_SET);
 80007b4:	4a0b      	ldr	r2, [pc, #44]	@ (80007e4 <Keypad_Scan+0xf0>)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	@ (80007e8 <Keypad_Scan+0xf4>)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007c4:	2201      	movs	r2, #1
 80007c6:	4619      	mov	r1, r3
 80007c8:	f001 fb72 	bl	8001eb0 <HAL_GPIO_WritePin>
    for (int row = 0; row < ROW_NUM; row++) {
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3301      	adds	r3, #1
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	dd93      	ble.n	8000700 <Keypad_Scan+0xc>
    }
    return 0;
 80007d8:	2300      	movs	r3, #0
}
 80007da:	4618      	mov	r0, r3
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	20000078 	.word	0x20000078
 80007e8:	20000088 	.word	0x20000088
 80007ec:	20000090 	.word	0x20000090
 80007f0:	200000a0 	.word	0x200000a0
 80007f4:	0800421c 	.word	0x0800421c

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b590      	push	{r4, r7, lr}
 80007fa:	b095      	sub	sp, #84	@ 0x54
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fe:	f000 fcc7 	bl	8001190 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000802:	f000 f8ad 	bl	8000960 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000806:	f000 f9bb 	bl	8000b80 <MX_GPIO_Init>
  MX_ETH_Init();
 800080a:	f000 f913 	bl	8000a34 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800080e:	f000 f95f 	bl	8000ad0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000812:	f000 f987 	bl	8000b24 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  GPIO_TypeDef* rowPorts[ROW_NUM] = {GPIOD, GPIOD, GPIOD, GPIOD};
 8000816:	4b4a      	ldr	r3, [pc, #296]	@ (8000940 <main+0x148>)
 8000818:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800081c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint16_t rowPins[ROW_NUM] = {row1_Pin, row2_Pin, row3_Pin, row4_Pin};
 8000822:	4a48      	ldr	r2, [pc, #288]	@ (8000944 <main+0x14c>)
 8000824:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000828:	e892 0003 	ldmia.w	r2, {r0, r1}
 800082c:	e883 0003 	stmia.w	r3, {r0, r1}

  GPIO_TypeDef* colPorts[COL_NUM] = {GPIOC, GPIOC, GPIOC, GPIOC};
 8000830:	4b45      	ldr	r3, [pc, #276]	@ (8000948 <main+0x150>)
 8000832:	f107 0420 	add.w	r4, r7, #32
 8000836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000838:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint16_t colPins[COL_NUM] = {col1_Pin, col2_Pin, col3_Pin, col4_Pin};
 800083c:	4a43      	ldr	r2, [pc, #268]	@ (800094c <main+0x154>)
 800083e:	f107 0318 	add.w	r3, r7, #24
 8000842:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000846:	e883 0003 	stmia.w	r3, {r0, r1}

  Keypad_SetRowPins(rowPorts, rowPins);
 800084a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800084e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff fe9b 	bl	8000590 <Keypad_SetRowPins>
  Keypad_SetColPins(colPorts, colPins);
 800085a:	f107 0218 	add.w	r2, r7, #24
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4611      	mov	r1, r2
 8000864:	4618      	mov	r0, r3
 8000866:	f7ff febf 	bl	80005e8 <Keypad_SetColPins>
  Keypad_Init();
 800086a:	f7ff fee9 	bl	8000640 <Keypad_Init>
      MODE_A,
      MODE_B,
      MODE_C
  } Mode;

  Mode currentMode = MODE_A;
 800086e:	2300      	movs	r3, #0
 8000870:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  char key = Keypad_Scan();
 8000874:	f7ff ff3e 	bl	80006f4 <Keypad_Scan>
 8000878:	4603      	mov	r3, r0
 800087a:	75fb      	strb	r3, [r7, #23]
	      if (key) {
 800087c:	7dfb      	ldrb	r3, [r7, #23]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d05a      	beq.n	8000938 <main+0x140>
	          // 切換模式
	          if (key == 'A' || key == 'B' || key == 'C') {
 8000882:	7dfb      	ldrb	r3, [r7, #23]
 8000884:	2b41      	cmp	r3, #65	@ 0x41
 8000886:	d005      	beq.n	8000894 <main+0x9c>
 8000888:	7dfb      	ldrb	r3, [r7, #23]
 800088a:	2b42      	cmp	r3, #66	@ 0x42
 800088c:	d002      	beq.n	8000894 <main+0x9c>
 800088e:	7dfb      	ldrb	r3, [r7, #23]
 8000890:	2b43      	cmp	r3, #67	@ 0x43
 8000892:	d11d      	bne.n	80008d0 <main+0xd8>
	              switch (key) {
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	2b43      	cmp	r3, #67	@ 0x43
 8000898:	d00e      	beq.n	80008b8 <main+0xc0>
 800089a:	2b43      	cmp	r3, #67	@ 0x43
 800089c:	dc10      	bgt.n	80008c0 <main+0xc8>
 800089e:	2b41      	cmp	r3, #65	@ 0x41
 80008a0:	d002      	beq.n	80008a8 <main+0xb0>
 80008a2:	2b42      	cmp	r3, #66	@ 0x42
 80008a4:	d004      	beq.n	80008b0 <main+0xb8>
 80008a6:	e00b      	b.n	80008c0 <main+0xc8>
	                  case 'A': currentMode = MODE_A; break;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80008ae:	e007      	b.n	80008c0 <main+0xc8>
	                  case 'B': currentMode = MODE_B; break;
 80008b0:	2301      	movs	r3, #1
 80008b2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80008b6:	e003      	b.n	80008c0 <main+0xc8>
	                  case 'C': currentMode = MODE_C; break;
 80008b8:	2302      	movs	r3, #2
 80008ba:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80008be:	bf00      	nop
	              }
	              // 回傳目前模式給上位機顯示
	              HAL_UART_Transmit(&huart3, (uint8_t*)&key, 1, 100);
 80008c0:	f107 0117 	add.w	r1, r7, #23
 80008c4:	2364      	movs	r3, #100	@ 0x64
 80008c6:	2201      	movs	r2, #1
 80008c8:	4821      	ldr	r0, [pc, #132]	@ (8000950 <main+0x158>)
 80008ca:	f002 f901 	bl	8002ad0 <HAL_UART_Transmit>
 80008ce:	e033      	b.n	8000938 <main+0x140>
	          }
	          else if (key >= '0' && key <= '9') {
 80008d0:	7dfb      	ldrb	r3, [r7, #23]
 80008d2:	2b2f      	cmp	r3, #47	@ 0x2f
 80008d4:	d930      	bls.n	8000938 <main+0x140>
 80008d6:	7dfb      	ldrb	r3, [r7, #23]
 80008d8:	2b39      	cmp	r3, #57	@ 0x39
 80008da:	d82d      	bhi.n	8000938 <main+0x140>
	        	  int value = key - '0';
 80008dc:	7dfb      	ldrb	r3, [r7, #23]
 80008de:	3b30      	subs	r3, #48	@ 0x30
 80008e0:	64bb      	str	r3, [r7, #72]	@ 0x48
	        	  char msg[16];  // 足夠放 "<digit>-modeX\0"
	              switch (currentMode) {
 80008e2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80008e6:	2b02      	cmp	r3, #2
 80008e8:	d014      	beq.n	8000914 <main+0x11c>
 80008ea:	2b02      	cmp	r3, #2
 80008ec:	dc19      	bgt.n	8000922 <main+0x12a>
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <main+0x100>
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d007      	beq.n	8000906 <main+0x10e>
 80008f6:	e014      	b.n	8000922 <main+0x12a>
	              	  case MODE_A:
	              		  snprintf(msg, sizeof(msg), "%d-modeA", value);
 80008f8:	1d38      	adds	r0, r7, #4
 80008fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80008fc:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <main+0x15c>)
 80008fe:	2110      	movs	r1, #16
 8000900:	f002 ffa2 	bl	8003848 <sniprintf>
	                      	  break;
 8000904:	e00d      	b.n	8000922 <main+0x12a>
	                  case MODE_B:
	                      snprintf(msg, sizeof(msg), "%d-modeB", value);
 8000906:	1d38      	adds	r0, r7, #4
 8000908:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800090a:	4a13      	ldr	r2, [pc, #76]	@ (8000958 <main+0x160>)
 800090c:	2110      	movs	r1, #16
 800090e:	f002 ff9b 	bl	8003848 <sniprintf>
	                          break;
 8000912:	e006      	b.n	8000922 <main+0x12a>
	                  case MODE_C:
	                      snprintf(msg, sizeof(msg), "%d-modeC", value);
 8000914:	1d38      	adds	r0, r7, #4
 8000916:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000918:	4a10      	ldr	r2, [pc, #64]	@ (800095c <main+0x164>)
 800091a:	2110      	movs	r1, #16
 800091c:	f002 ff94 	bl	8003848 <sniprintf>
	                           break;
 8000920:	bf00      	nop
	              }
	              HAL_UART_Transmit(&huart3, (uint8_t*)msg, strlen(msg), 100);
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fc63 	bl	80001f0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	1d39      	adds	r1, r7, #4
 8000930:	2364      	movs	r3, #100	@ 0x64
 8000932:	4807      	ldr	r0, [pc, #28]	@ (8000950 <main+0x158>)
 8000934:	f002 f8cc 	bl	8002ad0 <HAL_UART_Transmit>
	          }
	      }
	      HAL_Delay(100);
 8000938:	2064      	movs	r0, #100	@ 0x64
 800093a:	f000 fc9b 	bl	8001274 <HAL_Delay>
  {
 800093e:	e799      	b.n	8000874 <main+0x7c>
 8000940:	080041ec 	.word	0x080041ec
 8000944:	080041fc 	.word	0x080041fc
 8000948:	08004204 	.word	0x08004204
 800094c:	08004214 	.word	0x08004214
 8000950:	200002d0 	.word	0x200002d0
 8000954:	080041c8 	.word	0x080041c8
 8000958:	080041d4 	.word	0x080041d4
 800095c:	080041e0 	.word	0x080041e0

08000960 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b094      	sub	sp, #80	@ 0x50
 8000964:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	2230      	movs	r2, #48	@ 0x30
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f002 ff9e 	bl	80038b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	2200      	movs	r2, #0
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	605a      	str	r2, [r3, #4]
 800097e:	609a      	str	r2, [r3, #8]
 8000980:	60da      	str	r2, [r3, #12]
 8000982:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <SystemClock_Config+0xcc>)
 800098a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098c:	4a27      	ldr	r2, [pc, #156]	@ (8000a2c <SystemClock_Config+0xcc>)
 800098e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000992:	6413      	str	r3, [r2, #64]	@ 0x40
 8000994:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <SystemClock_Config+0xcc>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b22      	ldr	r3, [pc, #136]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a21      	ldr	r2, [pc, #132]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009aa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ae:	6013      	str	r3, [r2, #0]
 80009b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a30 <SystemClock_Config+0xd0>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009c0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009d4:	23a8      	movs	r3, #168	@ 0xa8
 80009d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009d8:	2302      	movs	r3, #2
 80009da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009dc:	2307      	movs	r3, #7
 80009de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4618      	mov	r0, r3
 80009e6:	f001 fb8b 	bl	8002100 <HAL_RCC_OscConfig>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009f0:	f000 f996 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009f4:	230f      	movs	r3, #15
 80009f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f8:	2302      	movs	r3, #2
 80009fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009fc:	2300      	movs	r3, #0
 80009fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a00:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	2105      	movs	r1, #5
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fdec 	bl	80025f0 <HAL_RCC_ClockConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a1e:	f000 f97f 	bl	8000d20 <Error_Handler>
  }
}
 8000a22:	bf00      	nop
 8000a24:	3750      	adds	r7, #80	@ 0x50
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40023800 	.word	0x40023800
 8000a30:	40007000 	.word	0x40007000

08000a34 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a3a:	4a20      	ldr	r2, [pc, #128]	@ (8000abc <MX_ETH_Init+0x88>)
 8000a3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a46:	2280      	movs	r2, #128	@ 0x80
 8000a48:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a4c:	22e1      	movs	r2, #225	@ 0xe1
 8000a4e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a62:	4b15      	ldr	r3, [pc, #84]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a64:	4a16      	ldr	r2, [pc, #88]	@ (8000ac0 <MX_ETH_Init+0x8c>)
 8000a66:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000a68:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a6a:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8000a6e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a72:	4a14      	ldr	r2, [pc, #80]	@ (8000ac4 <MX_ETH_Init+0x90>)
 8000a74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000a76:	4b10      	ldr	r3, [pc, #64]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a78:	4a13      	ldr	r2, [pc, #76]	@ (8000ac8 <MX_ETH_Init+0x94>)
 8000a7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000a7c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a7e:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8000a82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000a84:	480c      	ldr	r0, [pc, #48]	@ (8000ab8 <MX_ETH_Init+0x84>)
 8000a86:	f000 fcff 	bl	8001488 <HAL_ETH_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000a90:	f000 f946 	bl	8000d20 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000a94:	2238      	movs	r2, #56	@ 0x38
 8000a96:	2100      	movs	r1, #0
 8000a98:	480c      	ldr	r0, [pc, #48]	@ (8000acc <MX_ETH_Init+0x98>)
 8000a9a:	f002 ff09 	bl	80038b0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000acc <MX_ETH_Init+0x98>)
 8000aa0:	2221      	movs	r2, #33	@ 0x21
 8000aa2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <MX_ETH_Init+0x98>)
 8000aa6:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8000aaa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000aac:	4b07      	ldr	r3, [pc, #28]	@ (8000acc <MX_ETH_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000220 	.word	0x20000220
 8000abc:	40028000 	.word	0x40028000
 8000ac0:	200007fc 	.word	0x200007fc
 8000ac4:	20000180 	.word	0x20000180
 8000ac8:	200000e0 	.word	0x200000e0
 8000acc:	200000a8 	.word	0x200000a8

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <MX_USART3_UART_Init+0x50>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b10      	ldr	r3, [pc, #64]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b0c      	ldr	r3, [pc, #48]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b0b      	ldr	r3, [pc, #44]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b08      	ldr	r3, [pc, #32]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b06      	ldr	r3, [pc, #24]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b06:	4805      	ldr	r0, [pc, #20]	@ (8000b1c <MX_USART3_UART_Init+0x4c>)
 8000b08:	f001 ff92 	bl	8002a30 <HAL_UART_Init>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b12:	f000 f905 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200002d0 	.word	0x200002d0
 8000b20:	40004800 	.word	0x40004800

08000b24 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b28:	4b14      	ldr	r3, [pc, #80]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000b2e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b32:	2204      	movs	r2, #4
 8000b34:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b38:	2202      	movs	r2, #2
 8000b3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b44:	2202      	movs	r2, #2
 8000b46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b54:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b60:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b66:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b68:	f001 f9bb 	bl	8001ee2 <HAL_PCD_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b72:	f000 f8d5 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b76:	bf00      	nop
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000318 	.word	0x20000318

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08c      	sub	sp, #48	@ 0x30
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
 8000b9a:	4b5c      	ldr	r3, [pc, #368]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a5b      	ldr	r2, [pc, #364]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000ba0:	f043 0304 	orr.w	r3, r3, #4
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b59      	ldr	r3, [pc, #356]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0304 	and.w	r3, r3, #4
 8000bae:	61bb      	str	r3, [r7, #24]
 8000bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
 8000bb6:	4b55      	ldr	r3, [pc, #340]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	4a54      	ldr	r2, [pc, #336]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bbc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bc2:	4b52      	ldr	r3, [pc, #328]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bca:	617b      	str	r3, [r7, #20]
 8000bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b4e      	ldr	r3, [pc, #312]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd6:	4a4d      	ldr	r2, [pc, #308]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bde:	4b4b      	ldr	r3, [pc, #300]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be2:	f003 0301 	and.w	r3, r3, #1
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bf2:	4a46      	ldr	r2, [pc, #280]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bf4:	f043 0302 	orr.w	r3, r3, #2
 8000bf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bfa:	4b44      	ldr	r3, [pc, #272]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfe:	f003 0302 	and.w	r3, r3, #2
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b40      	ldr	r3, [pc, #256]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0e:	4a3f      	ldr	r2, [pc, #252]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c16:	4b3d      	ldr	r3, [pc, #244]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b39      	ldr	r3, [pc, #228]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a38      	ldr	r2, [pc, #224]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <MX_GPIO_Init+0x18c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000c44:	4832      	ldr	r0, [pc, #200]	@ (8000d10 <MX_GPIO_Init+0x190>)
 8000c46:	f001 f933 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2140      	movs	r1, #64	@ 0x40
 8000c4e:	4831      	ldr	r0, [pc, #196]	@ (8000d14 <MX_GPIO_Init+0x194>)
 8000c50:	f001 f92e 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, row1_Pin|row2_Pin|row3_Pin|row4_Pin, GPIO_PIN_RESET);
 8000c54:	2200      	movs	r2, #0
 8000c56:	21f0      	movs	r1, #240	@ 0xf0
 8000c58:	482f      	ldr	r0, [pc, #188]	@ (8000d18 <MX_GPIO_Init+0x198>)
 8000c5a:	f001 f929 	bl	8001eb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c64:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4829      	ldr	r0, [pc, #164]	@ (8000d1c <MX_GPIO_Init+0x19c>)
 8000c76:	f000 ff57 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c7a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	481f      	ldr	r0, [pc, #124]	@ (8000d10 <MX_GPIO_Init+0x190>)
 8000c94:	f000 ff48 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c98:	2340      	movs	r3, #64	@ 0x40
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9c:	2301      	movs	r3, #1
 8000c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4819      	ldr	r0, [pc, #100]	@ (8000d14 <MX_GPIO_Init+0x194>)
 8000cb0:	f000 ff3a 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000cb4:	2380      	movs	r3, #128	@ 0x80
 8000cb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <MX_GPIO_Init+0x194>)
 8000cc8:	f000 ff2e 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : col1_Pin col2_Pin col3_Pin col4_Pin */
  GPIO_InitStruct.Pin = col1_Pin|col2_Pin|col3_Pin|col4_Pin;
 8000ccc:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	480e      	ldr	r0, [pc, #56]	@ (8000d1c <MX_GPIO_Init+0x19c>)
 8000ce2:	f000 ff21 	bl	8001b28 <HAL_GPIO_Init>

  /*Configure GPIO pins : row1_Pin row2_Pin row3_Pin row4_Pin */
  GPIO_InitStruct.Pin = row1_Pin|row2_Pin|row3_Pin|row4_Pin;
 8000ce6:	23f0      	movs	r3, #240	@ 0xf0
 8000ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cea:	2301      	movs	r3, #1
 8000cec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cf6:	f107 031c 	add.w	r3, r7, #28
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4806      	ldr	r0, [pc, #24]	@ (8000d18 <MX_GPIO_Init+0x198>)
 8000cfe:	f000 ff13 	bl	8001b28 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d02:	bf00      	nop
 8000d04:	3730      	adds	r7, #48	@ 0x30
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020400 	.word	0x40020400
 8000d14:	40021800 	.word	0x40021800
 8000d18:	40020c00 	.word	0x40020c00
 8000d1c:	40020800 	.word	0x40020800

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d3a:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d42:	4b0d      	ldr	r3, [pc, #52]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	4b09      	ldr	r3, [pc, #36]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d56:	4a08      	ldr	r2, [pc, #32]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d5e:	4b06      	ldr	r3, [pc, #24]	@ (8000d78 <HAL_MspInit+0x4c>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d66:	603b      	str	r3, [r7, #0]
 8000d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	40023800 	.word	0x40023800

08000d7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	@ 0x38
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a55      	ldr	r2, [pc, #340]	@ (8000ef0 <HAL_ETH_MspInit+0x174>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	f040 80a4 	bne.w	8000ee8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	623b      	str	r3, [r7, #32]
 8000da4:	4b53      	ldr	r3, [pc, #332]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da8:	4a52      	ldr	r2, [pc, #328]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000daa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000dae:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db0:	4b50      	ldr	r3, [pc, #320]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000db8:	623b      	str	r3, [r7, #32]
 8000dba:	6a3b      	ldr	r3, [r7, #32]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	61fb      	str	r3, [r7, #28]
 8000dc0:	4b4c      	ldr	r3, [pc, #304]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dc6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000dca:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dcc:	4b49      	ldr	r3, [pc, #292]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000dd4:	61fb      	str	r3, [r7, #28]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61bb      	str	r3, [r7, #24]
 8000ddc:	4b45      	ldr	r3, [pc, #276]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	4a44      	ldr	r2, [pc, #272]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000de2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de8:	4b42      	ldr	r3, [pc, #264]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
 8000df8:	4b3e      	ldr	r3, [pc, #248]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfc:	4a3d      	ldr	r2, [pc, #244]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e04:	4b3b      	ldr	r3, [pc, #236]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	f003 0304 	and.w	r3, r3, #4
 8000e0c:	617b      	str	r3, [r7, #20]
 8000e0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	4b37      	ldr	r3, [pc, #220]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e18:	4a36      	ldr	r2, [pc, #216]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e1a:	f043 0301 	orr.w	r3, r3, #1
 8000e1e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e20:	4b34      	ldr	r3, [pc, #208]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e24:	f003 0301 	and.w	r3, r3, #1
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	4b30      	ldr	r3, [pc, #192]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e34:	4a2f      	ldr	r2, [pc, #188]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60bb      	str	r3, [r7, #8]
 8000e4c:	4b29      	ldr	r3, [pc, #164]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e50:	4a28      	ldr	r2, [pc, #160]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e56:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e58:	4b26      	ldr	r3, [pc, #152]	@ (8000ef4 <HAL_ETH_MspInit+0x178>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e60:	60bb      	str	r3, [r7, #8]
 8000e62:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e64:	2332      	movs	r3, #50	@ 0x32
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e74:	230b      	movs	r3, #11
 8000e76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	481e      	ldr	r0, [pc, #120]	@ (8000ef8 <HAL_ETH_MspInit+0x17c>)
 8000e80:	f000 fe52 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e84:	2386      	movs	r3, #134	@ 0x86
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e94:	230b      	movs	r3, #11
 8000e96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4817      	ldr	r0, [pc, #92]	@ (8000efc <HAL_ETH_MspInit+0x180>)
 8000ea0:	f000 fe42 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ea4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000eb6:	230b      	movs	r3, #11
 8000eb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	480f      	ldr	r0, [pc, #60]	@ (8000f00 <HAL_ETH_MspInit+0x184>)
 8000ec2:	f000 fe31 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000ec6:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ed8:	230b      	movs	r3, #11
 8000eda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000edc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4808      	ldr	r0, [pc, #32]	@ (8000f04 <HAL_ETH_MspInit+0x188>)
 8000ee4:	f000 fe20 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8000ee8:	bf00      	nop
 8000eea:	3738      	adds	r7, #56	@ 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40028000 	.word	0x40028000
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020800 	.word	0x40020800
 8000efc:	40020000 	.word	0x40020000
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40021800 	.word	0x40021800

08000f08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	@ 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0314 	add.w	r3, r7, #20
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a19      	ldr	r2, [pc, #100]	@ (8000f8c <HAL_UART_MspInit+0x84>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d12c      	bne.n	8000f84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
 8000f2e:	4b18      	ldr	r3, [pc, #96]	@ (8000f90 <HAL_UART_MspInit+0x88>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	4a17      	ldr	r2, [pc, #92]	@ (8000f90 <HAL_UART_MspInit+0x88>)
 8000f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f3a:	4b15      	ldr	r3, [pc, #84]	@ (8000f90 <HAL_UART_MspInit+0x88>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	4b11      	ldr	r3, [pc, #68]	@ (8000f90 <HAL_UART_MspInit+0x88>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	4a10      	ldr	r2, [pc, #64]	@ (8000f90 <HAL_UART_MspInit+0x88>)
 8000f50:	f043 0308 	orr.w	r3, r3, #8
 8000f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f56:	4b0e      	ldr	r3, [pc, #56]	@ (8000f90 <HAL_UART_MspInit+0x88>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	f003 0308 	and.w	r3, r3, #8
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f62:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f74:	2307      	movs	r3, #7
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4805      	ldr	r0, [pc, #20]	@ (8000f94 <HAL_UART_MspInit+0x8c>)
 8000f80:	f000 fdd2 	bl	8001b28 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	@ 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	40023800 	.word	0x40023800
 8000f94:	40020c00 	.word	0x40020c00

08000f98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08a      	sub	sp, #40	@ 0x28
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fb8:	d13f      	bne.n	800103a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a20      	ldr	r2, [pc, #128]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8000fc4:	f043 0301 	orr.w	r3, r3, #1
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fd6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000fe8:	230a      	movs	r3, #10
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fec:	f107 0314 	add.w	r3, r7, #20
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4815      	ldr	r0, [pc, #84]	@ (8001048 <HAL_PCD_MspInit+0xb0>)
 8000ff4:	f000 fd98 	bl	8001b28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ff8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	480e      	ldr	r0, [pc, #56]	@ (8001048 <HAL_PCD_MspInit+0xb0>)
 800100e:	f000 fd8b 	bl	8001b28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8001014:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001016:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8001018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800101c:	6353      	str	r3, [r2, #52]	@ 0x34
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b08      	ldr	r3, [pc, #32]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8001024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001026:	4a07      	ldr	r2, [pc, #28]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8001028:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800102c:	6453      	str	r3, [r2, #68]	@ 0x44
 800102e:	4b05      	ldr	r3, [pc, #20]	@ (8001044 <HAL_PCD_MspInit+0xac>)
 8001030:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001032:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	@ 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000

0800104c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <NMI_Handler+0x4>

08001054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <HardFault_Handler+0x4>

0800105c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001060:	bf00      	nop
 8001062:	e7fd      	b.n	8001060 <MemManage_Handler+0x4>

08001064 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <BusFault_Handler+0x4>

0800106c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <UsageFault_Handler+0x4>

08001074 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr

08001082 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001082:	b480      	push	{r7}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010a2:	f000 f8c7 	bl	8001234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010b4:	4a14      	ldr	r2, [pc, #80]	@ (8001108 <_sbrk+0x5c>)
 80010b6:	4b15      	ldr	r3, [pc, #84]	@ (800110c <_sbrk+0x60>)
 80010b8:	1ad3      	subs	r3, r2, r3
 80010ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <_sbrk+0x64>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d102      	bne.n	80010ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010c8:	4b11      	ldr	r3, [pc, #68]	@ (8001110 <_sbrk+0x64>)
 80010ca:	4a12      	ldr	r2, [pc, #72]	@ (8001114 <_sbrk+0x68>)
 80010cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ce:	4b10      	ldr	r3, [pc, #64]	@ (8001110 <_sbrk+0x64>)
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4413      	add	r3, r2
 80010d6:	693a      	ldr	r2, [r7, #16]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d207      	bcs.n	80010ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010dc:	f002 fbf0 	bl	80038c0 <__errno>
 80010e0:	4603      	mov	r3, r0
 80010e2:	220c      	movs	r2, #12
 80010e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e009      	b.n	8001100 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ec:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <_sbrk+0x64>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010f2:	4b07      	ldr	r3, [pc, #28]	@ (8001110 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	4a05      	ldr	r2, [pc, #20]	@ (8001110 <_sbrk+0x64>)
 80010fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20030000 	.word	0x20030000
 800110c:	00000400 	.word	0x00000400
 8001110:	20000804 	.word	0x20000804
 8001114:	20000958 	.word	0x20000958

08001118 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <SystemInit+0x20>)
 800111e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001122:	4a05      	ldr	r2, [pc, #20]	@ (8001138 <SystemInit+0x20>)
 8001124:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001128:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000ed00 	.word	0xe000ed00

0800113c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800113c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001174 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001140:	f7ff ffea 	bl	8001118 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001144:	480c      	ldr	r0, [pc, #48]	@ (8001178 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001146:	490d      	ldr	r1, [pc, #52]	@ (800117c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001148:	4a0d      	ldr	r2, [pc, #52]	@ (8001180 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800114c:	e002      	b.n	8001154 <LoopCopyDataInit>

0800114e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800114e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001150:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001152:	3304      	adds	r3, #4

08001154 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001154:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001156:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001158:	d3f9      	bcc.n	800114e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800115a:	4a0a      	ldr	r2, [pc, #40]	@ (8001184 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800115c:	4c0a      	ldr	r4, [pc, #40]	@ (8001188 <LoopFillZerobss+0x22>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001160:	e001      	b.n	8001166 <LoopFillZerobss>

08001162 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001162:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001164:	3204      	adds	r2, #4

08001166 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001166:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001168:	d3fb      	bcc.n	8001162 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800116a:	f002 fbaf 	bl	80038cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800116e:	f7ff fb43 	bl	80007f8 <main>
  bx  lr    
 8001172:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001174:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800117c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001180:	08004288 	.word	0x08004288
  ldr r2, =_sbss
 8001184:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001188:	20000954 	.word	0x20000954

0800118c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800118c:	e7fe      	b.n	800118c <ADC_IRQHandler>
	...

08001190 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001194:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <HAL_Init+0x40>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a0d      	ldr	r2, [pc, #52]	@ (80011d0 <HAL_Init+0x40>)
 800119a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800119e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0a      	ldr	r2, [pc, #40]	@ (80011d0 <HAL_Init+0x40>)
 80011a6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ac:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <HAL_Init+0x40>)
 80011b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011b8:	2003      	movs	r0, #3
 80011ba:	f000 f931 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f808 	bl	80011d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011c4:	f7ff fdb2 	bl	8000d2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40023c00 	.word	0x40023c00

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011dc:	4b12      	ldr	r3, [pc, #72]	@ (8001228 <HAL_InitTick+0x54>)
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	4b12      	ldr	r3, [pc, #72]	@ (800122c <HAL_InitTick+0x58>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	4619      	mov	r1, r3
 80011e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f93b 	bl	800146e <HAL_SYSTICK_Config>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e00e      	b.n	8001220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d80a      	bhi.n	800121e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 f911 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001214:	4a06      	ldr	r2, [pc, #24]	@ (8001230 <HAL_InitTick+0x5c>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800121a:	2300      	movs	r3, #0
 800121c:	e000      	b.n	8001220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000000 	.word	0x20000000
 800122c:	20000008 	.word	0x20000008
 8001230:	20000004 	.word	0x20000004

08001234 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <HAL_IncTick+0x20>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	461a      	mov	r2, r3
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_IncTick+0x24>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4413      	add	r3, r2
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <HAL_IncTick+0x24>)
 8001246:	6013      	str	r3, [r2, #0]
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008
 8001258:	20000808 	.word	0x20000808

0800125c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  return uwTick;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <HAL_GetTick+0x14>)
 8001262:	681b      	ldr	r3, [r3, #0]
}
 8001264:	4618      	mov	r0, r3
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	20000808 	.word	0x20000808

08001274 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800127c:	f7ff ffee 	bl	800125c <HAL_GetTick>
 8001280:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800128c:	d005      	beq.n	800129a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800128e:	4b0a      	ldr	r3, [pc, #40]	@ (80012b8 <HAL_Delay+0x44>)
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	461a      	mov	r2, r3
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4413      	add	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800129a:	bf00      	nop
 800129c:	f7ff ffde 	bl	800125c <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	68fa      	ldr	r2, [r7, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d8f7      	bhi.n	800129c <HAL_Delay+0x28>
  {
  }
}
 80012ac:	bf00      	nop
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000008 	.word	0x20000008

080012bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	f003 0307 	and.w	r3, r3, #7
 80012ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012d2:	68ba      	ldr	r2, [r7, #8]
 80012d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012d8:	4013      	ands	r3, r2
 80012da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012ee:	4a04      	ldr	r2, [pc, #16]	@ (8001300 <__NVIC_SetPriorityGrouping+0x44>)
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	60d3      	str	r3, [r2, #12]
}
 80012f4:	bf00      	nop
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001308:	4b04      	ldr	r3, [pc, #16]	@ (800131c <__NVIC_GetPriorityGrouping+0x18>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	0a1b      	lsrs	r3, r3, #8
 800130e:	f003 0307 	and.w	r3, r3, #7
}
 8001312:	4618      	mov	r0, r3
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff47 	bl	80012bc <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff5c 	bl	8001304 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff ffb0 	bl	80013dc <SysTick_Config>
 800147c:	4603      	mov	r3, r0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
	...

08001488 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e08a      	b.n	80015b0 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d106      	bne.n	80014b2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2223      	movs	r2, #35	@ 0x23
 80014a8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f7ff fc65 	bl	8000d7c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b40      	ldr	r3, [pc, #256]	@ (80015b8 <HAL_ETH_Init+0x130>)
 80014b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ba:	4a3f      	ldr	r2, [pc, #252]	@ (80015b8 <HAL_ETH_Init+0x130>)
 80014bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014c2:	4b3d      	ldr	r3, [pc, #244]	@ (80015b8 <HAL_ETH_Init+0x130>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014c6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014ce:	4b3b      	ldr	r3, [pc, #236]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	4a3a      	ldr	r2, [pc, #232]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014d4:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80014d8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014da:	4b38      	ldr	r3, [pc, #224]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	4936      	ldr	r1, [pc, #216]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014e8:	4b34      	ldr	r3, [pc, #208]	@ (80015bc <HAL_ETH_Init+0x134>)
 80014ea:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	6812      	ldr	r2, [r2, #0]
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001502:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001504:	f7ff feaa 	bl	800125c <HAL_GetTick>
 8001508:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800150a:	e011      	b.n	8001530 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800150c:	f7ff fea6 	bl	800125c <HAL_GetTick>
 8001510:	4602      	mov	r2, r0
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	1ad3      	subs	r3, r2, r3
 8001516:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800151a:	d909      	bls.n	8001530 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2204      	movs	r2, #4
 8001520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	22e0      	movs	r2, #224	@ 0xe0
 8001528:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 800152c:	2301      	movs	r3, #1
 800152e:	e03f      	b.n	80015b0 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1e4      	bne.n	800150c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f97a 	bl	800183c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fa25 	bl	8001998 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 fa7b 	bl	8001a4a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	461a      	mov	r2, r3
 800155a:	2100      	movs	r1, #0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 f9e3 	bl	8001928 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8001570:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001582:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001586:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800159a:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2210      	movs	r2, #16
 80015aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800

080015c0 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <ETH_SetMACConfig+0x164>)
 80015d6:	4013      	ands	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	7b9b      	ldrb	r3, [r3, #14]
 80015de:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	7c12      	ldrb	r2, [r2, #16]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d102      	bne.n	80015ee <ETH_SetMACConfig+0x2e>
 80015e8:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x30>
 80015ee:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80015f0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	7c52      	ldrb	r2, [r2, #17]
 80015f6:	2a00      	cmp	r2, #0
 80015f8:	d102      	bne.n	8001600 <ETH_SetMACConfig+0x40>
 80015fa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80015fe:	e000      	b.n	8001602 <ETH_SetMACConfig+0x42>
 8001600:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001602:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001608:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	7fdb      	ldrb	r3, [r3, #31]
 800160e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001610:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001616:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	7f92      	ldrb	r2, [r2, #30]
 800161c:	2a00      	cmp	r2, #0
 800161e:	d102      	bne.n	8001626 <ETH_SetMACConfig+0x66>
 8001620:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001624:	e000      	b.n	8001628 <ETH_SetMACConfig+0x68>
 8001626:	2200      	movs	r2, #0
                        macconf->Speed |
 8001628:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	7f1b      	ldrb	r3, [r3, #28]
 800162e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001630:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001636:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	791b      	ldrb	r3, [r3, #4]
 800163c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800163e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001646:	2a00      	cmp	r2, #0
 8001648:	d102      	bne.n	8001650 <ETH_SetMACConfig+0x90>
 800164a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800164e:	e000      	b.n	8001652 <ETH_SetMACConfig+0x92>
 8001650:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001652:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	7bdb      	ldrb	r3, [r3, #15]
 8001658:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800165a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001660:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001668:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800166a:	4313      	orrs	r3, r2
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001682:	2001      	movs	r0, #1
 8001684:	f7ff fdf6 	bl	8001274 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68fa      	ldr	r2, [r7, #12]
 800168e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001698:	68fa      	ldr	r2, [r7, #12]
 800169a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800169e:	4013      	ands	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016a8:	683a      	ldr	r2, [r7, #0]
 80016aa:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80016ae:	2a00      	cmp	r2, #0
 80016b0:	d101      	bne.n	80016b6 <ETH_SetMACConfig+0xf6>
 80016b2:	2280      	movs	r2, #128	@ 0x80
 80016b4:	e000      	b.n	80016b8 <ETH_SetMACConfig+0xf8>
 80016b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80016be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016c0:	683a      	ldr	r2, [r7, #0]
 80016c2:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 80016c6:	2a01      	cmp	r2, #1
 80016c8:	d101      	bne.n	80016ce <ETH_SetMACConfig+0x10e>
 80016ca:	2208      	movs	r2, #8
 80016cc:	e000      	b.n	80016d0 <ETH_SetMACConfig+0x110>
 80016ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80016d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80016d2:	683a      	ldr	r2, [r7, #0]
 80016d4:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80016d8:	2a01      	cmp	r2, #1
 80016da:	d101      	bne.n	80016e0 <ETH_SetMACConfig+0x120>
 80016dc:	2204      	movs	r2, #4
 80016de:	e000      	b.n	80016e2 <ETH_SetMACConfig+0x122>
 80016e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80016ea:	2a01      	cmp	r2, #1
 80016ec:	d101      	bne.n	80016f2 <ETH_SetMACConfig+0x132>
 80016ee:	2202      	movs	r2, #2
 80016f0:	e000      	b.n	80016f4 <ETH_SetMACConfig+0x134>
 80016f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016f4:	4313      	orrs	r3, r2
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	699b      	ldr	r3, [r3, #24]
 800170a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fdb1 	bl	8001274 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	68fa      	ldr	r2, [r7, #12]
 8001718:	619a      	str	r2, [r3, #24]
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	fd20810f 	.word	0xfd20810f

08001728 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800173a:	699b      	ldr	r3, [r3, #24]
 800173c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4b3d      	ldr	r3, [pc, #244]	@ (8001838 <ETH_SetDMAConfig+0x110>)
 8001742:	4013      	ands	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	7b1b      	ldrb	r3, [r3, #12]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <ETH_SetDMAConfig+0x2c>
 800174e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001752:	e000      	b.n	8001756 <ETH_SetDMAConfig+0x2e>
 8001754:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7b5b      	ldrb	r3, [r3, #13]
 800175a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800175c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800175e:	683a      	ldr	r2, [r7, #0]
 8001760:	7f52      	ldrb	r2, [r2, #29]
 8001762:	2a00      	cmp	r2, #0
 8001764:	d102      	bne.n	800176c <ETH_SetDMAConfig+0x44>
 8001766:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800176a:	e000      	b.n	800176e <ETH_SetDMAConfig+0x46>
 800176c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800176e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	7b9b      	ldrb	r3, [r3, #14]
 8001774:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001776:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800177c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	7f1b      	ldrb	r3, [r3, #28]
 8001782:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001784:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	7f9b      	ldrb	r3, [r3, #30]
 800178a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800178c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001792:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800179a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800179c:	4313      	orrs	r3, r2
 800179e:	68fa      	ldr	r2, [r7, #12]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ac:	461a      	mov	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017be:	2001      	movs	r0, #1
 80017c0:	f7ff fd58 	bl	8001274 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017cc:	461a      	mov	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	791b      	ldrb	r3, [r3, #4]
 80017d6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017dc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017e2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017e8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017f0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017f2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017fa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001800:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800180a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800180e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800181c:	2001      	movs	r0, #1
 800181e:	f7ff fd29 	bl	8001274 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800182a:	461a      	mov	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	bf00      	nop
 8001832:	3710      	adds	r7, #16
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	f8de3f23 	.word	0xf8de3f23

0800183c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b0a6      	sub	sp, #152	@ 0x98
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001844:	2301      	movs	r3, #1
 8001846:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001850:	2300      	movs	r3, #0
 8001852:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800187e:	2300      	movs	r3, #0
 8001880:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001882:	2300      	movs	r3, #0
 8001884:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001888:	2300      	movs	r3, #0
 800188a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001892:	2300      	movs	r3, #0
 8001894:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800189e:	2300      	movs	r3, #0
 80018a0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018a4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80018ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80018ba:	4619      	mov	r1, r3
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f7ff fe7f 	bl	80015c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80018d0:	2301      	movs	r3, #1
 80018d2:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018e4:	2300      	movs	r3, #0
 80018e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018e8:	2301      	movs	r3, #1
 80018ea:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018ee:	2301      	movs	r3, #1
 80018f0:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80018f6:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018f8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018fc:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001902:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001904:	2301      	movs	r3, #1
 8001906:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800190a:	2300      	movs	r3, #0
 800190c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800190e:	2300      	movs	r3, #0
 8001910:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001912:	f107 0308 	add.w	r3, r7, #8
 8001916:	4619      	mov	r1, r3
 8001918:	6878      	ldr	r0, [r7, #4]
 800191a:	f7ff ff05 	bl	8001728 <ETH_SetDMAConfig>
}
 800191e:	bf00      	nop
 8001920:	3798      	adds	r7, #152	@ 0x98
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
	...

08001928 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001928:	b480      	push	{r7}
 800192a:	b087      	sub	sp, #28
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3305      	adds	r3, #5
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	3204      	adds	r2, #4
 8001940:	7812      	ldrb	r2, [r2, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001946:	68ba      	ldr	r2, [r7, #8]
 8001948:	4b11      	ldr	r3, [pc, #68]	@ (8001990 <ETH_MACAddressConfig+0x68>)
 800194a:	4413      	add	r3, r2
 800194c:	461a      	mov	r2, r3
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3303      	adds	r3, #3
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	061a      	lsls	r2, r3, #24
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	3302      	adds	r3, #2
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	041b      	lsls	r3, r3, #16
 8001962:	431a      	orrs	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3301      	adds	r3, #1
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	021b      	lsls	r3, r3, #8
 800196c:	4313      	orrs	r3, r2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	7812      	ldrb	r2, [r2, #0]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001976:	68ba      	ldr	r2, [r7, #8]
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <ETH_MACAddressConfig+0x6c>)
 800197a:	4413      	add	r3, r2
 800197c:	461a      	mov	r2, r3
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	6013      	str	r3, [r2, #0]
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	40028040 	.word	0x40028040
 8001994:	40028044 	.word	0x40028044

08001998 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	e03e      	b.n	8001a24 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	68fa      	ldr	r2, [r7, #12]
 80019ac:	4613      	mov	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	00db      	lsls	r3, r3, #3
 80019b4:	440b      	add	r3, r1
 80019b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	3206      	adds	r2, #6
 80019d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d80c      	bhi.n	8001a08 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68d9      	ldr	r1, [r3, #12]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1c5a      	adds	r2, r3, #1
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	461a      	mov	r2, r3
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	e004      	b.n	8001a12 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	3301      	adds	r3, #1
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9bd      	bls.n	80019a6 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68da      	ldr	r2, [r3, #12]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001a3c:	611a      	str	r2, [r3, #16]
}
 8001a3e:	bf00      	nop
 8001a40:	3714      	adds	r7, #20
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	e048      	b.n	8001aea <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6919      	ldr	r1, [r3, #16]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	440b      	add	r3, r1
 8001a68:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2200      	movs	r2, #0
 8001a74:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	2200      	movs	r2, #0
 8001a86:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8001a94:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001aae:	68b9      	ldr	r1, [r7, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68fa      	ldr	r2, [r7, #12]
 8001ab4:	3212      	adds	r2, #18
 8001ab6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d80c      	bhi.n	8001ada <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6919      	ldr	r1, [r3, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	440b      	add	r3, r1
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
 8001ad8:	e004      	b.n	8001ae4 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d9b3      	bls.n	8001a58 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2200      	movs	r2, #0
 8001b00:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	691a      	ldr	r2, [r3, #16]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b1a:	60da      	str	r2, [r3, #12]
}
 8001b1c:	bf00      	nop
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b089      	sub	sp, #36	@ 0x24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b32:	2300      	movs	r3, #0
 8001b34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61fb      	str	r3, [r7, #28]
 8001b42:	e177      	b.n	8001e34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b44:	2201      	movs	r2, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	4013      	ands	r3, r2
 8001b56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b58:	693a      	ldr	r2, [r7, #16]
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	f040 8166 	bne.w	8001e2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d005      	beq.n	8001b7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d130      	bne.n	8001bdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	2203      	movs	r2, #3
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	68da      	ldr	r2, [r3, #12]
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 0201 	and.w	r2, r3, #1
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd0:	69ba      	ldr	r2, [r7, #24]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d017      	beq.n	8001c18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689a      	ldr	r2, [r3, #8]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	d123      	bne.n	8001c6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c24:	69fb      	ldr	r3, [r7, #28]
 8001c26:	08da      	lsrs	r2, r3, #3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3208      	adds	r2, #8
 8001c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	220f      	movs	r2, #15
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43db      	mvns	r3, r3
 8001c42:	69ba      	ldr	r2, [r7, #24]
 8001c44:	4013      	ands	r3, r2
 8001c46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	691a      	ldr	r2, [r3, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	69b9      	ldr	r1, [r7, #24]
 8001c68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	2203      	movs	r2, #3
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f003 0203 	and.w	r2, r3, #3
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	f000 80c0 	beq.w	8001e2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
 8001cb2:	4b66      	ldr	r3, [pc, #408]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	4a65      	ldr	r2, [pc, #404]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cbe:	4b63      	ldr	r3, [pc, #396]	@ (8001e4c <HAL_GPIO_Init+0x324>)
 8001cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cca:	4a61      	ldr	r2, [pc, #388]	@ (8001e50 <HAL_GPIO_Init+0x328>)
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	089b      	lsrs	r3, r3, #2
 8001cd0:	3302      	adds	r3, #2
 8001cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	220f      	movs	r2, #15
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4013      	ands	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a58      	ldr	r2, [pc, #352]	@ (8001e54 <HAL_GPIO_Init+0x32c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d037      	beq.n	8001d66 <HAL_GPIO_Init+0x23e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a57      	ldr	r2, [pc, #348]	@ (8001e58 <HAL_GPIO_Init+0x330>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d031      	beq.n	8001d62 <HAL_GPIO_Init+0x23a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a56      	ldr	r2, [pc, #344]	@ (8001e5c <HAL_GPIO_Init+0x334>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d02b      	beq.n	8001d5e <HAL_GPIO_Init+0x236>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a55      	ldr	r2, [pc, #340]	@ (8001e60 <HAL_GPIO_Init+0x338>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d025      	beq.n	8001d5a <HAL_GPIO_Init+0x232>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a54      	ldr	r2, [pc, #336]	@ (8001e64 <HAL_GPIO_Init+0x33c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d01f      	beq.n	8001d56 <HAL_GPIO_Init+0x22e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a53      	ldr	r2, [pc, #332]	@ (8001e68 <HAL_GPIO_Init+0x340>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d019      	beq.n	8001d52 <HAL_GPIO_Init+0x22a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a52      	ldr	r2, [pc, #328]	@ (8001e6c <HAL_GPIO_Init+0x344>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d013      	beq.n	8001d4e <HAL_GPIO_Init+0x226>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a51      	ldr	r2, [pc, #324]	@ (8001e70 <HAL_GPIO_Init+0x348>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <HAL_GPIO_Init+0x222>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a50      	ldr	r2, [pc, #320]	@ (8001e74 <HAL_GPIO_Init+0x34c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d007      	beq.n	8001d46 <HAL_GPIO_Init+0x21e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a4f      	ldr	r2, [pc, #316]	@ (8001e78 <HAL_GPIO_Init+0x350>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d101      	bne.n	8001d42 <HAL_GPIO_Init+0x21a>
 8001d3e:	2309      	movs	r3, #9
 8001d40:	e012      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d42:	230a      	movs	r3, #10
 8001d44:	e010      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d46:	2308      	movs	r3, #8
 8001d48:	e00e      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4a:	2307      	movs	r3, #7
 8001d4c:	e00c      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d4e:	2306      	movs	r3, #6
 8001d50:	e00a      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d52:	2305      	movs	r3, #5
 8001d54:	e008      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d56:	2304      	movs	r3, #4
 8001d58:	e006      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e004      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d5e:	2302      	movs	r3, #2
 8001d60:	e002      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <HAL_GPIO_Init+0x240>
 8001d66:	2300      	movs	r3, #0
 8001d68:	69fa      	ldr	r2, [r7, #28]
 8001d6a:	f002 0203 	and.w	r2, r2, #3
 8001d6e:	0092      	lsls	r2, r2, #2
 8001d70:	4093      	lsls	r3, r2
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d78:	4935      	ldr	r1, [pc, #212]	@ (8001e50 <HAL_GPIO_Init+0x328>)
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	089b      	lsrs	r3, r3, #2
 8001d7e:	3302      	adds	r3, #2
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d86:	4b3d      	ldr	r3, [pc, #244]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	4013      	ands	r3, r2
 8001d94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d003      	beq.n	8001daa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001da2:	69ba      	ldr	r2, [r7, #24]
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	4313      	orrs	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001daa:	4a34      	ldr	r2, [pc, #208]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001db0:	4b32      	ldr	r3, [pc, #200]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	43db      	mvns	r3, r3
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dcc:	69ba      	ldr	r2, [r7, #24]
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dd4:	4a29      	ldr	r2, [pc, #164]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dda:	4b28      	ldr	r3, [pc, #160]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4013      	ands	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e28:	4a14      	ldr	r2, [pc, #80]	@ (8001e7c <HAL_GPIO_Init+0x354>)
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	2b0f      	cmp	r3, #15
 8001e38:	f67f ae84 	bls.w	8001b44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	3724      	adds	r7, #36	@ 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	40013800 	.word	0x40013800
 8001e54:	40020000 	.word	0x40020000
 8001e58:	40020400 	.word	0x40020400
 8001e5c:	40020800 	.word	0x40020800
 8001e60:	40020c00 	.word	0x40020c00
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40021800 	.word	0x40021800
 8001e70:	40021c00 	.word	0x40021c00
 8001e74:	40022000 	.word	0x40022000
 8001e78:	40022400 	.word	0x40022400
 8001e7c:	40013c00 	.word	0x40013c00

08001e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691a      	ldr	r2, [r3, #16]
 8001e90:	887b      	ldrh	r3, [r7, #2]
 8001e92:	4013      	ands	r3, r2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	73fb      	strb	r3, [r7, #15]
 8001e9c:	e001      	b.n	8001ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	807b      	strh	r3, [r7, #2]
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec0:	787b      	ldrb	r3, [r7, #1]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ec6:	887a      	ldrh	r2, [r7, #2]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ecc:	e003      	b.n	8001ed6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ece:	887b      	ldrh	r3, [r7, #2]
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	619a      	str	r2, [r3, #24]
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b086      	sub	sp, #24
 8001ee6:	af02      	add	r7, sp, #8
 8001ee8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d101      	bne.n	8001ef4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e101      	b.n	80020f8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff f842 	bl	8000f98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f22:	d102      	bne.n	8001f2a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2200      	movs	r2, #0
 8001f28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f001 f9ee 	bl	8003310 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	7c1a      	ldrb	r2, [r3, #16]
 8001f3c:	f88d 2000 	strb.w	r2, [sp]
 8001f40:	3304      	adds	r3, #4
 8001f42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f44:	f001 f980 	bl	8003248 <USB_CoreInit>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0ce      	b.n	80020f8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f001 f9e6 	bl	8003332 <USB_SetCurrentMode>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0bf      	b.n	80020f8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f78:	2300      	movs	r3, #0
 8001f7a:	73fb      	strb	r3, [r7, #15]
 8001f7c:	e04a      	b.n	8002014 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f7e:	7bfa      	ldrb	r2, [r7, #15]
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4613      	mov	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	4413      	add	r3, r2
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	3315      	adds	r3, #21
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f92:	7bfa      	ldrb	r2, [r7, #15]
 8001f94:	6879      	ldr	r1, [r7, #4]
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	440b      	add	r3, r1
 8001fa0:	3314      	adds	r3, #20
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	7bfb      	ldrb	r3, [r7, #15]
 8001faa:	b298      	uxth	r0, r3
 8001fac:	6879      	ldr	r1, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	00db      	lsls	r3, r3, #3
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	440b      	add	r3, r1
 8001fb8:	332e      	adds	r3, #46	@ 0x2e
 8001fba:	4602      	mov	r2, r0
 8001fbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fbe:	7bfa      	ldrb	r2, [r7, #15]
 8001fc0:	6879      	ldr	r1, [r7, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	440b      	add	r3, r1
 8001fcc:	3318      	adds	r3, #24
 8001fce:	2200      	movs	r2, #0
 8001fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fd2:	7bfa      	ldrb	r2, [r7, #15]
 8001fd4:	6879      	ldr	r1, [r7, #4]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	00db      	lsls	r3, r3, #3
 8001fda:	4413      	add	r3, r2
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	440b      	add	r3, r1
 8001fe0:	331c      	adds	r3, #28
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fe6:	7bfa      	ldrb	r2, [r7, #15]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3320      	adds	r3, #32
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001ffa:	7bfa      	ldrb	r2, [r7, #15]
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	4613      	mov	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	3324      	adds	r3, #36	@ 0x24
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200e:	7bfb      	ldrb	r3, [r7, #15]
 8002010:	3301      	adds	r3, #1
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	791b      	ldrb	r3, [r3, #4]
 8002018:	7bfa      	ldrb	r2, [r7, #15]
 800201a:	429a      	cmp	r2, r3
 800201c:	d3af      	bcc.n	8001f7e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e044      	b.n	80020ae <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002036:	2200      	movs	r2, #0
 8002038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800204c:	7bfa      	ldrb	r2, [r7, #15]
 800204e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002062:	2200      	movs	r2, #0
 8002064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002066:	7bfa      	ldrb	r2, [r7, #15]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	4413      	add	r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	3301      	adds	r3, #1
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	791b      	ldrb	r3, [r3, #4]
 80020b2:	7bfa      	ldrb	r2, [r7, #15]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d3b5      	bcc.n	8002024 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6818      	ldr	r0, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	7c1a      	ldrb	r2, [r3, #16]
 80020c0:	f88d 2000 	strb.w	r2, [sp]
 80020c4:	3304      	adds	r3, #4
 80020c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c8:	f001 f980 	bl	80033cc <USB_DevInit>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d005      	beq.n	80020de <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2202      	movs	r2, #2
 80020d6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e00c      	b.n	80020f8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f001 fb48 	bl	8003786 <USB_DevDisconnect>

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d101      	bne.n	8002112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e267      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d075      	beq.n	800220a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800211e:	4b88      	ldr	r3, [pc, #544]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	2b04      	cmp	r3, #4
 8002128:	d00c      	beq.n	8002144 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800212a:	4b85      	ldr	r3, [pc, #532]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002132:	2b08      	cmp	r3, #8
 8002134:	d112      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002136:	4b82      	ldr	r3, [pc, #520]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800213e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002142:	d10b      	bne.n	800215c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002144:	4b7e      	ldr	r3, [pc, #504]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d05b      	beq.n	8002208 <HAL_RCC_OscConfig+0x108>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d157      	bne.n	8002208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e242      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002164:	d106      	bne.n	8002174 <HAL_RCC_OscConfig+0x74>
 8002166:	4b76      	ldr	r3, [pc, #472]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a75      	ldr	r2, [pc, #468]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800216c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002170:	6013      	str	r3, [r2, #0]
 8002172:	e01d      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800217c:	d10c      	bne.n	8002198 <HAL_RCC_OscConfig+0x98>
 800217e:	4b70      	ldr	r3, [pc, #448]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a6f      	ldr	r2, [pc, #444]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002188:	6013      	str	r3, [r2, #0]
 800218a:	4b6d      	ldr	r3, [pc, #436]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a6c      	ldr	r2, [pc, #432]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002194:	6013      	str	r3, [r2, #0]
 8002196:	e00b      	b.n	80021b0 <HAL_RCC_OscConfig+0xb0>
 8002198:	4b69      	ldr	r3, [pc, #420]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a68      	ldr	r2, [pc, #416]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800219e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a2:	6013      	str	r3, [r2, #0]
 80021a4:	4b66      	ldr	r3, [pc, #408]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a65      	ldr	r2, [pc, #404]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d013      	beq.n	80021e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b8:	f7ff f850 	bl	800125c <HAL_GetTick>
 80021bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	e008      	b.n	80021d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c0:	f7ff f84c 	bl	800125c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b64      	cmp	r3, #100	@ 0x64
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e207      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d0f0      	beq.n	80021c0 <HAL_RCC_OscConfig+0xc0>
 80021de:	e014      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7ff f83c 	bl	800125c <HAL_GetTick>
 80021e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021e8:	f7ff f838 	bl	800125c <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b64      	cmp	r3, #100	@ 0x64
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e1f3      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fa:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d1f0      	bne.n	80021e8 <HAL_RCC_OscConfig+0xe8>
 8002206:	e000      	b.n	800220a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d063      	beq.n	80022de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002216:	4b4a      	ldr	r3, [pc, #296]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 030c 	and.w	r3, r3, #12
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00b      	beq.n	800223a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002222:	4b47      	ldr	r3, [pc, #284]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800222a:	2b08      	cmp	r3, #8
 800222c:	d11c      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800222e:	4b44      	ldr	r3, [pc, #272]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d116      	bne.n	8002268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800223a:	4b41      	ldr	r3, [pc, #260]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e1c7      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002252:	4b3b      	ldr	r3, [pc, #236]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	4937      	ldr	r1, [pc, #220]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002262:	4313      	orrs	r3, r2
 8002264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002266:	e03a      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d020      	beq.n	80022b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002270:	4b34      	ldr	r3, [pc, #208]	@ (8002344 <HAL_RCC_OscConfig+0x244>)
 8002272:	2201      	movs	r2, #1
 8002274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002276:	f7fe fff1 	bl	800125c <HAL_GetTick>
 800227a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800227c:	e008      	b.n	8002290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227e:	f7fe ffed 	bl	800125c <HAL_GetTick>
 8002282:	4602      	mov	r2, r0
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	2b02      	cmp	r3, #2
 800228a:	d901      	bls.n	8002290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800228c:	2303      	movs	r3, #3
 800228e:	e1a8      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002290:	4b2b      	ldr	r3, [pc, #172]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f0      	beq.n	800227e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800229c:	4b28      	ldr	r3, [pc, #160]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	4925      	ldr	r1, [pc, #148]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]
 80022b0:	e015      	b.n	80022de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022b2:	4b24      	ldr	r3, [pc, #144]	@ (8002344 <HAL_RCC_OscConfig+0x244>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7fe ffd0 	bl	800125c <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c0:	f7fe ffcc 	bl	800125c <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e187      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022d2:	4b1b      	ldr	r3, [pc, #108]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d036      	beq.n	8002358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d016      	beq.n	8002320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022f2:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <HAL_RCC_OscConfig+0x248>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f8:	f7fe ffb0 	bl	800125c <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7fe ffac 	bl	800125c <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e167      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002312:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_OscConfig+0x240>)
 8002314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d0f0      	beq.n	8002300 <HAL_RCC_OscConfig+0x200>
 800231e:	e01b      	b.n	8002358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002320:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <HAL_RCC_OscConfig+0x248>)
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002326:	f7fe ff99 	bl	800125c <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800232c:	e00e      	b.n	800234c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232e:	f7fe ff95 	bl	800125c <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d907      	bls.n	800234c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e150      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002340:	40023800 	.word	0x40023800
 8002344:	42470000 	.word	0x42470000
 8002348:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800234c:	4b88      	ldr	r3, [pc, #544]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800234e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ea      	bne.n	800232e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	f000 8097 	beq.w	8002494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	4b81      	ldr	r3, [pc, #516]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10f      	bne.n	8002396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	4b7d      	ldr	r3, [pc, #500]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800237c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800237e:	4a7c      	ldr	r2, [pc, #496]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002384:	6413      	str	r3, [r2, #64]	@ 0x40
 8002386:	4b7a      	ldr	r3, [pc, #488]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800238a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002392:	2301      	movs	r3, #1
 8002394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002396:	4b77      	ldr	r3, [pc, #476]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d118      	bne.n	80023d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023a2:	4b74      	ldr	r3, [pc, #464]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a73      	ldr	r2, [pc, #460]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ae:	f7fe ff55 	bl	800125c <HAL_GetTick>
 80023b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b4:	e008      	b.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023b6:	f7fe ff51 	bl	800125c <HAL_GetTick>
 80023ba:	4602      	mov	r2, r0
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e10c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002574 <HAL_RCC_OscConfig+0x474>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0f0      	beq.n	80023b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d106      	bne.n	80023ea <HAL_RCC_OscConfig+0x2ea>
 80023dc:	4b64      	ldr	r3, [pc, #400]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023e0:	4a63      	ldr	r2, [pc, #396]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80023e8:	e01c      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	2b05      	cmp	r3, #5
 80023f0:	d10c      	bne.n	800240c <HAL_RCC_OscConfig+0x30c>
 80023f2:	4b5f      	ldr	r3, [pc, #380]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023f6:	4a5e      	ldr	r2, [pc, #376]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80023f8:	f043 0304 	orr.w	r3, r3, #4
 80023fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80023fe:	4b5c      	ldr	r3, [pc, #368]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002402:	4a5b      	ldr	r2, [pc, #364]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	6713      	str	r3, [r2, #112]	@ 0x70
 800240a:	e00b      	b.n	8002424 <HAL_RCC_OscConfig+0x324>
 800240c:	4b58      	ldr	r3, [pc, #352]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800240e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002410:	4a57      	ldr	r2, [pc, #348]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	6713      	str	r3, [r2, #112]	@ 0x70
 8002418:	4b55      	ldr	r3, [pc, #340]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800241a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800241c:	4a54      	ldr	r2, [pc, #336]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800241e:	f023 0304 	bic.w	r3, r3, #4
 8002422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d015      	beq.n	8002458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242c:	f7fe ff16 	bl	800125c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002432:	e00a      	b.n	800244a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe ff12 	bl	800125c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e0cb      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	4b49      	ldr	r3, [pc, #292]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800244c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0ee      	beq.n	8002434 <HAL_RCC_OscConfig+0x334>
 8002456:	e014      	b.n	8002482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002458:	f7fe ff00 	bl	800125c <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800245e:	e00a      	b.n	8002476 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002460:	f7fe fefc 	bl	800125c <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246e:	4293      	cmp	r3, r2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e0b5      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002476:	4b3e      	ldr	r3, [pc, #248]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247a:	f003 0302 	and.w	r3, r3, #2
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1ee      	bne.n	8002460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002482:	7dfb      	ldrb	r3, [r7, #23]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d105      	bne.n	8002494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002488:	4b39      	ldr	r3, [pc, #228]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248c:	4a38      	ldr	r2, [pc, #224]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800248e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80a1 	beq.w	80025e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d05c      	beq.n	8002564 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d141      	bne.n	8002536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024b2:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fed0 	bl	800125c <HAL_GetTick>
 80024bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024be:	e008      	b.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024c0:	f7fe fecc 	bl	800125c <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e087      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024d2:	4b27      	ldr	r3, [pc, #156]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d1f0      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69da      	ldr	r2, [r3, #28]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	431a      	orrs	r2, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	491b      	ldr	r1, [pc, #108]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002508:	4b1b      	ldr	r3, [pc, #108]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250e:	f7fe fea5 	bl	800125c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002516:	f7fe fea1 	bl	800125c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e05c      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002528:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x416>
 8002534:	e054      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002536:	4b10      	ldr	r3, [pc, #64]	@ (8002578 <HAL_RCC_OscConfig+0x478>)
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800253c:	f7fe fe8e 	bl	800125c <HAL_GetTick>
 8002540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002544:	f7fe fe8a 	bl	800125c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e045      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002556:	4b06      	ldr	r3, [pc, #24]	@ (8002570 <HAL_RCC_OscConfig+0x470>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1f0      	bne.n	8002544 <HAL_RCC_OscConfig+0x444>
 8002562:	e03d      	b.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d107      	bne.n	800257c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e038      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
 8002570:	40023800 	.word	0x40023800
 8002574:	40007000 	.word	0x40007000
 8002578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800257c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ec <HAL_RCC_OscConfig+0x4ec>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	699b      	ldr	r3, [r3, #24]
 8002586:	2b01      	cmp	r3, #1
 8002588:	d028      	beq.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002594:	429a      	cmp	r2, r3
 8002596:	d121      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d11a      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a6:	68fa      	ldr	r2, [r7, #12]
 80025a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d111      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c2:	085b      	lsrs	r3, r3, #1
 80025c4:	3b01      	subs	r3, #1
 80025c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025c8:	429a      	cmp	r2, r3
 80025ca:	d107      	bne.n	80025dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	d001      	beq.n	80025e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e000      	b.n	80025e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023800 	.word	0x40023800

080025f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0cc      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b68      	ldr	r3, [pc, #416]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 030f 	and.w	r3, r3, #15
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d90c      	bls.n	800262c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b65      	ldr	r3, [pc, #404]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002614:	683a      	ldr	r2, [r7, #0]
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	4a58      	ldr	r2, [pc, #352]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800264a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800264e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	4a52      	ldr	r2, [pc, #328]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d044      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d119      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d003      	beq.n	80026ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e06f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3b      	ldr	r3, [pc, #236]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e067      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b37      	ldr	r3, [pc, #220]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4934      	ldr	r1, [pc, #208]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe fdbc 	bl	800125c <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe fdb8 	bl	800125c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e04f      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2b      	ldr	r3, [pc, #172]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b25      	ldr	r3, [pc, #148]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d20c      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b22      	ldr	r3, [pc, #136]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002720:	683a      	ldr	r2, [r7, #0]
 8002722:	b2d2      	uxtb	r2, r2
 8002724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	@ (80027a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 030f 	and.w	r3, r3, #15
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002752:	4313      	orrs	r3, r2
 8002754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002762:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 8002772:	4313      	orrs	r3, r2
 8002774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_RCC_ClockConfig+0x1bc>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe fd1c 	bl	80011d4 <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40023c00 	.word	0x40023c00
 80027ac:	40023800 	.word	0x40023800
 80027b0:	0800422c 	.word	0x0800422c
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000004 	.word	0x20000004

080027bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027c0:	b094      	sub	sp, #80	@ 0x50
 80027c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80027cc:	2300      	movs	r3, #0
 80027ce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80027d4:	4b79      	ldr	r3, [pc, #484]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 030c 	and.w	r3, r3, #12
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d00d      	beq.n	80027fc <HAL_RCC_GetSysClockFreq+0x40>
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	f200 80e1 	bhi.w	80029a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d002      	beq.n	80027f0 <HAL_RCC_GetSysClockFreq+0x34>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d003      	beq.n	80027f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80027ee:	e0db      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027f0:	4b73      	ldr	r3, [pc, #460]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80027f2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f4:	e0db      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027f6:	4b73      	ldr	r3, [pc, #460]	@ (80029c4 <HAL_RCC_GetSysClockFreq+0x208>)
 80027f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fa:	e0d8      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027fc:	4b6f      	ldr	r3, [pc, #444]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002804:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002806:	4b6d      	ldr	r3, [pc, #436]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800280e:	2b00      	cmp	r3, #0
 8002810:	d063      	beq.n	80028da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002812:	4b6a      	ldr	r3, [pc, #424]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	099b      	lsrs	r3, r3, #6
 8002818:	2200      	movs	r2, #0
 800281a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800281c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800281e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002824:	633b      	str	r3, [r7, #48]	@ 0x30
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	@ 0x34
 800282a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800282e:	4622      	mov	r2, r4
 8002830:	462b      	mov	r3, r5
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f04f 0100 	mov.w	r1, #0
 800283a:	0159      	lsls	r1, r3, #5
 800283c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002840:	0150      	lsls	r0, r2, #5
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4621      	mov	r1, r4
 8002848:	1a51      	subs	r1, r2, r1
 800284a:	6139      	str	r1, [r7, #16]
 800284c:	4629      	mov	r1, r5
 800284e:	eb63 0301 	sbc.w	r3, r3, r1
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	f04f 0300 	mov.w	r3, #0
 800285c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002860:	4659      	mov	r1, fp
 8002862:	018b      	lsls	r3, r1, #6
 8002864:	4651      	mov	r1, sl
 8002866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800286a:	4651      	mov	r1, sl
 800286c:	018a      	lsls	r2, r1, #6
 800286e:	4651      	mov	r1, sl
 8002870:	ebb2 0801 	subs.w	r8, r2, r1
 8002874:	4659      	mov	r1, fp
 8002876:	eb63 0901 	sbc.w	r9, r3, r1
 800287a:	f04f 0200 	mov.w	r2, #0
 800287e:	f04f 0300 	mov.w	r3, #0
 8002882:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002886:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800288a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800288e:	4690      	mov	r8, r2
 8002890:	4699      	mov	r9, r3
 8002892:	4623      	mov	r3, r4
 8002894:	eb18 0303 	adds.w	r3, r8, r3
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	462b      	mov	r3, r5
 800289c:	eb49 0303 	adc.w	r3, r9, r3
 80028a0:	60fb      	str	r3, [r7, #12]
 80028a2:	f04f 0200 	mov.w	r2, #0
 80028a6:	f04f 0300 	mov.w	r3, #0
 80028aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80028ae:	4629      	mov	r1, r5
 80028b0:	024b      	lsls	r3, r1, #9
 80028b2:	4621      	mov	r1, r4
 80028b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80028b8:	4621      	mov	r1, r4
 80028ba:	024a      	lsls	r2, r1, #9
 80028bc:	4610      	mov	r0, r2
 80028be:	4619      	mov	r1, r3
 80028c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028c2:	2200      	movs	r2, #0
 80028c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80028cc:	f7fd fce8 	bl	80002a0 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028d8:	e058      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028da:	4b38      	ldr	r3, [pc, #224]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	099b      	lsrs	r3, r3, #6
 80028e0:	2200      	movs	r2, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	4611      	mov	r1, r2
 80028e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028ea:	623b      	str	r3, [r7, #32]
 80028ec:	2300      	movs	r3, #0
 80028ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f4:	4642      	mov	r2, r8
 80028f6:	464b      	mov	r3, r9
 80028f8:	f04f 0000 	mov.w	r0, #0
 80028fc:	f04f 0100 	mov.w	r1, #0
 8002900:	0159      	lsls	r1, r3, #5
 8002902:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002906:	0150      	lsls	r0, r2, #5
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4641      	mov	r1, r8
 800290e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002912:	4649      	mov	r1, r9
 8002914:	eb63 0b01 	sbc.w	fp, r3, r1
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	f04f 0300 	mov.w	r3, #0
 8002920:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002924:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002928:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800292c:	ebb2 040a 	subs.w	r4, r2, sl
 8002930:	eb63 050b 	sbc.w	r5, r3, fp
 8002934:	f04f 0200 	mov.w	r2, #0
 8002938:	f04f 0300 	mov.w	r3, #0
 800293c:	00eb      	lsls	r3, r5, #3
 800293e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002942:	00e2      	lsls	r2, r4, #3
 8002944:	4614      	mov	r4, r2
 8002946:	461d      	mov	r5, r3
 8002948:	4643      	mov	r3, r8
 800294a:	18e3      	adds	r3, r4, r3
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	464b      	mov	r3, r9
 8002950:	eb45 0303 	adc.w	r3, r5, r3
 8002954:	607b      	str	r3, [r7, #4]
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002962:	4629      	mov	r1, r5
 8002964:	028b      	lsls	r3, r1, #10
 8002966:	4621      	mov	r1, r4
 8002968:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800296c:	4621      	mov	r1, r4
 800296e:	028a      	lsls	r2, r1, #10
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002976:	2200      	movs	r2, #0
 8002978:	61bb      	str	r3, [r7, #24]
 800297a:	61fa      	str	r2, [r7, #28]
 800297c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002980:	f7fd fc8e 	bl	80002a0 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800298c:	4b0b      	ldr	r3, [pc, #44]	@ (80029bc <HAL_RCC_GetSysClockFreq+0x200>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	0c1b      	lsrs	r3, r3, #16
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	3301      	adds	r3, #1
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800299c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800299e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029a6:	e002      	b.n	80029ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029a8:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80029aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3750      	adds	r7, #80	@ 0x50
 80029b4:	46bd      	mov	sp, r7
 80029b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	00f42400 	.word	0x00f42400
 80029c4:	007a1200 	.word	0x007a1200

080029c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000000 	.word	0x20000000

080029e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029e4:	f7ff fff0 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 80029e8:	4602      	mov	r2, r0
 80029ea:	4b05      	ldr	r3, [pc, #20]	@ (8002a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	0a9b      	lsrs	r3, r3, #10
 80029f0:	f003 0307 	and.w	r3, r3, #7
 80029f4:	4903      	ldr	r1, [pc, #12]	@ (8002a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029f6:	5ccb      	ldrb	r3, [r1, r3]
 80029f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40023800 	.word	0x40023800
 8002a04:	0800423c 	.word	0x0800423c

08002a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a0c:	f7ff ffdc 	bl	80029c8 <HAL_RCC_GetHCLKFreq>
 8002a10:	4602      	mov	r2, r0
 8002a12:	4b05      	ldr	r3, [pc, #20]	@ (8002a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	0b5b      	lsrs	r3, r3, #13
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	4903      	ldr	r1, [pc, #12]	@ (8002a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a1e:	5ccb      	ldrb	r3, [r1, r3]
 8002a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	0800423c 	.word	0x0800423c

08002a30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e042      	b.n	8002ac8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d106      	bne.n	8002a5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a56:	6878      	ldr	r0, [r7, #4]
 8002a58:	f7fe fa56 	bl	8000f08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2224      	movs	r2, #36	@ 0x24
 8002a60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 f973 	bl	8002d60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002a88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695a      	ldr	r2, [r3, #20]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002a98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2220      	movs	r2, #32
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b08a      	sub	sp, #40	@ 0x28
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	603b      	str	r3, [r7, #0]
 8002adc:	4613      	mov	r3, r2
 8002ade:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d175      	bne.n	8002bdc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Transmit+0x2c>
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e06e      	b.n	8002bde <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2200      	movs	r2, #0
 8002b04:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2221      	movs	r2, #33	@ 0x21
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b0e:	f7fe fba5 	bl	800125c <HAL_GetTick>
 8002b12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	88fa      	ldrh	r2, [r7, #6]
 8002b18:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	88fa      	ldrh	r2, [r7, #6]
 8002b1e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b28:	d108      	bne.n	8002b3c <HAL_UART_Transmit+0x6c>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d104      	bne.n	8002b3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	e003      	b.n	8002b44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b40:	2300      	movs	r3, #0
 8002b42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b44:	e02e      	b.n	8002ba4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	9300      	str	r3, [sp, #0]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2180      	movs	r1, #128	@ 0x80
 8002b50:	68f8      	ldr	r0, [r7, #12]
 8002b52:	f000 f848 	bl	8002be6 <UART_WaitOnFlagUntilTimeout>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2220      	movs	r2, #32
 8002b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e03a      	b.n	8002bde <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d10b      	bne.n	8002b86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	3302      	adds	r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]
 8002b84:	e007      	b.n	8002b96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	781a      	ldrb	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	3301      	adds	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1cb      	bne.n	8002b46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2140      	movs	r1, #64	@ 0x40
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f000 f814 	bl	8002be6 <UART_WaitOnFlagUntilTimeout>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e006      	b.n	8002bde <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	e000      	b.n	8002bde <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002bdc:	2302      	movs	r3, #2
  }
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3720      	adds	r7, #32
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bf6:	e03b      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfe:	d037      	beq.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c00:	f7fe fb2c 	bl	800125c <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	6a3a      	ldr	r2, [r7, #32]
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d302      	bcc.n	8002c16 <UART_WaitOnFlagUntilTimeout+0x30>
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e03a      	b.n	8002c90 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d023      	beq.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	2b80      	cmp	r3, #128	@ 0x80
 8002c2c:	d020      	beq.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	2b40      	cmp	r3, #64	@ 0x40
 8002c32:	d01d      	beq.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d116      	bne.n	8002c70 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	617b      	str	r3, [r7, #20]
 8002c56:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f000 f81d 	bl	8002c98 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2208      	movs	r2, #8
 8002c62:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e00f      	b.n	8002c90 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	bf0c      	ite	eq
 8002c80:	2301      	moveq	r3, #1
 8002c82:	2300      	movne	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	461a      	mov	r2, r3
 8002c88:	79fb      	ldrb	r3, [r7, #7]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d0b4      	beq.n	8002bf8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c8e:	2300      	movs	r3, #0
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b095      	sub	sp, #84	@ 0x54
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	330c      	adds	r3, #12
 8002ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	330c      	adds	r3, #12
 8002cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002cc0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002cc8:	e841 2300 	strex	r3, r2, [r1]
 8002ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d1e5      	bne.n	8002ca0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	3314      	adds	r3, #20
 8002cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cdc:	6a3b      	ldr	r3, [r7, #32]
 8002cde:	e853 3f00 	ldrex	r3, [r3]
 8002ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f023 0301 	bic.w	r3, r3, #1
 8002cea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	3314      	adds	r3, #20
 8002cf2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002cf4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cf8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cfc:	e841 2300 	strex	r3, r2, [r1]
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e5      	bne.n	8002cd4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d119      	bne.n	8002d44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	330c      	adds	r3, #12
 8002d16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	e853 3f00 	ldrex	r3, [r3]
 8002d1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f023 0310 	bic.w	r3, r3, #16
 8002d26:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	330c      	adds	r3, #12
 8002d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d30:	61ba      	str	r2, [r7, #24]
 8002d32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d34:	6979      	ldr	r1, [r7, #20]
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	e841 2300 	strex	r3, r2, [r1]
 8002d3c:	613b      	str	r3, [r7, #16]
   return(result);
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d1e5      	bne.n	8002d10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2220      	movs	r2, #32
 8002d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002d52:	bf00      	nop
 8002d54:	3754      	adds	r7, #84	@ 0x54
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b0c0      	sub	sp, #256	@ 0x100
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7c:	68d9      	ldr	r1, [r3, #12]
 8002d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	ea40 0301 	orr.w	r3, r0, r1
 8002d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d8e:	689a      	ldr	r2, [r3, #8]
 8002d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	431a      	orrs	r2, r3
 8002d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002db8:	f021 010c 	bic.w	r1, r1, #12
 8002dbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
 8002dd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dda:	6999      	ldr	r1, [r3, #24]
 8002ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	ea40 0301 	orr.w	r3, r0, r1
 8002de6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b8f      	ldr	r3, [pc, #572]	@ (800302c <UART_SetConfig+0x2cc>)
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d005      	beq.n	8002e00 <UART_SetConfig+0xa0>
 8002df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4b8d      	ldr	r3, [pc, #564]	@ (8003030 <UART_SetConfig+0x2d0>)
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d104      	bne.n	8002e0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002e00:	f7ff fe02 	bl	8002a08 <HAL_RCC_GetPCLK2Freq>
 8002e04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002e08:	e003      	b.n	8002e12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e0a:	f7ff fde9 	bl	80029e0 <HAL_RCC_GetPCLK1Freq>
 8002e0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e1c:	f040 810c 	bne.w	8003038 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002e20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002e2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002e2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002e32:	4622      	mov	r2, r4
 8002e34:	462b      	mov	r3, r5
 8002e36:	1891      	adds	r1, r2, r2
 8002e38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002e3a:	415b      	adcs	r3, r3
 8002e3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002e3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002e42:	4621      	mov	r1, r4
 8002e44:	eb12 0801 	adds.w	r8, r2, r1
 8002e48:	4629      	mov	r1, r5
 8002e4a:	eb43 0901 	adc.w	r9, r3, r1
 8002e4e:	f04f 0200 	mov.w	r2, #0
 8002e52:	f04f 0300 	mov.w	r3, #0
 8002e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e62:	4690      	mov	r8, r2
 8002e64:	4699      	mov	r9, r3
 8002e66:	4623      	mov	r3, r4
 8002e68:	eb18 0303 	adds.w	r3, r8, r3
 8002e6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e70:	462b      	mov	r3, r5
 8002e72:	eb49 0303 	adc.w	r3, r9, r3
 8002e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002e86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002e8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002e8e:	460b      	mov	r3, r1
 8002e90:	18db      	adds	r3, r3, r3
 8002e92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002e94:	4613      	mov	r3, r2
 8002e96:	eb42 0303 	adc.w	r3, r2, r3
 8002e9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002e9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002ea0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002ea4:	f7fd f9fc 	bl	80002a0 <__aeabi_uldivmod>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	460b      	mov	r3, r1
 8002eac:	4b61      	ldr	r3, [pc, #388]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002eae:	fba3 2302 	umull	r2, r3, r3, r2
 8002eb2:	095b      	lsrs	r3, r3, #5
 8002eb4:	011c      	lsls	r4, r3, #4
 8002eb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002ec0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002ec4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	1891      	adds	r1, r2, r2
 8002ece:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002ed0:	415b      	adcs	r3, r3
 8002ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ed4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002ed8:	4641      	mov	r1, r8
 8002eda:	eb12 0a01 	adds.w	sl, r2, r1
 8002ede:	4649      	mov	r1, r9
 8002ee0:	eb43 0b01 	adc.w	fp, r3, r1
 8002ee4:	f04f 0200 	mov.w	r2, #0
 8002ee8:	f04f 0300 	mov.w	r3, #0
 8002eec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ef0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ef8:	4692      	mov	sl, r2
 8002efa:	469b      	mov	fp, r3
 8002efc:	4643      	mov	r3, r8
 8002efe:	eb1a 0303 	adds.w	r3, sl, r3
 8002f02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002f06:	464b      	mov	r3, r9
 8002f08:	eb4b 0303 	adc.w	r3, fp, r3
 8002f0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f24:	460b      	mov	r3, r1
 8002f26:	18db      	adds	r3, r3, r3
 8002f28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	eb42 0303 	adc.w	r3, r2, r3
 8002f30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002f32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002f3a:	f7fd f9b1 	bl	80002a0 <__aeabi_uldivmod>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4611      	mov	r1, r2
 8002f44:	4b3b      	ldr	r3, [pc, #236]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002f46:	fba3 2301 	umull	r2, r3, r3, r1
 8002f4a:	095b      	lsrs	r3, r3, #5
 8002f4c:	2264      	movs	r2, #100	@ 0x64
 8002f4e:	fb02 f303 	mul.w	r3, r2, r3
 8002f52:	1acb      	subs	r3, r1, r3
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002f5a:	4b36      	ldr	r3, [pc, #216]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002f5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002f60:	095b      	lsrs	r3, r3, #5
 8002f62:	005b      	lsls	r3, r3, #1
 8002f64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002f68:	441c      	add	r4, r3
 8002f6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002f78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002f7c:	4642      	mov	r2, r8
 8002f7e:	464b      	mov	r3, r9
 8002f80:	1891      	adds	r1, r2, r2
 8002f82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002f84:	415b      	adcs	r3, r3
 8002f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002f8c:	4641      	mov	r1, r8
 8002f8e:	1851      	adds	r1, r2, r1
 8002f90:	6339      	str	r1, [r7, #48]	@ 0x30
 8002f92:	4649      	mov	r1, r9
 8002f94:	414b      	adcs	r3, r1
 8002f96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f98:	f04f 0200 	mov.w	r2, #0
 8002f9c:	f04f 0300 	mov.w	r3, #0
 8002fa0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002fa4:	4659      	mov	r1, fp
 8002fa6:	00cb      	lsls	r3, r1, #3
 8002fa8:	4651      	mov	r1, sl
 8002faa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002fae:	4651      	mov	r1, sl
 8002fb0:	00ca      	lsls	r2, r1, #3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	4642      	mov	r2, r8
 8002fba:	189b      	adds	r3, r3, r2
 8002fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fc0:	464b      	mov	r3, r9
 8002fc2:	460a      	mov	r2, r1
 8002fc4:	eb42 0303 	adc.w	r3, r2, r3
 8002fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002fd8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002fdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	18db      	adds	r3, r3, r3
 8002fe4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	eb42 0303 	adc.w	r3, r2, r3
 8002fec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002fee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ff2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ff6:	f7fd f953 	bl	80002a0 <__aeabi_uldivmod>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8003034 <UART_SetConfig+0x2d4>)
 8003000:	fba3 1302 	umull	r1, r3, r3, r2
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	2164      	movs	r1, #100	@ 0x64
 8003008:	fb01 f303 	mul.w	r3, r1, r3
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	00db      	lsls	r3, r3, #3
 8003010:	3332      	adds	r3, #50	@ 0x32
 8003012:	4a08      	ldr	r2, [pc, #32]	@ (8003034 <UART_SetConfig+0x2d4>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	095b      	lsrs	r3, r3, #5
 800301a:	f003 0207 	and.w	r2, r3, #7
 800301e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4422      	add	r2, r4
 8003026:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003028:	e106      	b.n	8003238 <UART_SetConfig+0x4d8>
 800302a:	bf00      	nop
 800302c:	40011000 	.word	0x40011000
 8003030:	40011400 	.word	0x40011400
 8003034:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003038:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800303c:	2200      	movs	r2, #0
 800303e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003042:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003046:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800304a:	4642      	mov	r2, r8
 800304c:	464b      	mov	r3, r9
 800304e:	1891      	adds	r1, r2, r2
 8003050:	6239      	str	r1, [r7, #32]
 8003052:	415b      	adcs	r3, r3
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
 8003056:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800305a:	4641      	mov	r1, r8
 800305c:	1854      	adds	r4, r2, r1
 800305e:	4649      	mov	r1, r9
 8003060:	eb43 0501 	adc.w	r5, r3, r1
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	00eb      	lsls	r3, r5, #3
 800306e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003072:	00e2      	lsls	r2, r4, #3
 8003074:	4614      	mov	r4, r2
 8003076:	461d      	mov	r5, r3
 8003078:	4643      	mov	r3, r8
 800307a:	18e3      	adds	r3, r4, r3
 800307c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003080:	464b      	mov	r3, r9
 8003082:	eb45 0303 	adc.w	r3, r5, r3
 8003086:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800308a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003096:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800309a:	f04f 0200 	mov.w	r2, #0
 800309e:	f04f 0300 	mov.w	r3, #0
 80030a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80030a6:	4629      	mov	r1, r5
 80030a8:	008b      	lsls	r3, r1, #2
 80030aa:	4621      	mov	r1, r4
 80030ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030b0:	4621      	mov	r1, r4
 80030b2:	008a      	lsls	r2, r1, #2
 80030b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80030b8:	f7fd f8f2 	bl	80002a0 <__aeabi_uldivmod>
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4b60      	ldr	r3, [pc, #384]	@ (8003244 <UART_SetConfig+0x4e4>)
 80030c2:	fba3 2302 	umull	r2, r3, r3, r2
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	011c      	lsls	r4, r3, #4
 80030ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80030d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80030d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80030dc:	4642      	mov	r2, r8
 80030de:	464b      	mov	r3, r9
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	61b9      	str	r1, [r7, #24]
 80030e4:	415b      	adcs	r3, r3
 80030e6:	61fb      	str	r3, [r7, #28]
 80030e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030ec:	4641      	mov	r1, r8
 80030ee:	1851      	adds	r1, r2, r1
 80030f0:	6139      	str	r1, [r7, #16]
 80030f2:	4649      	mov	r1, r9
 80030f4:	414b      	adcs	r3, r1
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003104:	4659      	mov	r1, fp
 8003106:	00cb      	lsls	r3, r1, #3
 8003108:	4651      	mov	r1, sl
 800310a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800310e:	4651      	mov	r1, sl
 8003110:	00ca      	lsls	r2, r1, #3
 8003112:	4610      	mov	r0, r2
 8003114:	4619      	mov	r1, r3
 8003116:	4603      	mov	r3, r0
 8003118:	4642      	mov	r2, r8
 800311a:	189b      	adds	r3, r3, r2
 800311c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003120:	464b      	mov	r3, r9
 8003122:	460a      	mov	r2, r1
 8003124:	eb42 0303 	adc.w	r3, r2, r3
 8003128:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800312c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003136:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003138:	f04f 0200 	mov.w	r2, #0
 800313c:	f04f 0300 	mov.w	r3, #0
 8003140:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003144:	4649      	mov	r1, r9
 8003146:	008b      	lsls	r3, r1, #2
 8003148:	4641      	mov	r1, r8
 800314a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800314e:	4641      	mov	r1, r8
 8003150:	008a      	lsls	r2, r1, #2
 8003152:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003156:	f7fd f8a3 	bl	80002a0 <__aeabi_uldivmod>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4611      	mov	r1, r2
 8003160:	4b38      	ldr	r3, [pc, #224]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003162:	fba3 2301 	umull	r2, r3, r3, r1
 8003166:	095b      	lsrs	r3, r3, #5
 8003168:	2264      	movs	r2, #100	@ 0x64
 800316a:	fb02 f303 	mul.w	r3, r2, r3
 800316e:	1acb      	subs	r3, r1, r3
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	3332      	adds	r3, #50	@ 0x32
 8003174:	4a33      	ldr	r2, [pc, #204]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003176:	fba2 2303 	umull	r2, r3, r2, r3
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003180:	441c      	add	r4, r3
 8003182:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003186:	2200      	movs	r2, #0
 8003188:	673b      	str	r3, [r7, #112]	@ 0x70
 800318a:	677a      	str	r2, [r7, #116]	@ 0x74
 800318c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003190:	4642      	mov	r2, r8
 8003192:	464b      	mov	r3, r9
 8003194:	1891      	adds	r1, r2, r2
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	415b      	adcs	r3, r3
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80031a0:	4641      	mov	r1, r8
 80031a2:	1851      	adds	r1, r2, r1
 80031a4:	6039      	str	r1, [r7, #0]
 80031a6:	4649      	mov	r1, r9
 80031a8:	414b      	adcs	r3, r1
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	f04f 0200 	mov.w	r2, #0
 80031b0:	f04f 0300 	mov.w	r3, #0
 80031b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80031b8:	4659      	mov	r1, fp
 80031ba:	00cb      	lsls	r3, r1, #3
 80031bc:	4651      	mov	r1, sl
 80031be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031c2:	4651      	mov	r1, sl
 80031c4:	00ca      	lsls	r2, r1, #3
 80031c6:	4610      	mov	r0, r2
 80031c8:	4619      	mov	r1, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	4642      	mov	r2, r8
 80031ce:	189b      	adds	r3, r3, r2
 80031d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80031d2:	464b      	mov	r3, r9
 80031d4:	460a      	mov	r2, r1
 80031d6:	eb42 0303 	adc.w	r3, r2, r3
 80031da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80031e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80031f4:	4649      	mov	r1, r9
 80031f6:	008b      	lsls	r3, r1, #2
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031fe:	4641      	mov	r1, r8
 8003200:	008a      	lsls	r2, r1, #2
 8003202:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003206:	f7fd f84b 	bl	80002a0 <__aeabi_uldivmod>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4b0d      	ldr	r3, [pc, #52]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003210:	fba3 1302 	umull	r1, r3, r3, r2
 8003214:	095b      	lsrs	r3, r3, #5
 8003216:	2164      	movs	r1, #100	@ 0x64
 8003218:	fb01 f303 	mul.w	r3, r1, r3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	3332      	adds	r3, #50	@ 0x32
 8003222:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <UART_SetConfig+0x4e4>)
 8003224:	fba2 2303 	umull	r2, r3, r2, r3
 8003228:	095b      	lsrs	r3, r3, #5
 800322a:	f003 020f 	and.w	r2, r3, #15
 800322e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4422      	add	r2, r4
 8003236:	609a      	str	r2, [r3, #8]
}
 8003238:	bf00      	nop
 800323a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800323e:	46bd      	mov	sp, r7
 8003240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003244:	51eb851f 	.word	0x51eb851f

08003248 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003248:	b084      	sub	sp, #16
 800324a:	b580      	push	{r7, lr}
 800324c:	b084      	sub	sp, #16
 800324e:	af00      	add	r7, sp, #0
 8003250:	6078      	str	r0, [r7, #4]
 8003252:	f107 001c 	add.w	r0, r7, #28
 8003256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800325a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800325e:	2b01      	cmp	r3, #1
 8003260:	d123      	bne.n	80032aa <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003266:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003276:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800328a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800328e:	2b01      	cmp	r3, #1
 8003290:	d105      	bne.n	800329e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 faa0 	bl	80037e4 <USB_CoreReset>
 80032a4:	4603      	mov	r3, r0
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e01b      	b.n	80032e2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fa94 	bl	80037e4 <USB_CoreReset>
 80032bc:	4603      	mov	r3, r0
 80032be:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80032c0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032cc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	639a      	str	r2, [r3, #56]	@ 0x38
 80032d4:	e005      	b.n	80032e2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032da:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80032e2:	7fbb      	ldrb	r3, [r7, #30]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d10b      	bne.n	8003300 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f043 0206 	orr.w	r2, r3, #6
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f043 0220 	orr.w	r2, r3, #32
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003300:	7bfb      	ldrb	r3, [r7, #15]
}
 8003302:	4618      	mov	r0, r3
 8003304:	3710      	adds	r7, #16
 8003306:	46bd      	mov	sp, r7
 8003308:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800330c:	b004      	add	sp, #16
 800330e:	4770      	bx	lr

08003310 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003310:	b480      	push	{r7}
 8003312:	b083      	sub	sp, #12
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f023 0201 	bic.w	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d115      	bne.n	8003380 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003360:	200a      	movs	r0, #10
 8003362:	f7fd ff87 	bl	8001274 <HAL_Delay>
      ms += 10U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	330a      	adds	r3, #10
 800336a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f000 fa2b 	bl	80037c8 <USB_GetMode>
 8003372:	4603      	mov	r3, r0
 8003374:	2b01      	cmp	r3, #1
 8003376:	d01e      	beq.n	80033b6 <USB_SetCurrentMode+0x84>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2bc7      	cmp	r3, #199	@ 0xc7
 800337c:	d9f0      	bls.n	8003360 <USB_SetCurrentMode+0x2e>
 800337e:	e01a      	b.n	80033b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003380:	78fb      	ldrb	r3, [r7, #3]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d115      	bne.n	80033b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003392:	200a      	movs	r0, #10
 8003394:	f7fd ff6e 	bl	8001274 <HAL_Delay>
      ms += 10U;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	330a      	adds	r3, #10
 800339c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 fa12 	bl	80037c8 <USB_GetMode>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d005      	beq.n	80033b6 <USB_SetCurrentMode+0x84>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2bc7      	cmp	r3, #199	@ 0xc7
 80033ae:	d9f0      	bls.n	8003392 <USB_SetCurrentMode+0x60>
 80033b0:	e001      	b.n	80033b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e005      	b.n	80033c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2bc8      	cmp	r3, #200	@ 0xc8
 80033ba:	d101      	bne.n	80033c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e000      	b.n	80033c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80033cc:	b084      	sub	sp, #16
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
 80033d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80033da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80033de:	2300      	movs	r3, #0
 80033e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80033e6:	2300      	movs	r3, #0
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	e009      	b.n	8003400 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	3340      	adds	r3, #64	@ 0x40
 80033f2:	009b      	lsls	r3, r3, #2
 80033f4:	4413      	add	r3, r2
 80033f6:	2200      	movs	r2, #0
 80033f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	3301      	adds	r3, #1
 80033fe:	613b      	str	r3, [r7, #16]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0e      	cmp	r3, #14
 8003404:	d9f2      	bls.n	80033ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003406:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800340a:	2b00      	cmp	r3, #0
 800340c:	d11c      	bne.n	8003448 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800341c:	f043 0302 	orr.w	r3, r3, #2
 8003420:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003426:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003432:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800343e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38
 8003446:	e00b      	b.n	8003460 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003458:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003466:	461a      	mov	r2, r3
 8003468:	2300      	movs	r3, #0
 800346a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800346c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003470:	2b01      	cmp	r3, #1
 8003472:	d10d      	bne.n	8003490 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003474:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003478:	2b00      	cmp	r3, #0
 800347a:	d104      	bne.n	8003486 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800347c:	2100      	movs	r1, #0
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f968 	bl	8003754 <USB_SetDevSpeed>
 8003484:	e008      	b.n	8003498 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003486:	2101      	movs	r1, #1
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 f963 	bl	8003754 <USB_SetDevSpeed>
 800348e:	e003      	b.n	8003498 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003490:	2103      	movs	r1, #3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 f95e 	bl	8003754 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003498:	2110      	movs	r1, #16
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 f8fa 	bl	8003694 <USB_FlushTxFifo>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f924 	bl	80036f8 <USB_FlushRxFifo>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034c0:	461a      	mov	r2, r3
 80034c2:	2300      	movs	r3, #0
 80034c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034cc:	461a      	mov	r2, r3
 80034ce:	2300      	movs	r3, #0
 80034d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80034d8:	461a      	mov	r2, r3
 80034da:	2300      	movs	r3, #0
 80034dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	e043      	b.n	800356c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	015a      	lsls	r2, r3, #5
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	4413      	add	r3, r2
 80034ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80034f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80034fa:	d118      	bne.n	800352e <USB_DevInit+0x162>
    {
      if (i == 0U)
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d10a      	bne.n	8003518 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	4413      	add	r3, r2
 800350a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800350e:	461a      	mov	r2, r3
 8003510:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e013      	b.n	8003540 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	015a      	lsls	r2, r3, #5
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4413      	add	r3, r2
 8003520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003524:	461a      	mov	r2, r3
 8003526:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	e008      	b.n	8003540 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	015a      	lsls	r2, r3, #5
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	4413      	add	r3, r2
 8003536:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800353a:	461a      	mov	r2, r3
 800353c:	2300      	movs	r3, #0
 800353e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800354c:	461a      	mov	r2, r3
 800354e:	2300      	movs	r3, #0
 8003550:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	015a      	lsls	r2, r3, #5
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	4413      	add	r3, r2
 800355a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800355e:	461a      	mov	r2, r3
 8003560:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003564:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	3301      	adds	r3, #1
 800356a:	613b      	str	r3, [r7, #16]
 800356c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003570:	461a      	mov	r2, r3
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4293      	cmp	r3, r2
 8003576:	d3b5      	bcc.n	80034e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003578:	2300      	movs	r3, #0
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	e043      	b.n	8003606 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	015a      	lsls	r2, r3, #5
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	4413      	add	r3, r2
 8003586:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003590:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003594:	d118      	bne.n	80035c8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10a      	bne.n	80035b2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035a8:	461a      	mov	r2, r3
 80035aa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80035ae:	6013      	str	r3, [r2, #0]
 80035b0:	e013      	b.n	80035da <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	015a      	lsls	r2, r3, #5
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4413      	add	r3, r2
 80035ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035be:	461a      	mov	r2, r3
 80035c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e008      	b.n	80035da <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	015a      	lsls	r2, r3, #5
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	4413      	add	r3, r2
 80035d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035d4:	461a      	mov	r2, r3
 80035d6:	2300      	movs	r3, #0
 80035d8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	015a      	lsls	r2, r3, #5
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035e6:	461a      	mov	r2, r3
 80035e8:	2300      	movs	r3, #0
 80035ea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80035f8:	461a      	mov	r2, r3
 80035fa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80035fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3301      	adds	r3, #1
 8003604:	613b      	str	r3, [r7, #16]
 8003606:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800360a:	461a      	mov	r2, r3
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4293      	cmp	r3, r2
 8003610:	d3b5      	bcc.n	800357e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003620:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003624:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003632:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003634:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003638:	2b00      	cmp	r3, #0
 800363a:	d105      	bne.n	8003648 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	f043 0210 	orr.w	r2, r3, #16
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	699a      	ldr	r2, [r3, #24]
 800364c:	4b10      	ldr	r3, [pc, #64]	@ (8003690 <USB_DevInit+0x2c4>)
 800364e:	4313      	orrs	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003654:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003658:	2b00      	cmp	r3, #0
 800365a:	d005      	beq.n	8003668 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	f043 0208 	orr.w	r2, r3, #8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003668:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800366c:	2b01      	cmp	r3, #1
 800366e:	d107      	bne.n	8003680 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003680:	7dfb      	ldrb	r3, [r7, #23]
}
 8003682:	4618      	mov	r0, r3
 8003684:	3718      	adds	r7, #24
 8003686:	46bd      	mov	sp, r7
 8003688:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800368c:	b004      	add	sp, #16
 800368e:	4770      	bx	lr
 8003690:	803c3800 	.word	0x803c3800

08003694 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	3301      	adds	r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036ae:	d901      	bls.n	80036b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80036b0:	2303      	movs	r3, #3
 80036b2:	e01b      	b.n	80036ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	daf2      	bge.n	80036a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80036bc:	2300      	movs	r3, #0
 80036be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	019b      	lsls	r3, r3, #6
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	3301      	adds	r3, #1
 80036d0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80036d8:	d901      	bls.n	80036de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e006      	b.n	80036ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d0f0      	beq.n	80036cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3714      	adds	r7, #20
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b085      	sub	sp, #20
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	3301      	adds	r3, #1
 8003708:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003710:	d901      	bls.n	8003716 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003712:	2303      	movs	r3, #3
 8003714:	e018      	b.n	8003748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	2b00      	cmp	r3, #0
 800371c:	daf2      	bge.n	8003704 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2210      	movs	r2, #16
 8003726:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	3301      	adds	r3, #1
 800372c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003734:	d901      	bls.n	800373a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e006      	b.n	8003748 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b10      	cmp	r3, #16
 8003744:	d0f0      	beq.n	8003728 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
 800375c:	460b      	mov	r3, r1
 800375e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	78fb      	ldrb	r3, [r7, #3]
 800376e:	68f9      	ldr	r1, [r7, #12]
 8003770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003774:	4313      	orrs	r3, r2
 8003776:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	3714      	adds	r7, #20
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003786:	b480      	push	{r7}
 8003788:	b085      	sub	sp, #20
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80037a0:	f023 0303 	bic.w	r3, r3, #3
 80037a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b4:	f043 0302 	orr.w	r3, r3, #2
 80037b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3714      	adds	r7, #20
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0301 	and.w	r3, r3, #1
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	3301      	adds	r3, #1
 80037f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80037fc:	d901      	bls.n	8003802 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e01b      	b.n	800383a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	691b      	ldr	r3, [r3, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	daf2      	bge.n	80037f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f043 0201 	orr.w	r2, r3, #1
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	3301      	adds	r3, #1
 800381e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003826:	d901      	bls.n	800382c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e006      	b.n	800383a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d0f0      	beq.n	800381a <USB_CoreReset+0x36>

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <sniprintf>:
 8003848:	b40c      	push	{r2, r3}
 800384a:	b530      	push	{r4, r5, lr}
 800384c:	4b17      	ldr	r3, [pc, #92]	@ (80038ac <sniprintf+0x64>)
 800384e:	1e0c      	subs	r4, r1, #0
 8003850:	681d      	ldr	r5, [r3, #0]
 8003852:	b09d      	sub	sp, #116	@ 0x74
 8003854:	da08      	bge.n	8003868 <sniprintf+0x20>
 8003856:	238b      	movs	r3, #139	@ 0x8b
 8003858:	602b      	str	r3, [r5, #0]
 800385a:	f04f 30ff 	mov.w	r0, #4294967295
 800385e:	b01d      	add	sp, #116	@ 0x74
 8003860:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003864:	b002      	add	sp, #8
 8003866:	4770      	bx	lr
 8003868:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800386c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003870:	bf14      	ite	ne
 8003872:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003876:	4623      	moveq	r3, r4
 8003878:	9304      	str	r3, [sp, #16]
 800387a:	9307      	str	r3, [sp, #28]
 800387c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003880:	9002      	str	r0, [sp, #8]
 8003882:	9006      	str	r0, [sp, #24]
 8003884:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003888:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800388a:	ab21      	add	r3, sp, #132	@ 0x84
 800388c:	a902      	add	r1, sp, #8
 800388e:	4628      	mov	r0, r5
 8003890:	9301      	str	r3, [sp, #4]
 8003892:	f000 f995 	bl	8003bc0 <_svfiprintf_r>
 8003896:	1c43      	adds	r3, r0, #1
 8003898:	bfbc      	itt	lt
 800389a:	238b      	movlt	r3, #139	@ 0x8b
 800389c:	602b      	strlt	r3, [r5, #0]
 800389e:	2c00      	cmp	r4, #0
 80038a0:	d0dd      	beq.n	800385e <sniprintf+0x16>
 80038a2:	9b02      	ldr	r3, [sp, #8]
 80038a4:	2200      	movs	r2, #0
 80038a6:	701a      	strb	r2, [r3, #0]
 80038a8:	e7d9      	b.n	800385e <sniprintf+0x16>
 80038aa:	bf00      	nop
 80038ac:	2000000c 	.word	0x2000000c

080038b0 <memset>:
 80038b0:	4402      	add	r2, r0
 80038b2:	4603      	mov	r3, r0
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d100      	bne.n	80038ba <memset+0xa>
 80038b8:	4770      	bx	lr
 80038ba:	f803 1b01 	strb.w	r1, [r3], #1
 80038be:	e7f9      	b.n	80038b4 <memset+0x4>

080038c0 <__errno>:
 80038c0:	4b01      	ldr	r3, [pc, #4]	@ (80038c8 <__errno+0x8>)
 80038c2:	6818      	ldr	r0, [r3, #0]
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	2000000c 	.word	0x2000000c

080038cc <__libc_init_array>:
 80038cc:	b570      	push	{r4, r5, r6, lr}
 80038ce:	4d0d      	ldr	r5, [pc, #52]	@ (8003904 <__libc_init_array+0x38>)
 80038d0:	4c0d      	ldr	r4, [pc, #52]	@ (8003908 <__libc_init_array+0x3c>)
 80038d2:	1b64      	subs	r4, r4, r5
 80038d4:	10a4      	asrs	r4, r4, #2
 80038d6:	2600      	movs	r6, #0
 80038d8:	42a6      	cmp	r6, r4
 80038da:	d109      	bne.n	80038f0 <__libc_init_array+0x24>
 80038dc:	4d0b      	ldr	r5, [pc, #44]	@ (800390c <__libc_init_array+0x40>)
 80038de:	4c0c      	ldr	r4, [pc, #48]	@ (8003910 <__libc_init_array+0x44>)
 80038e0:	f000 fc66 	bl	80041b0 <_init>
 80038e4:	1b64      	subs	r4, r4, r5
 80038e6:	10a4      	asrs	r4, r4, #2
 80038e8:	2600      	movs	r6, #0
 80038ea:	42a6      	cmp	r6, r4
 80038ec:	d105      	bne.n	80038fa <__libc_init_array+0x2e>
 80038ee:	bd70      	pop	{r4, r5, r6, pc}
 80038f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80038f4:	4798      	blx	r3
 80038f6:	3601      	adds	r6, #1
 80038f8:	e7ee      	b.n	80038d8 <__libc_init_array+0xc>
 80038fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80038fe:	4798      	blx	r3
 8003900:	3601      	adds	r6, #1
 8003902:	e7f2      	b.n	80038ea <__libc_init_array+0x1e>
 8003904:	08004280 	.word	0x08004280
 8003908:	08004280 	.word	0x08004280
 800390c:	08004280 	.word	0x08004280
 8003910:	08004284 	.word	0x08004284

08003914 <__retarget_lock_acquire_recursive>:
 8003914:	4770      	bx	lr

08003916 <__retarget_lock_release_recursive>:
 8003916:	4770      	bx	lr

08003918 <_free_r>:
 8003918:	b538      	push	{r3, r4, r5, lr}
 800391a:	4605      	mov	r5, r0
 800391c:	2900      	cmp	r1, #0
 800391e:	d041      	beq.n	80039a4 <_free_r+0x8c>
 8003920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003924:	1f0c      	subs	r4, r1, #4
 8003926:	2b00      	cmp	r3, #0
 8003928:	bfb8      	it	lt
 800392a:	18e4      	addlt	r4, r4, r3
 800392c:	f000 f8e0 	bl	8003af0 <__malloc_lock>
 8003930:	4a1d      	ldr	r2, [pc, #116]	@ (80039a8 <_free_r+0x90>)
 8003932:	6813      	ldr	r3, [r2, #0]
 8003934:	b933      	cbnz	r3, 8003944 <_free_r+0x2c>
 8003936:	6063      	str	r3, [r4, #4]
 8003938:	6014      	str	r4, [r2, #0]
 800393a:	4628      	mov	r0, r5
 800393c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003940:	f000 b8dc 	b.w	8003afc <__malloc_unlock>
 8003944:	42a3      	cmp	r3, r4
 8003946:	d908      	bls.n	800395a <_free_r+0x42>
 8003948:	6820      	ldr	r0, [r4, #0]
 800394a:	1821      	adds	r1, r4, r0
 800394c:	428b      	cmp	r3, r1
 800394e:	bf01      	itttt	eq
 8003950:	6819      	ldreq	r1, [r3, #0]
 8003952:	685b      	ldreq	r3, [r3, #4]
 8003954:	1809      	addeq	r1, r1, r0
 8003956:	6021      	streq	r1, [r4, #0]
 8003958:	e7ed      	b.n	8003936 <_free_r+0x1e>
 800395a:	461a      	mov	r2, r3
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	b10b      	cbz	r3, 8003964 <_free_r+0x4c>
 8003960:	42a3      	cmp	r3, r4
 8003962:	d9fa      	bls.n	800395a <_free_r+0x42>
 8003964:	6811      	ldr	r1, [r2, #0]
 8003966:	1850      	adds	r0, r2, r1
 8003968:	42a0      	cmp	r0, r4
 800396a:	d10b      	bne.n	8003984 <_free_r+0x6c>
 800396c:	6820      	ldr	r0, [r4, #0]
 800396e:	4401      	add	r1, r0
 8003970:	1850      	adds	r0, r2, r1
 8003972:	4283      	cmp	r3, r0
 8003974:	6011      	str	r1, [r2, #0]
 8003976:	d1e0      	bne.n	800393a <_free_r+0x22>
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	6053      	str	r3, [r2, #4]
 800397e:	4408      	add	r0, r1
 8003980:	6010      	str	r0, [r2, #0]
 8003982:	e7da      	b.n	800393a <_free_r+0x22>
 8003984:	d902      	bls.n	800398c <_free_r+0x74>
 8003986:	230c      	movs	r3, #12
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	e7d6      	b.n	800393a <_free_r+0x22>
 800398c:	6820      	ldr	r0, [r4, #0]
 800398e:	1821      	adds	r1, r4, r0
 8003990:	428b      	cmp	r3, r1
 8003992:	bf04      	itt	eq
 8003994:	6819      	ldreq	r1, [r3, #0]
 8003996:	685b      	ldreq	r3, [r3, #4]
 8003998:	6063      	str	r3, [r4, #4]
 800399a:	bf04      	itt	eq
 800399c:	1809      	addeq	r1, r1, r0
 800399e:	6021      	streq	r1, [r4, #0]
 80039a0:	6054      	str	r4, [r2, #4]
 80039a2:	e7ca      	b.n	800393a <_free_r+0x22>
 80039a4:	bd38      	pop	{r3, r4, r5, pc}
 80039a6:	bf00      	nop
 80039a8:	20000950 	.word	0x20000950

080039ac <sbrk_aligned>:
 80039ac:	b570      	push	{r4, r5, r6, lr}
 80039ae:	4e0f      	ldr	r6, [pc, #60]	@ (80039ec <sbrk_aligned+0x40>)
 80039b0:	460c      	mov	r4, r1
 80039b2:	6831      	ldr	r1, [r6, #0]
 80039b4:	4605      	mov	r5, r0
 80039b6:	b911      	cbnz	r1, 80039be <sbrk_aligned+0x12>
 80039b8:	f000 fba6 	bl	8004108 <_sbrk_r>
 80039bc:	6030      	str	r0, [r6, #0]
 80039be:	4621      	mov	r1, r4
 80039c0:	4628      	mov	r0, r5
 80039c2:	f000 fba1 	bl	8004108 <_sbrk_r>
 80039c6:	1c43      	adds	r3, r0, #1
 80039c8:	d103      	bne.n	80039d2 <sbrk_aligned+0x26>
 80039ca:	f04f 34ff 	mov.w	r4, #4294967295
 80039ce:	4620      	mov	r0, r4
 80039d0:	bd70      	pop	{r4, r5, r6, pc}
 80039d2:	1cc4      	adds	r4, r0, #3
 80039d4:	f024 0403 	bic.w	r4, r4, #3
 80039d8:	42a0      	cmp	r0, r4
 80039da:	d0f8      	beq.n	80039ce <sbrk_aligned+0x22>
 80039dc:	1a21      	subs	r1, r4, r0
 80039de:	4628      	mov	r0, r5
 80039e0:	f000 fb92 	bl	8004108 <_sbrk_r>
 80039e4:	3001      	adds	r0, #1
 80039e6:	d1f2      	bne.n	80039ce <sbrk_aligned+0x22>
 80039e8:	e7ef      	b.n	80039ca <sbrk_aligned+0x1e>
 80039ea:	bf00      	nop
 80039ec:	2000094c 	.word	0x2000094c

080039f0 <_malloc_r>:
 80039f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039f4:	1ccd      	adds	r5, r1, #3
 80039f6:	f025 0503 	bic.w	r5, r5, #3
 80039fa:	3508      	adds	r5, #8
 80039fc:	2d0c      	cmp	r5, #12
 80039fe:	bf38      	it	cc
 8003a00:	250c      	movcc	r5, #12
 8003a02:	2d00      	cmp	r5, #0
 8003a04:	4606      	mov	r6, r0
 8003a06:	db01      	blt.n	8003a0c <_malloc_r+0x1c>
 8003a08:	42a9      	cmp	r1, r5
 8003a0a:	d904      	bls.n	8003a16 <_malloc_r+0x26>
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	6033      	str	r3, [r6, #0]
 8003a10:	2000      	movs	r0, #0
 8003a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003aec <_malloc_r+0xfc>
 8003a1a:	f000 f869 	bl	8003af0 <__malloc_lock>
 8003a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8003a22:	461c      	mov	r4, r3
 8003a24:	bb44      	cbnz	r4, 8003a78 <_malloc_r+0x88>
 8003a26:	4629      	mov	r1, r5
 8003a28:	4630      	mov	r0, r6
 8003a2a:	f7ff ffbf 	bl	80039ac <sbrk_aligned>
 8003a2e:	1c43      	adds	r3, r0, #1
 8003a30:	4604      	mov	r4, r0
 8003a32:	d158      	bne.n	8003ae6 <_malloc_r+0xf6>
 8003a34:	f8d8 4000 	ldr.w	r4, [r8]
 8003a38:	4627      	mov	r7, r4
 8003a3a:	2f00      	cmp	r7, #0
 8003a3c:	d143      	bne.n	8003ac6 <_malloc_r+0xd6>
 8003a3e:	2c00      	cmp	r4, #0
 8003a40:	d04b      	beq.n	8003ada <_malloc_r+0xea>
 8003a42:	6823      	ldr	r3, [r4, #0]
 8003a44:	4639      	mov	r1, r7
 8003a46:	4630      	mov	r0, r6
 8003a48:	eb04 0903 	add.w	r9, r4, r3
 8003a4c:	f000 fb5c 	bl	8004108 <_sbrk_r>
 8003a50:	4581      	cmp	r9, r0
 8003a52:	d142      	bne.n	8003ada <_malloc_r+0xea>
 8003a54:	6821      	ldr	r1, [r4, #0]
 8003a56:	1a6d      	subs	r5, r5, r1
 8003a58:	4629      	mov	r1, r5
 8003a5a:	4630      	mov	r0, r6
 8003a5c:	f7ff ffa6 	bl	80039ac <sbrk_aligned>
 8003a60:	3001      	adds	r0, #1
 8003a62:	d03a      	beq.n	8003ada <_malloc_r+0xea>
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	442b      	add	r3, r5
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	f8d8 3000 	ldr.w	r3, [r8]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	bb62      	cbnz	r2, 8003acc <_malloc_r+0xdc>
 8003a72:	f8c8 7000 	str.w	r7, [r8]
 8003a76:	e00f      	b.n	8003a98 <_malloc_r+0xa8>
 8003a78:	6822      	ldr	r2, [r4, #0]
 8003a7a:	1b52      	subs	r2, r2, r5
 8003a7c:	d420      	bmi.n	8003ac0 <_malloc_r+0xd0>
 8003a7e:	2a0b      	cmp	r2, #11
 8003a80:	d917      	bls.n	8003ab2 <_malloc_r+0xc2>
 8003a82:	1961      	adds	r1, r4, r5
 8003a84:	42a3      	cmp	r3, r4
 8003a86:	6025      	str	r5, [r4, #0]
 8003a88:	bf18      	it	ne
 8003a8a:	6059      	strne	r1, [r3, #4]
 8003a8c:	6863      	ldr	r3, [r4, #4]
 8003a8e:	bf08      	it	eq
 8003a90:	f8c8 1000 	streq.w	r1, [r8]
 8003a94:	5162      	str	r2, [r4, r5]
 8003a96:	604b      	str	r3, [r1, #4]
 8003a98:	4630      	mov	r0, r6
 8003a9a:	f000 f82f 	bl	8003afc <__malloc_unlock>
 8003a9e:	f104 000b 	add.w	r0, r4, #11
 8003aa2:	1d23      	adds	r3, r4, #4
 8003aa4:	f020 0007 	bic.w	r0, r0, #7
 8003aa8:	1ac2      	subs	r2, r0, r3
 8003aaa:	bf1c      	itt	ne
 8003aac:	1a1b      	subne	r3, r3, r0
 8003aae:	50a3      	strne	r3, [r4, r2]
 8003ab0:	e7af      	b.n	8003a12 <_malloc_r+0x22>
 8003ab2:	6862      	ldr	r2, [r4, #4]
 8003ab4:	42a3      	cmp	r3, r4
 8003ab6:	bf0c      	ite	eq
 8003ab8:	f8c8 2000 	streq.w	r2, [r8]
 8003abc:	605a      	strne	r2, [r3, #4]
 8003abe:	e7eb      	b.n	8003a98 <_malloc_r+0xa8>
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	6864      	ldr	r4, [r4, #4]
 8003ac4:	e7ae      	b.n	8003a24 <_malloc_r+0x34>
 8003ac6:	463c      	mov	r4, r7
 8003ac8:	687f      	ldr	r7, [r7, #4]
 8003aca:	e7b6      	b.n	8003a3a <_malloc_r+0x4a>
 8003acc:	461a      	mov	r2, r3
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	42a3      	cmp	r3, r4
 8003ad2:	d1fb      	bne.n	8003acc <_malloc_r+0xdc>
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	6053      	str	r3, [r2, #4]
 8003ad8:	e7de      	b.n	8003a98 <_malloc_r+0xa8>
 8003ada:	230c      	movs	r3, #12
 8003adc:	6033      	str	r3, [r6, #0]
 8003ade:	4630      	mov	r0, r6
 8003ae0:	f000 f80c 	bl	8003afc <__malloc_unlock>
 8003ae4:	e794      	b.n	8003a10 <_malloc_r+0x20>
 8003ae6:	6005      	str	r5, [r0, #0]
 8003ae8:	e7d6      	b.n	8003a98 <_malloc_r+0xa8>
 8003aea:	bf00      	nop
 8003aec:	20000950 	.word	0x20000950

08003af0 <__malloc_lock>:
 8003af0:	4801      	ldr	r0, [pc, #4]	@ (8003af8 <__malloc_lock+0x8>)
 8003af2:	f7ff bf0f 	b.w	8003914 <__retarget_lock_acquire_recursive>
 8003af6:	bf00      	nop
 8003af8:	20000948 	.word	0x20000948

08003afc <__malloc_unlock>:
 8003afc:	4801      	ldr	r0, [pc, #4]	@ (8003b04 <__malloc_unlock+0x8>)
 8003afe:	f7ff bf0a 	b.w	8003916 <__retarget_lock_release_recursive>
 8003b02:	bf00      	nop
 8003b04:	20000948 	.word	0x20000948

08003b08 <__ssputs_r>:
 8003b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b0c:	688e      	ldr	r6, [r1, #8]
 8003b0e:	461f      	mov	r7, r3
 8003b10:	42be      	cmp	r6, r7
 8003b12:	680b      	ldr	r3, [r1, #0]
 8003b14:	4682      	mov	sl, r0
 8003b16:	460c      	mov	r4, r1
 8003b18:	4690      	mov	r8, r2
 8003b1a:	d82d      	bhi.n	8003b78 <__ssputs_r+0x70>
 8003b1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003b20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003b24:	d026      	beq.n	8003b74 <__ssputs_r+0x6c>
 8003b26:	6965      	ldr	r5, [r4, #20]
 8003b28:	6909      	ldr	r1, [r1, #16]
 8003b2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003b2e:	eba3 0901 	sub.w	r9, r3, r1
 8003b32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003b36:	1c7b      	adds	r3, r7, #1
 8003b38:	444b      	add	r3, r9
 8003b3a:	106d      	asrs	r5, r5, #1
 8003b3c:	429d      	cmp	r5, r3
 8003b3e:	bf38      	it	cc
 8003b40:	461d      	movcc	r5, r3
 8003b42:	0553      	lsls	r3, r2, #21
 8003b44:	d527      	bpl.n	8003b96 <__ssputs_r+0x8e>
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7ff ff52 	bl	80039f0 <_malloc_r>
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	b360      	cbz	r0, 8003baa <__ssputs_r+0xa2>
 8003b50:	6921      	ldr	r1, [r4, #16]
 8003b52:	464a      	mov	r2, r9
 8003b54:	f000 fae8 	bl	8004128 <memcpy>
 8003b58:	89a3      	ldrh	r3, [r4, #12]
 8003b5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003b5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b62:	81a3      	strh	r3, [r4, #12]
 8003b64:	6126      	str	r6, [r4, #16]
 8003b66:	6165      	str	r5, [r4, #20]
 8003b68:	444e      	add	r6, r9
 8003b6a:	eba5 0509 	sub.w	r5, r5, r9
 8003b6e:	6026      	str	r6, [r4, #0]
 8003b70:	60a5      	str	r5, [r4, #8]
 8003b72:	463e      	mov	r6, r7
 8003b74:	42be      	cmp	r6, r7
 8003b76:	d900      	bls.n	8003b7a <__ssputs_r+0x72>
 8003b78:	463e      	mov	r6, r7
 8003b7a:	6820      	ldr	r0, [r4, #0]
 8003b7c:	4632      	mov	r2, r6
 8003b7e:	4641      	mov	r1, r8
 8003b80:	f000 faa8 	bl	80040d4 <memmove>
 8003b84:	68a3      	ldr	r3, [r4, #8]
 8003b86:	1b9b      	subs	r3, r3, r6
 8003b88:	60a3      	str	r3, [r4, #8]
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	4433      	add	r3, r6
 8003b8e:	6023      	str	r3, [r4, #0]
 8003b90:	2000      	movs	r0, #0
 8003b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b96:	462a      	mov	r2, r5
 8003b98:	f000 fad4 	bl	8004144 <_realloc_r>
 8003b9c:	4606      	mov	r6, r0
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d1e0      	bne.n	8003b64 <__ssputs_r+0x5c>
 8003ba2:	6921      	ldr	r1, [r4, #16]
 8003ba4:	4650      	mov	r0, sl
 8003ba6:	f7ff feb7 	bl	8003918 <_free_r>
 8003baa:	230c      	movs	r3, #12
 8003bac:	f8ca 3000 	str.w	r3, [sl]
 8003bb0:	89a3      	ldrh	r3, [r4, #12]
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003bb6:	81a3      	strh	r3, [r4, #12]
 8003bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bbc:	e7e9      	b.n	8003b92 <__ssputs_r+0x8a>
	...

08003bc0 <_svfiprintf_r>:
 8003bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bc4:	4698      	mov	r8, r3
 8003bc6:	898b      	ldrh	r3, [r1, #12]
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	b09d      	sub	sp, #116	@ 0x74
 8003bcc:	4607      	mov	r7, r0
 8003bce:	460d      	mov	r5, r1
 8003bd0:	4614      	mov	r4, r2
 8003bd2:	d510      	bpl.n	8003bf6 <_svfiprintf_r+0x36>
 8003bd4:	690b      	ldr	r3, [r1, #16]
 8003bd6:	b973      	cbnz	r3, 8003bf6 <_svfiprintf_r+0x36>
 8003bd8:	2140      	movs	r1, #64	@ 0x40
 8003bda:	f7ff ff09 	bl	80039f0 <_malloc_r>
 8003bde:	6028      	str	r0, [r5, #0]
 8003be0:	6128      	str	r0, [r5, #16]
 8003be2:	b930      	cbnz	r0, 8003bf2 <_svfiprintf_r+0x32>
 8003be4:	230c      	movs	r3, #12
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	f04f 30ff 	mov.w	r0, #4294967295
 8003bec:	b01d      	add	sp, #116	@ 0x74
 8003bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bf2:	2340      	movs	r3, #64	@ 0x40
 8003bf4:	616b      	str	r3, [r5, #20]
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bfa:	2320      	movs	r3, #32
 8003bfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003c00:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c04:	2330      	movs	r3, #48	@ 0x30
 8003c06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003da4 <_svfiprintf_r+0x1e4>
 8003c0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003c0e:	f04f 0901 	mov.w	r9, #1
 8003c12:	4623      	mov	r3, r4
 8003c14:	469a      	mov	sl, r3
 8003c16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c1a:	b10a      	cbz	r2, 8003c20 <_svfiprintf_r+0x60>
 8003c1c:	2a25      	cmp	r2, #37	@ 0x25
 8003c1e:	d1f9      	bne.n	8003c14 <_svfiprintf_r+0x54>
 8003c20:	ebba 0b04 	subs.w	fp, sl, r4
 8003c24:	d00b      	beq.n	8003c3e <_svfiprintf_r+0x7e>
 8003c26:	465b      	mov	r3, fp
 8003c28:	4622      	mov	r2, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	4638      	mov	r0, r7
 8003c2e:	f7ff ff6b 	bl	8003b08 <__ssputs_r>
 8003c32:	3001      	adds	r0, #1
 8003c34:	f000 80a7 	beq.w	8003d86 <_svfiprintf_r+0x1c6>
 8003c38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003c3a:	445a      	add	r2, fp
 8003c3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8003c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	f000 809f 	beq.w	8003d86 <_svfiprintf_r+0x1c6>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c52:	f10a 0a01 	add.w	sl, sl, #1
 8003c56:	9304      	str	r3, [sp, #16]
 8003c58:	9307      	str	r3, [sp, #28]
 8003c5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003c5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8003c60:	4654      	mov	r4, sl
 8003c62:	2205      	movs	r2, #5
 8003c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c68:	484e      	ldr	r0, [pc, #312]	@ (8003da4 <_svfiprintf_r+0x1e4>)
 8003c6a:	f7fc fac9 	bl	8000200 <memchr>
 8003c6e:	9a04      	ldr	r2, [sp, #16]
 8003c70:	b9d8      	cbnz	r0, 8003caa <_svfiprintf_r+0xea>
 8003c72:	06d0      	lsls	r0, r2, #27
 8003c74:	bf44      	itt	mi
 8003c76:	2320      	movmi	r3, #32
 8003c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c7c:	0711      	lsls	r1, r2, #28
 8003c7e:	bf44      	itt	mi
 8003c80:	232b      	movmi	r3, #43	@ 0x2b
 8003c82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003c86:	f89a 3000 	ldrb.w	r3, [sl]
 8003c8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c8c:	d015      	beq.n	8003cba <_svfiprintf_r+0xfa>
 8003c8e:	9a07      	ldr	r2, [sp, #28]
 8003c90:	4654      	mov	r4, sl
 8003c92:	2000      	movs	r0, #0
 8003c94:	f04f 0c0a 	mov.w	ip, #10
 8003c98:	4621      	mov	r1, r4
 8003c9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c9e:	3b30      	subs	r3, #48	@ 0x30
 8003ca0:	2b09      	cmp	r3, #9
 8003ca2:	d94b      	bls.n	8003d3c <_svfiprintf_r+0x17c>
 8003ca4:	b1b0      	cbz	r0, 8003cd4 <_svfiprintf_r+0x114>
 8003ca6:	9207      	str	r2, [sp, #28]
 8003ca8:	e014      	b.n	8003cd4 <_svfiprintf_r+0x114>
 8003caa:	eba0 0308 	sub.w	r3, r0, r8
 8003cae:	fa09 f303 	lsl.w	r3, r9, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	9304      	str	r3, [sp, #16]
 8003cb6:	46a2      	mov	sl, r4
 8003cb8:	e7d2      	b.n	8003c60 <_svfiprintf_r+0xa0>
 8003cba:	9b03      	ldr	r3, [sp, #12]
 8003cbc:	1d19      	adds	r1, r3, #4
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	9103      	str	r1, [sp, #12]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	bfbb      	ittet	lt
 8003cc6:	425b      	neglt	r3, r3
 8003cc8:	f042 0202 	orrlt.w	r2, r2, #2
 8003ccc:	9307      	strge	r3, [sp, #28]
 8003cce:	9307      	strlt	r3, [sp, #28]
 8003cd0:	bfb8      	it	lt
 8003cd2:	9204      	strlt	r2, [sp, #16]
 8003cd4:	7823      	ldrb	r3, [r4, #0]
 8003cd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003cd8:	d10a      	bne.n	8003cf0 <_svfiprintf_r+0x130>
 8003cda:	7863      	ldrb	r3, [r4, #1]
 8003cdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cde:	d132      	bne.n	8003d46 <_svfiprintf_r+0x186>
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	1d1a      	adds	r2, r3, #4
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	9203      	str	r2, [sp, #12]
 8003ce8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003cec:	3402      	adds	r4, #2
 8003cee:	9305      	str	r3, [sp, #20]
 8003cf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003db4 <_svfiprintf_r+0x1f4>
 8003cf4:	7821      	ldrb	r1, [r4, #0]
 8003cf6:	2203      	movs	r2, #3
 8003cf8:	4650      	mov	r0, sl
 8003cfa:	f7fc fa81 	bl	8000200 <memchr>
 8003cfe:	b138      	cbz	r0, 8003d10 <_svfiprintf_r+0x150>
 8003d00:	9b04      	ldr	r3, [sp, #16]
 8003d02:	eba0 000a 	sub.w	r0, r0, sl
 8003d06:	2240      	movs	r2, #64	@ 0x40
 8003d08:	4082      	lsls	r2, r0
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	3401      	adds	r4, #1
 8003d0e:	9304      	str	r3, [sp, #16]
 8003d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d14:	4824      	ldr	r0, [pc, #144]	@ (8003da8 <_svfiprintf_r+0x1e8>)
 8003d16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003d1a:	2206      	movs	r2, #6
 8003d1c:	f7fc fa70 	bl	8000200 <memchr>
 8003d20:	2800      	cmp	r0, #0
 8003d22:	d036      	beq.n	8003d92 <_svfiprintf_r+0x1d2>
 8003d24:	4b21      	ldr	r3, [pc, #132]	@ (8003dac <_svfiprintf_r+0x1ec>)
 8003d26:	bb1b      	cbnz	r3, 8003d70 <_svfiprintf_r+0x1b0>
 8003d28:	9b03      	ldr	r3, [sp, #12]
 8003d2a:	3307      	adds	r3, #7
 8003d2c:	f023 0307 	bic.w	r3, r3, #7
 8003d30:	3308      	adds	r3, #8
 8003d32:	9303      	str	r3, [sp, #12]
 8003d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003d36:	4433      	add	r3, r6
 8003d38:	9309      	str	r3, [sp, #36]	@ 0x24
 8003d3a:	e76a      	b.n	8003c12 <_svfiprintf_r+0x52>
 8003d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003d40:	460c      	mov	r4, r1
 8003d42:	2001      	movs	r0, #1
 8003d44:	e7a8      	b.n	8003c98 <_svfiprintf_r+0xd8>
 8003d46:	2300      	movs	r3, #0
 8003d48:	3401      	adds	r4, #1
 8003d4a:	9305      	str	r3, [sp, #20]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f04f 0c0a 	mov.w	ip, #10
 8003d52:	4620      	mov	r0, r4
 8003d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d58:	3a30      	subs	r2, #48	@ 0x30
 8003d5a:	2a09      	cmp	r2, #9
 8003d5c:	d903      	bls.n	8003d66 <_svfiprintf_r+0x1a6>
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d0c6      	beq.n	8003cf0 <_svfiprintf_r+0x130>
 8003d62:	9105      	str	r1, [sp, #20]
 8003d64:	e7c4      	b.n	8003cf0 <_svfiprintf_r+0x130>
 8003d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8003d6a:	4604      	mov	r4, r0
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e7f0      	b.n	8003d52 <_svfiprintf_r+0x192>
 8003d70:	ab03      	add	r3, sp, #12
 8003d72:	9300      	str	r3, [sp, #0]
 8003d74:	462a      	mov	r2, r5
 8003d76:	4b0e      	ldr	r3, [pc, #56]	@ (8003db0 <_svfiprintf_r+0x1f0>)
 8003d78:	a904      	add	r1, sp, #16
 8003d7a:	4638      	mov	r0, r7
 8003d7c:	f3af 8000 	nop.w
 8003d80:	1c42      	adds	r2, r0, #1
 8003d82:	4606      	mov	r6, r0
 8003d84:	d1d6      	bne.n	8003d34 <_svfiprintf_r+0x174>
 8003d86:	89ab      	ldrh	r3, [r5, #12]
 8003d88:	065b      	lsls	r3, r3, #25
 8003d8a:	f53f af2d 	bmi.w	8003be8 <_svfiprintf_r+0x28>
 8003d8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003d90:	e72c      	b.n	8003bec <_svfiprintf_r+0x2c>
 8003d92:	ab03      	add	r3, sp, #12
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	462a      	mov	r2, r5
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <_svfiprintf_r+0x1f0>)
 8003d9a:	a904      	add	r1, sp, #16
 8003d9c:	4638      	mov	r0, r7
 8003d9e:	f000 f879 	bl	8003e94 <_printf_i>
 8003da2:	e7ed      	b.n	8003d80 <_svfiprintf_r+0x1c0>
 8003da4:	08004244 	.word	0x08004244
 8003da8:	0800424e 	.word	0x0800424e
 8003dac:	00000000 	.word	0x00000000
 8003db0:	08003b09 	.word	0x08003b09
 8003db4:	0800424a 	.word	0x0800424a

08003db8 <_printf_common>:
 8003db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dbc:	4616      	mov	r6, r2
 8003dbe:	4698      	mov	r8, r3
 8003dc0:	688a      	ldr	r2, [r1, #8]
 8003dc2:	690b      	ldr	r3, [r1, #16]
 8003dc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	bfb8      	it	lt
 8003dcc:	4613      	movlt	r3, r2
 8003dce:	6033      	str	r3, [r6, #0]
 8003dd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003dd4:	4607      	mov	r7, r0
 8003dd6:	460c      	mov	r4, r1
 8003dd8:	b10a      	cbz	r2, 8003dde <_printf_common+0x26>
 8003dda:	3301      	adds	r3, #1
 8003ddc:	6033      	str	r3, [r6, #0]
 8003dde:	6823      	ldr	r3, [r4, #0]
 8003de0:	0699      	lsls	r1, r3, #26
 8003de2:	bf42      	ittt	mi
 8003de4:	6833      	ldrmi	r3, [r6, #0]
 8003de6:	3302      	addmi	r3, #2
 8003de8:	6033      	strmi	r3, [r6, #0]
 8003dea:	6825      	ldr	r5, [r4, #0]
 8003dec:	f015 0506 	ands.w	r5, r5, #6
 8003df0:	d106      	bne.n	8003e00 <_printf_common+0x48>
 8003df2:	f104 0a19 	add.w	sl, r4, #25
 8003df6:	68e3      	ldr	r3, [r4, #12]
 8003df8:	6832      	ldr	r2, [r6, #0]
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	42ab      	cmp	r3, r5
 8003dfe:	dc26      	bgt.n	8003e4e <_printf_common+0x96>
 8003e00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e04:	6822      	ldr	r2, [r4, #0]
 8003e06:	3b00      	subs	r3, #0
 8003e08:	bf18      	it	ne
 8003e0a:	2301      	movne	r3, #1
 8003e0c:	0692      	lsls	r2, r2, #26
 8003e0e:	d42b      	bmi.n	8003e68 <_printf_common+0xb0>
 8003e10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e14:	4641      	mov	r1, r8
 8003e16:	4638      	mov	r0, r7
 8003e18:	47c8      	blx	r9
 8003e1a:	3001      	adds	r0, #1
 8003e1c:	d01e      	beq.n	8003e5c <_printf_common+0xa4>
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	6922      	ldr	r2, [r4, #16]
 8003e22:	f003 0306 	and.w	r3, r3, #6
 8003e26:	2b04      	cmp	r3, #4
 8003e28:	bf02      	ittt	eq
 8003e2a:	68e5      	ldreq	r5, [r4, #12]
 8003e2c:	6833      	ldreq	r3, [r6, #0]
 8003e2e:	1aed      	subeq	r5, r5, r3
 8003e30:	68a3      	ldr	r3, [r4, #8]
 8003e32:	bf0c      	ite	eq
 8003e34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e38:	2500      	movne	r5, #0
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	bfc4      	itt	gt
 8003e3e:	1a9b      	subgt	r3, r3, r2
 8003e40:	18ed      	addgt	r5, r5, r3
 8003e42:	2600      	movs	r6, #0
 8003e44:	341a      	adds	r4, #26
 8003e46:	42b5      	cmp	r5, r6
 8003e48:	d11a      	bne.n	8003e80 <_printf_common+0xc8>
 8003e4a:	2000      	movs	r0, #0
 8003e4c:	e008      	b.n	8003e60 <_printf_common+0xa8>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	4652      	mov	r2, sl
 8003e52:	4641      	mov	r1, r8
 8003e54:	4638      	mov	r0, r7
 8003e56:	47c8      	blx	r9
 8003e58:	3001      	adds	r0, #1
 8003e5a:	d103      	bne.n	8003e64 <_printf_common+0xac>
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e64:	3501      	adds	r5, #1
 8003e66:	e7c6      	b.n	8003df6 <_printf_common+0x3e>
 8003e68:	18e1      	adds	r1, r4, r3
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	2030      	movs	r0, #48	@ 0x30
 8003e6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003e72:	4422      	add	r2, r4
 8003e74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003e78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003e7c:	3302      	adds	r3, #2
 8003e7e:	e7c7      	b.n	8003e10 <_printf_common+0x58>
 8003e80:	2301      	movs	r3, #1
 8003e82:	4622      	mov	r2, r4
 8003e84:	4641      	mov	r1, r8
 8003e86:	4638      	mov	r0, r7
 8003e88:	47c8      	blx	r9
 8003e8a:	3001      	adds	r0, #1
 8003e8c:	d0e6      	beq.n	8003e5c <_printf_common+0xa4>
 8003e8e:	3601      	adds	r6, #1
 8003e90:	e7d9      	b.n	8003e46 <_printf_common+0x8e>
	...

08003e94 <_printf_i>:
 8003e94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e98:	7e0f      	ldrb	r7, [r1, #24]
 8003e9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e9c:	2f78      	cmp	r7, #120	@ 0x78
 8003e9e:	4691      	mov	r9, r2
 8003ea0:	4680      	mov	r8, r0
 8003ea2:	460c      	mov	r4, r1
 8003ea4:	469a      	mov	sl, r3
 8003ea6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eaa:	d807      	bhi.n	8003ebc <_printf_i+0x28>
 8003eac:	2f62      	cmp	r7, #98	@ 0x62
 8003eae:	d80a      	bhi.n	8003ec6 <_printf_i+0x32>
 8003eb0:	2f00      	cmp	r7, #0
 8003eb2:	f000 80d2 	beq.w	800405a <_printf_i+0x1c6>
 8003eb6:	2f58      	cmp	r7, #88	@ 0x58
 8003eb8:	f000 80b9 	beq.w	800402e <_printf_i+0x19a>
 8003ebc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ec0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003ec4:	e03a      	b.n	8003f3c <_printf_i+0xa8>
 8003ec6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003eca:	2b15      	cmp	r3, #21
 8003ecc:	d8f6      	bhi.n	8003ebc <_printf_i+0x28>
 8003ece:	a101      	add	r1, pc, #4	@ (adr r1, 8003ed4 <_printf_i+0x40>)
 8003ed0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ed4:	08003f2d 	.word	0x08003f2d
 8003ed8:	08003f41 	.word	0x08003f41
 8003edc:	08003ebd 	.word	0x08003ebd
 8003ee0:	08003ebd 	.word	0x08003ebd
 8003ee4:	08003ebd 	.word	0x08003ebd
 8003ee8:	08003ebd 	.word	0x08003ebd
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003ebd 	.word	0x08003ebd
 8003ef4:	08003ebd 	.word	0x08003ebd
 8003ef8:	08003ebd 	.word	0x08003ebd
 8003efc:	08003ebd 	.word	0x08003ebd
 8003f00:	08004041 	.word	0x08004041
 8003f04:	08003f6b 	.word	0x08003f6b
 8003f08:	08003ffb 	.word	0x08003ffb
 8003f0c:	08003ebd 	.word	0x08003ebd
 8003f10:	08003ebd 	.word	0x08003ebd
 8003f14:	08004063 	.word	0x08004063
 8003f18:	08003ebd 	.word	0x08003ebd
 8003f1c:	08003f6b 	.word	0x08003f6b
 8003f20:	08003ebd 	.word	0x08003ebd
 8003f24:	08003ebd 	.word	0x08003ebd
 8003f28:	08004003 	.word	0x08004003
 8003f2c:	6833      	ldr	r3, [r6, #0]
 8003f2e:	1d1a      	adds	r2, r3, #4
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6032      	str	r2, [r6, #0]
 8003f34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e09d      	b.n	800407c <_printf_i+0x1e8>
 8003f40:	6833      	ldr	r3, [r6, #0]
 8003f42:	6820      	ldr	r0, [r4, #0]
 8003f44:	1d19      	adds	r1, r3, #4
 8003f46:	6031      	str	r1, [r6, #0]
 8003f48:	0606      	lsls	r6, r0, #24
 8003f4a:	d501      	bpl.n	8003f50 <_printf_i+0xbc>
 8003f4c:	681d      	ldr	r5, [r3, #0]
 8003f4e:	e003      	b.n	8003f58 <_printf_i+0xc4>
 8003f50:	0645      	lsls	r5, r0, #25
 8003f52:	d5fb      	bpl.n	8003f4c <_printf_i+0xb8>
 8003f54:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f58:	2d00      	cmp	r5, #0
 8003f5a:	da03      	bge.n	8003f64 <_printf_i+0xd0>
 8003f5c:	232d      	movs	r3, #45	@ 0x2d
 8003f5e:	426d      	negs	r5, r5
 8003f60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f64:	4859      	ldr	r0, [pc, #356]	@ (80040cc <_printf_i+0x238>)
 8003f66:	230a      	movs	r3, #10
 8003f68:	e011      	b.n	8003f8e <_printf_i+0xfa>
 8003f6a:	6821      	ldr	r1, [r4, #0]
 8003f6c:	6833      	ldr	r3, [r6, #0]
 8003f6e:	0608      	lsls	r0, r1, #24
 8003f70:	f853 5b04 	ldr.w	r5, [r3], #4
 8003f74:	d402      	bmi.n	8003f7c <_printf_i+0xe8>
 8003f76:	0649      	lsls	r1, r1, #25
 8003f78:	bf48      	it	mi
 8003f7a:	b2ad      	uxthmi	r5, r5
 8003f7c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003f7e:	4853      	ldr	r0, [pc, #332]	@ (80040cc <_printf_i+0x238>)
 8003f80:	6033      	str	r3, [r6, #0]
 8003f82:	bf14      	ite	ne
 8003f84:	230a      	movne	r3, #10
 8003f86:	2308      	moveq	r3, #8
 8003f88:	2100      	movs	r1, #0
 8003f8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003f8e:	6866      	ldr	r6, [r4, #4]
 8003f90:	60a6      	str	r6, [r4, #8]
 8003f92:	2e00      	cmp	r6, #0
 8003f94:	bfa2      	ittt	ge
 8003f96:	6821      	ldrge	r1, [r4, #0]
 8003f98:	f021 0104 	bicge.w	r1, r1, #4
 8003f9c:	6021      	strge	r1, [r4, #0]
 8003f9e:	b90d      	cbnz	r5, 8003fa4 <_printf_i+0x110>
 8003fa0:	2e00      	cmp	r6, #0
 8003fa2:	d04b      	beq.n	800403c <_printf_i+0x1a8>
 8003fa4:	4616      	mov	r6, r2
 8003fa6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003faa:	fb03 5711 	mls	r7, r3, r1, r5
 8003fae:	5dc7      	ldrb	r7, [r0, r7]
 8003fb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003fb4:	462f      	mov	r7, r5
 8003fb6:	42bb      	cmp	r3, r7
 8003fb8:	460d      	mov	r5, r1
 8003fba:	d9f4      	bls.n	8003fa6 <_printf_i+0x112>
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d10b      	bne.n	8003fd8 <_printf_i+0x144>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	07df      	lsls	r7, r3, #31
 8003fc4:	d508      	bpl.n	8003fd8 <_printf_i+0x144>
 8003fc6:	6923      	ldr	r3, [r4, #16]
 8003fc8:	6861      	ldr	r1, [r4, #4]
 8003fca:	4299      	cmp	r1, r3
 8003fcc:	bfde      	ittt	le
 8003fce:	2330      	movle	r3, #48	@ 0x30
 8003fd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003fd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003fd8:	1b92      	subs	r2, r2, r6
 8003fda:	6122      	str	r2, [r4, #16]
 8003fdc:	f8cd a000 	str.w	sl, [sp]
 8003fe0:	464b      	mov	r3, r9
 8003fe2:	aa03      	add	r2, sp, #12
 8003fe4:	4621      	mov	r1, r4
 8003fe6:	4640      	mov	r0, r8
 8003fe8:	f7ff fee6 	bl	8003db8 <_printf_common>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d14a      	bne.n	8004086 <_printf_i+0x1f2>
 8003ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff4:	b004      	add	sp, #16
 8003ff6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	f043 0320 	orr.w	r3, r3, #32
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	4833      	ldr	r0, [pc, #204]	@ (80040d0 <_printf_i+0x23c>)
 8004004:	2778      	movs	r7, #120	@ 0x78
 8004006:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	6831      	ldr	r1, [r6, #0]
 800400e:	061f      	lsls	r7, r3, #24
 8004010:	f851 5b04 	ldr.w	r5, [r1], #4
 8004014:	d402      	bmi.n	800401c <_printf_i+0x188>
 8004016:	065f      	lsls	r7, r3, #25
 8004018:	bf48      	it	mi
 800401a:	b2ad      	uxthmi	r5, r5
 800401c:	6031      	str	r1, [r6, #0]
 800401e:	07d9      	lsls	r1, r3, #31
 8004020:	bf44      	itt	mi
 8004022:	f043 0320 	orrmi.w	r3, r3, #32
 8004026:	6023      	strmi	r3, [r4, #0]
 8004028:	b11d      	cbz	r5, 8004032 <_printf_i+0x19e>
 800402a:	2310      	movs	r3, #16
 800402c:	e7ac      	b.n	8003f88 <_printf_i+0xf4>
 800402e:	4827      	ldr	r0, [pc, #156]	@ (80040cc <_printf_i+0x238>)
 8004030:	e7e9      	b.n	8004006 <_printf_i+0x172>
 8004032:	6823      	ldr	r3, [r4, #0]
 8004034:	f023 0320 	bic.w	r3, r3, #32
 8004038:	6023      	str	r3, [r4, #0]
 800403a:	e7f6      	b.n	800402a <_printf_i+0x196>
 800403c:	4616      	mov	r6, r2
 800403e:	e7bd      	b.n	8003fbc <_printf_i+0x128>
 8004040:	6833      	ldr	r3, [r6, #0]
 8004042:	6825      	ldr	r5, [r4, #0]
 8004044:	6961      	ldr	r1, [r4, #20]
 8004046:	1d18      	adds	r0, r3, #4
 8004048:	6030      	str	r0, [r6, #0]
 800404a:	062e      	lsls	r6, r5, #24
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	d501      	bpl.n	8004054 <_printf_i+0x1c0>
 8004050:	6019      	str	r1, [r3, #0]
 8004052:	e002      	b.n	800405a <_printf_i+0x1c6>
 8004054:	0668      	lsls	r0, r5, #25
 8004056:	d5fb      	bpl.n	8004050 <_printf_i+0x1bc>
 8004058:	8019      	strh	r1, [r3, #0]
 800405a:	2300      	movs	r3, #0
 800405c:	6123      	str	r3, [r4, #16]
 800405e:	4616      	mov	r6, r2
 8004060:	e7bc      	b.n	8003fdc <_printf_i+0x148>
 8004062:	6833      	ldr	r3, [r6, #0]
 8004064:	1d1a      	adds	r2, r3, #4
 8004066:	6032      	str	r2, [r6, #0]
 8004068:	681e      	ldr	r6, [r3, #0]
 800406a:	6862      	ldr	r2, [r4, #4]
 800406c:	2100      	movs	r1, #0
 800406e:	4630      	mov	r0, r6
 8004070:	f7fc f8c6 	bl	8000200 <memchr>
 8004074:	b108      	cbz	r0, 800407a <_printf_i+0x1e6>
 8004076:	1b80      	subs	r0, r0, r6
 8004078:	6060      	str	r0, [r4, #4]
 800407a:	6863      	ldr	r3, [r4, #4]
 800407c:	6123      	str	r3, [r4, #16]
 800407e:	2300      	movs	r3, #0
 8004080:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004084:	e7aa      	b.n	8003fdc <_printf_i+0x148>
 8004086:	6923      	ldr	r3, [r4, #16]
 8004088:	4632      	mov	r2, r6
 800408a:	4649      	mov	r1, r9
 800408c:	4640      	mov	r0, r8
 800408e:	47d0      	blx	sl
 8004090:	3001      	adds	r0, #1
 8004092:	d0ad      	beq.n	8003ff0 <_printf_i+0x15c>
 8004094:	6823      	ldr	r3, [r4, #0]
 8004096:	079b      	lsls	r3, r3, #30
 8004098:	d413      	bmi.n	80040c2 <_printf_i+0x22e>
 800409a:	68e0      	ldr	r0, [r4, #12]
 800409c:	9b03      	ldr	r3, [sp, #12]
 800409e:	4298      	cmp	r0, r3
 80040a0:	bfb8      	it	lt
 80040a2:	4618      	movlt	r0, r3
 80040a4:	e7a6      	b.n	8003ff4 <_printf_i+0x160>
 80040a6:	2301      	movs	r3, #1
 80040a8:	4632      	mov	r2, r6
 80040aa:	4649      	mov	r1, r9
 80040ac:	4640      	mov	r0, r8
 80040ae:	47d0      	blx	sl
 80040b0:	3001      	adds	r0, #1
 80040b2:	d09d      	beq.n	8003ff0 <_printf_i+0x15c>
 80040b4:	3501      	adds	r5, #1
 80040b6:	68e3      	ldr	r3, [r4, #12]
 80040b8:	9903      	ldr	r1, [sp, #12]
 80040ba:	1a5b      	subs	r3, r3, r1
 80040bc:	42ab      	cmp	r3, r5
 80040be:	dcf2      	bgt.n	80040a6 <_printf_i+0x212>
 80040c0:	e7eb      	b.n	800409a <_printf_i+0x206>
 80040c2:	2500      	movs	r5, #0
 80040c4:	f104 0619 	add.w	r6, r4, #25
 80040c8:	e7f5      	b.n	80040b6 <_printf_i+0x222>
 80040ca:	bf00      	nop
 80040cc:	08004255 	.word	0x08004255
 80040d0:	08004266 	.word	0x08004266

080040d4 <memmove>:
 80040d4:	4288      	cmp	r0, r1
 80040d6:	b510      	push	{r4, lr}
 80040d8:	eb01 0402 	add.w	r4, r1, r2
 80040dc:	d902      	bls.n	80040e4 <memmove+0x10>
 80040de:	4284      	cmp	r4, r0
 80040e0:	4623      	mov	r3, r4
 80040e2:	d807      	bhi.n	80040f4 <memmove+0x20>
 80040e4:	1e43      	subs	r3, r0, #1
 80040e6:	42a1      	cmp	r1, r4
 80040e8:	d008      	beq.n	80040fc <memmove+0x28>
 80040ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040f2:	e7f8      	b.n	80040e6 <memmove+0x12>
 80040f4:	4402      	add	r2, r0
 80040f6:	4601      	mov	r1, r0
 80040f8:	428a      	cmp	r2, r1
 80040fa:	d100      	bne.n	80040fe <memmove+0x2a>
 80040fc:	bd10      	pop	{r4, pc}
 80040fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004102:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004106:	e7f7      	b.n	80040f8 <memmove+0x24>

08004108 <_sbrk_r>:
 8004108:	b538      	push	{r3, r4, r5, lr}
 800410a:	4d06      	ldr	r5, [pc, #24]	@ (8004124 <_sbrk_r+0x1c>)
 800410c:	2300      	movs	r3, #0
 800410e:	4604      	mov	r4, r0
 8004110:	4608      	mov	r0, r1
 8004112:	602b      	str	r3, [r5, #0]
 8004114:	f7fc ffca 	bl	80010ac <_sbrk>
 8004118:	1c43      	adds	r3, r0, #1
 800411a:	d102      	bne.n	8004122 <_sbrk_r+0x1a>
 800411c:	682b      	ldr	r3, [r5, #0]
 800411e:	b103      	cbz	r3, 8004122 <_sbrk_r+0x1a>
 8004120:	6023      	str	r3, [r4, #0]
 8004122:	bd38      	pop	{r3, r4, r5, pc}
 8004124:	20000944 	.word	0x20000944

08004128 <memcpy>:
 8004128:	440a      	add	r2, r1
 800412a:	4291      	cmp	r1, r2
 800412c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004130:	d100      	bne.n	8004134 <memcpy+0xc>
 8004132:	4770      	bx	lr
 8004134:	b510      	push	{r4, lr}
 8004136:	f811 4b01 	ldrb.w	r4, [r1], #1
 800413a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800413e:	4291      	cmp	r1, r2
 8004140:	d1f9      	bne.n	8004136 <memcpy+0xe>
 8004142:	bd10      	pop	{r4, pc}

08004144 <_realloc_r>:
 8004144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004148:	4680      	mov	r8, r0
 800414a:	4615      	mov	r5, r2
 800414c:	460c      	mov	r4, r1
 800414e:	b921      	cbnz	r1, 800415a <_realloc_r+0x16>
 8004150:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004154:	4611      	mov	r1, r2
 8004156:	f7ff bc4b 	b.w	80039f0 <_malloc_r>
 800415a:	b92a      	cbnz	r2, 8004168 <_realloc_r+0x24>
 800415c:	f7ff fbdc 	bl	8003918 <_free_r>
 8004160:	2400      	movs	r4, #0
 8004162:	4620      	mov	r0, r4
 8004164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004168:	f000 f81a 	bl	80041a0 <_malloc_usable_size_r>
 800416c:	4285      	cmp	r5, r0
 800416e:	4606      	mov	r6, r0
 8004170:	d802      	bhi.n	8004178 <_realloc_r+0x34>
 8004172:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004176:	d8f4      	bhi.n	8004162 <_realloc_r+0x1e>
 8004178:	4629      	mov	r1, r5
 800417a:	4640      	mov	r0, r8
 800417c:	f7ff fc38 	bl	80039f0 <_malloc_r>
 8004180:	4607      	mov	r7, r0
 8004182:	2800      	cmp	r0, #0
 8004184:	d0ec      	beq.n	8004160 <_realloc_r+0x1c>
 8004186:	42b5      	cmp	r5, r6
 8004188:	462a      	mov	r2, r5
 800418a:	4621      	mov	r1, r4
 800418c:	bf28      	it	cs
 800418e:	4632      	movcs	r2, r6
 8004190:	f7ff ffca 	bl	8004128 <memcpy>
 8004194:	4621      	mov	r1, r4
 8004196:	4640      	mov	r0, r8
 8004198:	f7ff fbbe 	bl	8003918 <_free_r>
 800419c:	463c      	mov	r4, r7
 800419e:	e7e0      	b.n	8004162 <_realloc_r+0x1e>

080041a0 <_malloc_usable_size_r>:
 80041a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80041a4:	1f18      	subs	r0, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	bfbc      	itt	lt
 80041aa:	580b      	ldrlt	r3, [r1, r0]
 80041ac:	18c0      	addlt	r0, r0, r3
 80041ae:	4770      	bx	lr

080041b0 <_init>:
 80041b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b2:	bf00      	nop
 80041b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041b6:	bc08      	pop	{r3}
 80041b8:	469e      	mov	lr, r3
 80041ba:	4770      	bx	lr

080041bc <_fini>:
 80041bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041be:	bf00      	nop
 80041c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80041c2:	bc08      	pop	{r3}
 80041c4:	469e      	mov	lr, r3
 80041c6:	4770      	bx	lr
