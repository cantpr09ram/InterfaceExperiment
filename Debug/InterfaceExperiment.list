
InterfaceExperiment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a99c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800ab50  0800ab50  0000bb50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0e0  0800b0e0  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0e0  0800b0e0  0000c0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0e8  0800b0e8  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0e8  0800b0e8  0000c0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b0ec  0800b0ec  0000c0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b0f0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1d8  2**0
                  CONTENTS
 10 .bss          00000a20  200001d8  200001d8  0000d1d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000bf8  20000bf8  0000d1d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015368  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a1f  00000000  00000000  00022570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  00024f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e9d  00000000  00000000  00026248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000273c4  00000000  00000000  000270e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001557a  00000000  00000000  0004e4a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f0bd2  00000000  00000000  00063a23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001545f5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000065d8  00000000  00000000  00154638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0015ac10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800ab34 	.word	0x0800ab34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001dc 	.word	0x200001dc
 80001ec:	0800ab34 	.word	0x0800ab34

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a0 	b.w	8001000 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	460c      	mov	r4, r1
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d14e      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d50:	4694      	mov	ip, r2
 8000d52:	458c      	cmp	ip, r1
 8000d54:	4686      	mov	lr, r0
 8000d56:	fab2 f282 	clz	r2, r2
 8000d5a:	d962      	bls.n	8000e22 <__udivmoddi4+0xde>
 8000d5c:	b14a      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d5e:	f1c2 0320 	rsb	r3, r2, #32
 8000d62:	4091      	lsls	r1, r2
 8000d64:	fa20 f303 	lsr.w	r3, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	4319      	orrs	r1, r3
 8000d6e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f f68c 	uxth.w	r6, ip
 8000d7a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb07 1114 	mls	r1, r7, r4, r1
 8000d86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8a:	fb04 f106 	mul.w	r1, r4, r6
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d9a:	f080 8112 	bcs.w	8000fc2 <__udivmoddi4+0x27e>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 810f 	bls.w	8000fc2 <__udivmoddi4+0x27e>
 8000da4:	3c02      	subs	r4, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a59      	subs	r1, r3, r1
 8000daa:	fa1f f38e 	uxth.w	r3, lr
 8000dae:	fbb1 f0f7 	udiv	r0, r1, r7
 8000db2:	fb07 1110 	mls	r1, r7, r0, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb00 f606 	mul.w	r6, r0, r6
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x94>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dca:	f080 80fc 	bcs.w	8000fc6 <__udivmoddi4+0x282>
 8000dce:	429e      	cmp	r6, r3
 8000dd0:	f240 80f9 	bls.w	8000fc6 <__udivmoddi4+0x282>
 8000dd4:	4463      	add	r3, ip
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	1b9b      	subs	r3, r3, r6
 8000dda:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dde:	2100      	movs	r1, #0
 8000de0:	b11d      	cbz	r5, 8000dea <__udivmoddi4+0xa6>
 8000de2:	40d3      	lsrs	r3, r2
 8000de4:	2200      	movs	r2, #0
 8000de6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d905      	bls.n	8000dfe <__udivmoddi4+0xba>
 8000df2:	b10d      	cbz	r5, 8000df8 <__udivmoddi4+0xb4>
 8000df4:	e9c5 0100 	strd	r0, r1, [r5]
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4608      	mov	r0, r1
 8000dfc:	e7f5      	b.n	8000dea <__udivmoddi4+0xa6>
 8000dfe:	fab3 f183 	clz	r1, r3
 8000e02:	2900      	cmp	r1, #0
 8000e04:	d146      	bne.n	8000e94 <__udivmoddi4+0x150>
 8000e06:	42a3      	cmp	r3, r4
 8000e08:	d302      	bcc.n	8000e10 <__udivmoddi4+0xcc>
 8000e0a:	4290      	cmp	r0, r2
 8000e0c:	f0c0 80f0 	bcc.w	8000ff0 <__udivmoddi4+0x2ac>
 8000e10:	1a86      	subs	r6, r0, r2
 8000e12:	eb64 0303 	sbc.w	r3, r4, r3
 8000e16:	2001      	movs	r0, #1
 8000e18:	2d00      	cmp	r5, #0
 8000e1a:	d0e6      	beq.n	8000dea <__udivmoddi4+0xa6>
 8000e1c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e20:	e7e3      	b.n	8000dea <__udivmoddi4+0xa6>
 8000e22:	2a00      	cmp	r2, #0
 8000e24:	f040 8090 	bne.w	8000f48 <__udivmoddi4+0x204>
 8000e28:	eba1 040c 	sub.w	r4, r1, ip
 8000e2c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e30:	fa1f f78c 	uxth.w	r7, ip
 8000e34:	2101      	movs	r1, #1
 8000e36:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e3a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e3e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb07 f006 	mul.w	r0, r7, r6
 8000e4a:	4298      	cmp	r0, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x11c>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x11a>
 8000e58:	4298      	cmp	r0, r3
 8000e5a:	f200 80cd 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e5e:	4626      	mov	r6, r4
 8000e60:	1a1c      	subs	r4, r3, r0
 8000e62:	fa1f f38e 	uxth.w	r3, lr
 8000e66:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e6a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e6e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e72:	fb00 f707 	mul.w	r7, r0, r7
 8000e76:	429f      	cmp	r7, r3
 8000e78:	d908      	bls.n	8000e8c <__udivmoddi4+0x148>
 8000e7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e82:	d202      	bcs.n	8000e8a <__udivmoddi4+0x146>
 8000e84:	429f      	cmp	r7, r3
 8000e86:	f200 80b0 	bhi.w	8000fea <__udivmoddi4+0x2a6>
 8000e8a:	4620      	mov	r0, r4
 8000e8c:	1bdb      	subs	r3, r3, r7
 8000e8e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e92:	e7a5      	b.n	8000de0 <__udivmoddi4+0x9c>
 8000e94:	f1c1 0620 	rsb	r6, r1, #32
 8000e98:	408b      	lsls	r3, r1
 8000e9a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9e:	431f      	orrs	r7, r3
 8000ea0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ea4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ea8:	ea43 030c 	orr.w	r3, r3, ip
 8000eac:	40f4      	lsrs	r4, r6
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	0c38      	lsrs	r0, r7, #16
 8000eb4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000eb8:	fbb4 fef0 	udiv	lr, r4, r0
 8000ebc:	fa1f fc87 	uxth.w	ip, r7
 8000ec0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ec4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ec8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ecc:	45a1      	cmp	r9, r4
 8000ece:	fa02 f201 	lsl.w	r2, r2, r1
 8000ed2:	d90a      	bls.n	8000eea <__udivmoddi4+0x1a6>
 8000ed4:	193c      	adds	r4, r7, r4
 8000ed6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eda:	f080 8084 	bcs.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ede:	45a1      	cmp	r9, r4
 8000ee0:	f240 8081 	bls.w	8000fe6 <__udivmoddi4+0x2a2>
 8000ee4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	eba4 0409 	sub.w	r4, r4, r9
 8000eee:	fa1f f983 	uxth.w	r9, r3
 8000ef2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ef6:	fb00 4413 	mls	r4, r0, r3, r4
 8000efa:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000efe:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f02:	45a4      	cmp	ip, r4
 8000f04:	d907      	bls.n	8000f16 <__udivmoddi4+0x1d2>
 8000f06:	193c      	adds	r4, r7, r4
 8000f08:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f0c:	d267      	bcs.n	8000fde <__udivmoddi4+0x29a>
 8000f0e:	45a4      	cmp	ip, r4
 8000f10:	d965      	bls.n	8000fde <__udivmoddi4+0x29a>
 8000f12:	3b02      	subs	r3, #2
 8000f14:	443c      	add	r4, r7
 8000f16:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f1a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f1e:	eba4 040c 	sub.w	r4, r4, ip
 8000f22:	429c      	cmp	r4, r3
 8000f24:	46ce      	mov	lr, r9
 8000f26:	469c      	mov	ip, r3
 8000f28:	d351      	bcc.n	8000fce <__udivmoddi4+0x28a>
 8000f2a:	d04e      	beq.n	8000fca <__udivmoddi4+0x286>
 8000f2c:	b155      	cbz	r5, 8000f44 <__udivmoddi4+0x200>
 8000f2e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f32:	eb64 040c 	sbc.w	r4, r4, ip
 8000f36:	fa04 f606 	lsl.w	r6, r4, r6
 8000f3a:	40cb      	lsrs	r3, r1
 8000f3c:	431e      	orrs	r6, r3
 8000f3e:	40cc      	lsrs	r4, r1
 8000f40:	e9c5 6400 	strd	r6, r4, [r5]
 8000f44:	2100      	movs	r1, #0
 8000f46:	e750      	b.n	8000dea <__udivmoddi4+0xa6>
 8000f48:	f1c2 0320 	rsb	r3, r2, #32
 8000f4c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f50:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f54:	fa24 f303 	lsr.w	r3, r4, r3
 8000f58:	4094      	lsls	r4, r2
 8000f5a:	430c      	orrs	r4, r1
 8000f5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f60:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f64:	fa1f f78c 	uxth.w	r7, ip
 8000f68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f6c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f70:	0c23      	lsrs	r3, r4, #16
 8000f72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f76:	fb00 f107 	mul.w	r1, r0, r7
 8000f7a:	4299      	cmp	r1, r3
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x24c>
 8000f7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f82:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f86:	d22c      	bcs.n	8000fe2 <__udivmoddi4+0x29e>
 8000f88:	4299      	cmp	r1, r3
 8000f8a:	d92a      	bls.n	8000fe2 <__udivmoddi4+0x29e>
 8000f8c:	3802      	subs	r0, #2
 8000f8e:	4463      	add	r3, ip
 8000f90:	1a5b      	subs	r3, r3, r1
 8000f92:	b2a4      	uxth	r4, r4
 8000f94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f98:	fb08 3311 	mls	r3, r8, r1, r3
 8000f9c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fa0:	fb01 f307 	mul.w	r3, r1, r7
 8000fa4:	42a3      	cmp	r3, r4
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x276>
 8000fa8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fac:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fb0:	d213      	bcs.n	8000fda <__udivmoddi4+0x296>
 8000fb2:	42a3      	cmp	r3, r4
 8000fb4:	d911      	bls.n	8000fda <__udivmoddi4+0x296>
 8000fb6:	3902      	subs	r1, #2
 8000fb8:	4464      	add	r4, ip
 8000fba:	1ae4      	subs	r4, r4, r3
 8000fbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fc0:	e739      	b.n	8000e36 <__udivmoddi4+0xf2>
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	e6f0      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e706      	b.n	8000dd8 <__udivmoddi4+0x94>
 8000fca:	45c8      	cmp	r8, r9
 8000fcc:	d2ae      	bcs.n	8000f2c <__udivmoddi4+0x1e8>
 8000fce:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fd2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fd6:	3801      	subs	r0, #1
 8000fd8:	e7a8      	b.n	8000f2c <__udivmoddi4+0x1e8>
 8000fda:	4631      	mov	r1, r6
 8000fdc:	e7ed      	b.n	8000fba <__udivmoddi4+0x276>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	e799      	b.n	8000f16 <__udivmoddi4+0x1d2>
 8000fe2:	4630      	mov	r0, r6
 8000fe4:	e7d4      	b.n	8000f90 <__udivmoddi4+0x24c>
 8000fe6:	46d6      	mov	lr, sl
 8000fe8:	e77f      	b.n	8000eea <__udivmoddi4+0x1a6>
 8000fea:	4463      	add	r3, ip
 8000fec:	3802      	subs	r0, #2
 8000fee:	e74d      	b.n	8000e8c <__udivmoddi4+0x148>
 8000ff0:	4606      	mov	r6, r0
 8000ff2:	4623      	mov	r3, r4
 8000ff4:	4608      	mov	r0, r1
 8000ff6:	e70f      	b.n	8000e18 <__udivmoddi4+0xd4>
 8000ff8:	3e02      	subs	r6, #2
 8000ffa:	4463      	add	r3, ip
 8000ffc:	e730      	b.n	8000e60 <__udivmoddi4+0x11c>
 8000ffe:	bf00      	nop

08001000 <__aeabi_idiv0>:
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop

08001004 <Keypad_SetRowPins>:
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

void Keypad_SetRowPins(GPIO_TypeDef* ports[ROW_NUM], uint16_t pins[ROW_NUM]) {
 8001004:	b480      	push	{r7}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < ROW_NUM; i++) {
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e014      	b.n	800103e <Keypad_SetRowPins+0x3a>
        rowPorts[i] = ports[i];
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	4413      	add	r3, r2
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	490d      	ldr	r1, [pc, #52]	@ (8001054 <Keypad_SetRowPins+0x50>)
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        rowPins[i] = pins[i];
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	683a      	ldr	r2, [r7, #0]
 800102c:	4413      	add	r3, r2
 800102e:	8819      	ldrh	r1, [r3, #0]
 8001030:	4a09      	ldr	r2, [pc, #36]	@ (8001058 <Keypad_SetRowPins+0x54>)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < ROW_NUM; i++) {
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	3301      	adds	r3, #1
 800103c:	60fb      	str	r3, [r7, #12]
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	2b03      	cmp	r3, #3
 8001042:	dde7      	ble.n	8001014 <Keypad_SetRowPins+0x10>
    }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	200001f4 	.word	0x200001f4
 8001058:	20000204 	.word	0x20000204

0800105c <Keypad_SetColPins>:

void Keypad_SetColPins(GPIO_TypeDef* ports[COL_NUM], uint16_t pins[COL_NUM]) {
 800105c:	b480      	push	{r7}
 800105e:	b085      	sub	sp, #20
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < COL_NUM; i++) {
 8001066:	2300      	movs	r3, #0
 8001068:	60fb      	str	r3, [r7, #12]
 800106a:	e014      	b.n	8001096 <Keypad_SetColPins+0x3a>
        colPorts[i] = ports[i];
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	490d      	ldr	r1, [pc, #52]	@ (80010ac <Keypad_SetColPins+0x50>)
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        colPins[i] = pins[i];
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4413      	add	r3, r2
 8001086:	8819      	ldrh	r1, [r3, #0]
 8001088:	4a09      	ldr	r2, [pc, #36]	@ (80010b0 <Keypad_SetColPins+0x54>)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < COL_NUM; i++) {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	3301      	adds	r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	2b03      	cmp	r3, #3
 800109a:	dde7      	ble.n	800106c <Keypad_SetColPins+0x10>
    }
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	2000020c 	.word	0x2000020c
 80010b0:	2000021c 	.word	0x2000021c

080010b4 <Keypad_Init>:

void Keypad_Init(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b088      	sub	sp, #32
 80010b8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]

    for (int i = 0; i < COL_NUM; i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	61fb      	str	r3, [r7, #28]
 80010cc:	e014      	b.n	80010f8 <Keypad_Init+0x44>
        GPIO_InitStruct.Pin = colPins[i];
 80010ce:	4a22      	ldr	r2, [pc, #136]	@ (8001158 <Keypad_Init+0xa4>)
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010d6:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010dc:	2301      	movs	r3, #1
 80010de:	60fb      	str	r3, [r7, #12]
        HAL_GPIO_Init(colPorts[i], &GPIO_InitStruct);
 80010e0:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <Keypad_Init+0xa8>)
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e8:	1d3a      	adds	r2, r7, #4
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f002 fb05 	bl	80036fc <HAL_GPIO_Init>
    for (int i = 0; i < COL_NUM; i++) {
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3301      	adds	r3, #1
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	2b03      	cmp	r3, #3
 80010fc:	dde7      	ble.n	80010ce <Keypad_Init+0x1a>
    }

    for (int i = 0; i < ROW_NUM; i++) {
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
 8001102:	e020      	b.n	8001146 <Keypad_Init+0x92>
        GPIO_InitStruct.Pin = rowPins[i];
 8001104:	4a16      	ldr	r2, [pc, #88]	@ (8001160 <Keypad_Init+0xac>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800110c:	607b      	str	r3, [r7, #4]
        GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110e:	2301      	movs	r3, #1
 8001110:	60bb      	str	r3, [r7, #8]
        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001112:	2300      	movs	r3, #0
 8001114:	613b      	str	r3, [r7, #16]
        HAL_GPIO_Init(rowPorts[i], &GPIO_InitStruct);
 8001116:	4a13      	ldr	r2, [pc, #76]	@ (8001164 <Keypad_Init+0xb0>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800111e:	1d3a      	adds	r2, r7, #4
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f002 faea 	bl	80036fc <HAL_GPIO_Init>
        HAL_GPIO_WritePin(rowPorts[i], rowPins[i], GPIO_PIN_SET);
 8001128:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <Keypad_Init+0xb0>)
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001130:	4a0b      	ldr	r2, [pc, #44]	@ (8001160 <Keypad_Init+0xac>)
 8001132:	69bb      	ldr	r3, [r7, #24]
 8001134:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001138:	2201      	movs	r2, #1
 800113a:	4619      	mov	r1, r3
 800113c:	f002 fca2 	bl	8003a84 <HAL_GPIO_WritePin>
    for (int i = 0; i < ROW_NUM; i++) {
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	3301      	adds	r3, #1
 8001144:	61bb      	str	r3, [r7, #24]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b03      	cmp	r3, #3
 800114a:	dddb      	ble.n	8001104 <Keypad_Init+0x50>
    }
}
 800114c:	bf00      	nop
 800114e:	bf00      	nop
 8001150:	3720      	adds	r7, #32
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000021c 	.word	0x2000021c
 800115c:	2000020c 	.word	0x2000020c
 8001160:	20000204 	.word	0x20000204
 8001164:	200001f4 	.word	0x200001f4

08001168 <Keypad_Scan>:

char Keypad_Scan(void) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
    for (int row = 0; row < ROW_NUM; row++) {
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
 8001172:	e068      	b.n	8001246 <Keypad_Scan+0xde>
        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_RESET);
 8001174:	4a38      	ldr	r2, [pc, #224]	@ (8001258 <Keypad_Scan+0xf0>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800117c:	4a37      	ldr	r2, [pc, #220]	@ (800125c <Keypad_Scan+0xf4>)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001184:	2200      	movs	r2, #0
 8001186:	4619      	mov	r1, r3
 8001188:	f002 fc7c 	bl	8003a84 <HAL_GPIO_WritePin>

        for (int col = 0; col < COL_NUM; col++) {
 800118c:	2300      	movs	r3, #0
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	e047      	b.n	8001222 <Keypad_Scan+0xba>
            if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET) {
 8001192:	4a33      	ldr	r2, [pc, #204]	@ (8001260 <Keypad_Scan+0xf8>)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800119a:	4932      	ldr	r1, [pc, #200]	@ (8001264 <Keypad_Scan+0xfc>)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011a2:	4619      	mov	r1, r3
 80011a4:	4610      	mov	r0, r2
 80011a6:	f002 fc55 	bl	8003a54 <HAL_GPIO_ReadPin>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d135      	bne.n	800121c <Keypad_Scan+0xb4>
                HAL_Delay(20);
 80011b0:	2014      	movs	r0, #20
 80011b2:	f001 fa41 	bl	8002638 <HAL_Delay>
                if (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET) {
 80011b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001260 <Keypad_Scan+0xf8>)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011be:	4929      	ldr	r1, [pc, #164]	@ (8001264 <Keypad_Scan+0xfc>)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011c6:	4619      	mov	r1, r3
 80011c8:	4610      	mov	r0, r2
 80011ca:	f002 fc43 	bl	8003a54 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d123      	bne.n	800121c <Keypad_Scan+0xb4>
                    while (HAL_GPIO_ReadPin(colPorts[col], colPins[col]) == GPIO_PIN_RESET);
 80011d4:	bf00      	nop
 80011d6:	4a22      	ldr	r2, [pc, #136]	@ (8001260 <Keypad_Scan+0xf8>)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80011de:	4921      	ldr	r1, [pc, #132]	@ (8001264 <Keypad_Scan+0xfc>)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011e6:	4619      	mov	r1, r3
 80011e8:	4610      	mov	r0, r2
 80011ea:	f002 fc33 	bl	8003a54 <HAL_GPIO_ReadPin>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d0f0      	beq.n	80011d6 <Keypad_Scan+0x6e>
                    HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_SET);
 80011f4:	4a18      	ldr	r2, [pc, #96]	@ (8001258 <Keypad_Scan+0xf0>)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011fc:	4a17      	ldr	r2, [pc, #92]	@ (800125c <Keypad_Scan+0xf4>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001204:	2201      	movs	r2, #1
 8001206:	4619      	mov	r1, r3
 8001208:	f002 fc3c 	bl	8003a84 <HAL_GPIO_WritePin>
                    return keymap[row][col];
 800120c:	4a16      	ldr	r2, [pc, #88]	@ (8001268 <Keypad_Scan+0x100>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	441a      	add	r2, r3
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4413      	add	r3, r2
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	e018      	b.n	800124e <Keypad_Scan+0xe6>
        for (int col = 0; col < COL_NUM; col++) {
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	3301      	adds	r3, #1
 8001220:	603b      	str	r3, [r7, #0]
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2b03      	cmp	r3, #3
 8001226:	ddb4      	ble.n	8001192 <Keypad_Scan+0x2a>
                }
            }
        }

        HAL_GPIO_WritePin(rowPorts[row], rowPins[row], GPIO_PIN_SET);
 8001228:	4a0b      	ldr	r2, [pc, #44]	@ (8001258 <Keypad_Scan+0xf0>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001230:	4a0a      	ldr	r2, [pc, #40]	@ (800125c <Keypad_Scan+0xf4>)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001238:	2201      	movs	r2, #1
 800123a:	4619      	mov	r1, r3
 800123c:	f002 fc22 	bl	8003a84 <HAL_GPIO_WritePin>
    for (int row = 0; row < ROW_NUM; row++) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b03      	cmp	r3, #3
 800124a:	dd93      	ble.n	8001174 <Keypad_Scan+0xc>
    }
    return 0;
 800124c:	2300      	movs	r3, #0
}
 800124e:	4618      	mov	r0, r3
 8001250:	3708      	adds	r7, #8
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	200001f4 	.word	0x200001f4
 800125c:	20000204 	.word	0x20000204
 8001260:	2000020c 	.word	0x2000020c
 8001264:	2000021c 	.word	0x2000021c
 8001268:	0800ac88 	.word	0x0800ac88

0800126c <Set_Servo_Angle>:
// Motor open/close state
static bool motorOpen = false;
// Current servo angle
//static uint8_t servoAngle = 0;

void Set_Servo_Angle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle) {
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	4613      	mov	r3, r2
 8001278:	71fb      	strb	r3, [r7, #7]
    //angle(0-180)to pulse width(250-1250 counts)
    //250 for 0.5ms(0 degree) and 1250 for 2.5ms(180 degree)
    uint32_t pulse_length = 250 + (angle * (1250 - 250) / 180);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001280:	fb02 f303 	mul.w	r3, r2, r3
 8001284:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <Set_Servo_Angle+0x70>)
 8001286:	fb82 1203 	smull	r1, r2, r2, r3
 800128a:	441a      	add	r2, r3
 800128c:	11d2      	asrs	r2, r2, #7
 800128e:	17db      	asrs	r3, r3, #31
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	33fa      	adds	r3, #250	@ 0xfa
 8001294:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d104      	bne.n	80012a6 <Set_Servo_Angle+0x3a>
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	697a      	ldr	r2, [r7, #20]
 80012a2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80012a4:	e013      	b.n	80012ce <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d104      	bne.n	80012b6 <Set_Servo_Angle+0x4a>
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80012b4:	e00b      	b.n	80012ce <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	2b08      	cmp	r3, #8
 80012ba:	d104      	bne.n	80012c6 <Set_Servo_Angle+0x5a>
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 80012c4:	e003      	b.n	80012ce <Set_Servo_Angle+0x62>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_length);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80012ce:	bf00      	nop
 80012d0:	371c      	adds	r7, #28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	b60b60b7 	.word	0xb60b60b7

080012e0 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b095      	sub	sp, #84	@ 0x54
 80012e4:	af02      	add	r7, sp, #8
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 80012e6:	f001 f935 	bl	8002554 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 80012ea:	f000 faa9 	bl	8001840 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 80012ee:	f000 fcaf 	bl	8001c50 <MX_GPIO_Init>
    MX_ETH_Init();
 80012f2:	f000 fb61 	bl	80019b8 <MX_ETH_Init>
    MX_USART3_UART_Init();
 80012f6:	f000 fc53 	bl	8001ba0 <MX_USART3_UART_Init>
    MX_USB_OTG_FS_PCD_Init();
 80012fa:	f000 fc7b 	bl	8001bf4 <MX_USB_OTG_FS_PCD_Init>
    MX_ADC1_Init();
 80012fe:	f000 fb09 	bl	8001914 <MX_ADC1_Init>
    MX_TIM2_Init();
 8001302:	f000 fba7 	bl	8001a54 <MX_TIM2_Init>
    MX_TIM4_Init();
 8001306:	f000 fbfd 	bl	8001b04 <MX_TIM4_Init>
    /* USER CODE BEGIN 2 */
    //keypad
    //
    //
    GPIO_TypeDef *rowPorts[ROW_NUM] = {GPIOD, GPIOD, GPIOD, GPIOD};
 800130a:	4ba8      	ldr	r3, [pc, #672]	@ (80015ac <main+0x2cc>)
 800130c:	f107 0420 	add.w	r4, r7, #32
 8001310:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001312:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rowPins[ROW_NUM] = {row1_Pin, row2_Pin, row3_Pin, row4_Pin};
 8001316:	4aa6      	ldr	r2, [pc, #664]	@ (80015b0 <main+0x2d0>)
 8001318:	f107 0318 	add.w	r3, r7, #24
 800131c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001320:	e883 0003 	stmia.w	r3, {r0, r1}

    GPIO_TypeDef *colPorts[COL_NUM] = {GPIOC, GPIOC, GPIOC, GPIOC};
 8001324:	4ba3      	ldr	r3, [pc, #652]	@ (80015b4 <main+0x2d4>)
 8001326:	f107 0408 	add.w	r4, r7, #8
 800132a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800132c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t colPins[COL_NUM] = {col1_Pin, col2_Pin, col3_Pin, col4_Pin};
 8001330:	4aa1      	ldr	r2, [pc, #644]	@ (80015b8 <main+0x2d8>)
 8001332:	463b      	mov	r3, r7
 8001334:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001338:	e883 0003 	stmia.w	r3, {r0, r1}

    Keypad_SetRowPins(rowPorts, rowPins);
 800133c:	f107 0218 	add.w	r2, r7, #24
 8001340:	f107 0320 	add.w	r3, r7, #32
 8001344:	4611      	mov	r1, r2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fe5c 	bl	8001004 <Keypad_SetRowPins>
    Keypad_SetColPins(colPorts, colPins);
 800134c:	463a      	mov	r2, r7
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fe81 	bl	800105c <Keypad_SetColPins>
    Keypad_Init();
 800135a:	f7ff feab 	bl	80010b4 <Keypad_Init>
    static Mode currentMode = MODE_B;
    static Mode previousMode = MODE_C;
    //photoresistor
    //
    //
    HAL_ADC_Start(&hadc1);
 800135e:	4897      	ldr	r0, [pc, #604]	@ (80015bc <main+0x2dc>)
 8001360:	f001 f9d2 	bl	8002708 <HAL_ADC_Start>
    //motor
    //
    //
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001364:	2100      	movs	r1, #0
 8001366:	4896      	ldr	r0, [pc, #600]	@ (80015c0 <main+0x2e0>)
 8001368:	f003 fa5c 	bl	8004824 <HAL_TIM_PWM_Start>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1) {
        
        char key = Keypad_Scan();
 800136c:	f7ff fefc 	bl	8001168 <Keypad_Scan>
 8001370:	4603      	mov	r3, r0
 8001372:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
        if (key == 'A') currentMode = MODE_A;
 8001376:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800137a:	2b41      	cmp	r3, #65	@ 0x41
 800137c:	d103      	bne.n	8001386 <main+0xa6>
 800137e:	4b91      	ldr	r3, [pc, #580]	@ (80015c4 <main+0x2e4>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
 8001384:	e00e      	b.n	80013a4 <main+0xc4>
        else if (key == 'B') currentMode = MODE_B;
 8001386:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800138a:	2b42      	cmp	r3, #66	@ 0x42
 800138c:	d103      	bne.n	8001396 <main+0xb6>
 800138e:	4b8d      	ldr	r3, [pc, #564]	@ (80015c4 <main+0x2e4>)
 8001390:	2201      	movs	r2, #1
 8001392:	701a      	strb	r2, [r3, #0]
 8001394:	e006      	b.n	80013a4 <main+0xc4>
        else if (key == 'C') currentMode = MODE_C;
 8001396:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800139a:	2b43      	cmp	r3, #67	@ 0x43
 800139c:	d102      	bne.n	80013a4 <main+0xc4>
 800139e:	4b89      	ldr	r3, [pc, #548]	@ (80015c4 <main+0x2e4>)
 80013a0:	2202      	movs	r2, #2
 80013a2:	701a      	strb	r2, [r3, #0]

        if (currentMode != previousMode) {
 80013a4:	4b87      	ldr	r3, [pc, #540]	@ (80015c4 <main+0x2e4>)
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	4b87      	ldr	r3, [pc, #540]	@ (80015c8 <main+0x2e8>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d023      	beq.n	80013f8 <main+0x118>
            switch (currentMode) {
 80013b0:	4b84      	ldr	r3, [pc, #528]	@ (80015c4 <main+0x2e4>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d014      	beq.n	80013e2 <main+0x102>
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	dc19      	bgt.n	80013f0 <main+0x110>
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <main+0xe6>
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d007      	beq.n	80013d4 <main+0xf4>
 80013c4:	e014      	b.n	80013f0 <main+0x110>
                case MODE_A:
                    HAL_UART_Transmit(&huart3, (uint8_t *) "Enter Mode A\r\n", 13, 100);
 80013c6:	2364      	movs	r3, #100	@ 0x64
 80013c8:	220d      	movs	r2, #13
 80013ca:	4980      	ldr	r1, [pc, #512]	@ (80015cc <main+0x2ec>)
 80013cc:	4880      	ldr	r0, [pc, #512]	@ (80015d0 <main+0x2f0>)
 80013ce:	f004 f98f 	bl	80056f0 <HAL_UART_Transmit>
                    break;
 80013d2:	e00d      	b.n	80013f0 <main+0x110>
                case MODE_B:
                    HAL_UART_Transmit(&huart3, (uint8_t *) "Enter Mode B\r\n", 13, 100);
 80013d4:	2364      	movs	r3, #100	@ 0x64
 80013d6:	220d      	movs	r2, #13
 80013d8:	497e      	ldr	r1, [pc, #504]	@ (80015d4 <main+0x2f4>)
 80013da:	487d      	ldr	r0, [pc, #500]	@ (80015d0 <main+0x2f0>)
 80013dc:	f004 f988 	bl	80056f0 <HAL_UART_Transmit>
                    break;
 80013e0:	e006      	b.n	80013f0 <main+0x110>
                case MODE_C:
                    HAL_UART_Transmit(&huart3, (uint8_t *) "Enter Mode C\r\n", 13, 100);
 80013e2:	2364      	movs	r3, #100	@ 0x64
 80013e4:	220d      	movs	r2, #13
 80013e6:	497c      	ldr	r1, [pc, #496]	@ (80015d8 <main+0x2f8>)
 80013e8:	4879      	ldr	r0, [pc, #484]	@ (80015d0 <main+0x2f0>)
 80013ea:	f004 f981 	bl	80056f0 <HAL_UART_Transmit>
                    break;
 80013ee:	bf00      	nop
            }
            previousMode = currentMode;
 80013f0:	4b74      	ldr	r3, [pc, #464]	@ (80015c4 <main+0x2e4>)
 80013f2:	781a      	ldrb	r2, [r3, #0]
 80013f4:	4b74      	ldr	r3, [pc, #464]	@ (80015c8 <main+0x2e8>)
 80013f6:	701a      	strb	r2, [r3, #0]
        }

        switch (currentMode) {
 80013f8:	4b72      	ldr	r3, [pc, #456]	@ (80015c4 <main+0x2e4>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	f000 8180 	beq.w	8001702 <main+0x422>
 8001402:	2b02      	cmp	r3, #2
 8001404:	f300 81f9 	bgt.w	80017fa <main+0x51a>
 8001408:	2b00      	cmp	r3, #0
 800140a:	d003      	beq.n	8001414 <main+0x134>
 800140c:	2b01      	cmp	r3, #1
 800140e:	f000 80f3 	beq.w	80015f8 <main+0x318>
                }

                HAL_Delay(500);
            }
            default:
                break;
 8001412:	e1f2      	b.n	80017fa <main+0x51a>
                HAL_ADC_Start(&hadc1);
 8001414:	4869      	ldr	r0, [pc, #420]	@ (80015bc <main+0x2dc>)
 8001416:	f001 f977 	bl	8002708 <HAL_ADC_Start>
                while (currentMode == MODE_A) {
 800141a:	e0c0      	b.n	800159e <main+0x2be>
                    HAL_ADC_Start(&hadc1);
 800141c:	4867      	ldr	r0, [pc, #412]	@ (80015bc <main+0x2dc>)
 800141e:	f001 f973 	bl	8002708 <HAL_ADC_Start>
                    if (HAL_ADC_PollForConversion(&hadc1, 100) == HAL_OK) {
 8001422:	2164      	movs	r1, #100	@ 0x64
 8001424:	4865      	ldr	r0, [pc, #404]	@ (80015bc <main+0x2dc>)
 8001426:	f001 fa41 	bl	80028ac <HAL_ADC_PollForConversion>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	f040 809e 	bne.w	800156e <main+0x28e>
                        uint32_t raw = HAL_ADC_GetValue(&hadc1);
 8001432:	4862      	ldr	r0, [pc, #392]	@ (80015bc <main+0x2dc>)
 8001434:	f001 fac5 	bl	80029c2 <HAL_ADC_GetValue>
 8001438:	63b8      	str	r0, [r7, #56]	@ 0x38
                        float mv = raw * 3300.0f / 4095.0f;
 800143a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800143c:	ee07 3a90 	vmov	s15, r3
 8001440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001444:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80015dc <main+0x2fc>
 8001448:	ee27 7a87 	vmul.f32	s14, s15, s14
 800144c:	eddf 6a64 	vldr	s13, [pc, #400]	@ 80015e0 <main+0x300>
 8001450:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001454:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
                        sprintf(str, "LDR raw=%4lu, %6.1f mV\r\n", raw, mv);
 8001458:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800145a:	f7ff f885 	bl	8000568 <__aeabi_f2d>
 800145e:	4602      	mov	r2, r0
 8001460:	460b      	mov	r3, r1
 8001462:	e9cd 2300 	strd	r2, r3, [sp]
 8001466:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001468:	495e      	ldr	r1, [pc, #376]	@ (80015e4 <main+0x304>)
 800146a:	485f      	ldr	r0, [pc, #380]	@ (80015e8 <main+0x308>)
 800146c:	f005 ff28 	bl	80072c0 <siprintf>
                        HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 8001470:	485d      	ldr	r0, [pc, #372]	@ (80015e8 <main+0x308>)
 8001472:	f7fe ff0d 	bl	8000290 <strlen>
 8001476:	4603      	mov	r3, r0
 8001478:	b29a      	uxth	r2, r3
 800147a:	2364      	movs	r3, #100	@ 0x64
 800147c:	495a      	ldr	r1, [pc, #360]	@ (80015e8 <main+0x308>)
 800147e:	4854      	ldr	r0, [pc, #336]	@ (80015d0 <main+0x2f0>)
 8001480:	f004 f936 	bl	80056f0 <HAL_UART_Transmit>
                        if (!motorOpen && raw <=200) {
 8001484:	4b59      	ldr	r3, [pc, #356]	@ (80015ec <main+0x30c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <main+0x1c0>
 8001492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001494:	2bc8      	cmp	r3, #200	@ 0xc8
 8001496:	d803      	bhi.n	80014a0 <main+0x1c0>
                            motorOpen = true;
 8001498:	4b54      	ldr	r3, [pc, #336]	@ (80015ec <main+0x30c>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
 800149e:	e009      	b.n	80014b4 <main+0x1d4>
                        else if (motorOpen && raw >=200) {
 80014a0:	4b52      	ldr	r3, [pc, #328]	@ (80015ec <main+0x30c>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <main+0x1d4>
 80014a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014aa:	2bc7      	cmp	r3, #199	@ 0xc7
 80014ac:	d902      	bls.n	80014b4 <main+0x1d4>
                            motorOpen = false;
 80014ae:	4b4f      	ldr	r3, [pc, #316]	@ (80015ec <main+0x30c>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	701a      	strb	r2, [r3, #0]
                        if (!motorOpen && raw <=120) {
 80014b4:	4b4d      	ldr	r3, [pc, #308]	@ (80015ec <main+0x30c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f083 0301 	eor.w	r3, r3, #1
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d021      	beq.n	8001506 <main+0x226>
 80014c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014c4:	2b78      	cmp	r3, #120	@ 0x78
 80014c6:	d81e      	bhi.n	8001506 <main+0x226>
                            for (uint8_t a = 0; a <= 180; a -= SERVO_STEP_DEGREE) {
 80014c8:	2300      	movs	r3, #0
 80014ca:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80014ce:	e00e      	b.n	80014ee <main+0x20e>
                                Set_Servo_Angle(&htim2, TIM_CHANNEL_1, a);
 80014d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80014d4:	461a      	mov	r2, r3
 80014d6:	2100      	movs	r1, #0
 80014d8:	4839      	ldr	r0, [pc, #228]	@ (80015c0 <main+0x2e0>)
 80014da:	f7ff fec7 	bl	800126c <Set_Servo_Angle>
                                HAL_Delay(50);
 80014de:	2032      	movs	r0, #50	@ 0x32
 80014e0:	f001 f8aa 	bl	8002638 <HAL_Delay>
                            for (uint8_t a = 0; a <= 180; a -= SERVO_STEP_DEGREE) {
 80014e4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80014e8:	3b0a      	subs	r3, #10
 80014ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80014ee:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80014f2:	2bb4      	cmp	r3, #180	@ 0xb4
 80014f4:	d9ec      	bls.n	80014d0 <main+0x1f0>
                            motorOpen = false;
 80014f6:	4b3d      	ldr	r3, [pc, #244]	@ (80015ec <main+0x30c>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	701a      	strb	r2, [r3, #0]
                            sprintf(str, "Mode A: Motor CLOSED\r\n");
 80014fc:	493c      	ldr	r1, [pc, #240]	@ (80015f0 <main+0x310>)
 80014fe:	483a      	ldr	r0, [pc, #232]	@ (80015e8 <main+0x308>)
 8001500:	f005 fede 	bl	80072c0 <siprintf>
 8001504:	e024      	b.n	8001550 <main+0x270>
                        } else if(motorOpen && raw >=120){
 8001506:	4b39      	ldr	r3, [pc, #228]	@ (80015ec <main+0x30c>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d020      	beq.n	8001550 <main+0x270>
 800150e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001510:	2b77      	cmp	r3, #119	@ 0x77
 8001512:	d91d      	bls.n	8001550 <main+0x270>
                            for (uint8_t a = 180; a > 0; a += SERVO_STEP_DEGREE) {
 8001514:	23b4      	movs	r3, #180	@ 0xb4
 8001516:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800151a:	e00e      	b.n	800153a <main+0x25a>
                                Set_Servo_Angle(&htim2, TIM_CHANNEL_1, a);
 800151c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001520:	461a      	mov	r2, r3
 8001522:	2100      	movs	r1, #0
 8001524:	4826      	ldr	r0, [pc, #152]	@ (80015c0 <main+0x2e0>)
 8001526:	f7ff fea1 	bl	800126c <Set_Servo_Angle>
                                HAL_Delay(50);
 800152a:	2032      	movs	r0, #50	@ 0x32
 800152c:	f001 f884 	bl	8002638 <HAL_Delay>
                            for (uint8_t a = 180; a > 0; a += SERVO_STEP_DEGREE) {
 8001530:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001534:	330a      	adds	r3, #10
 8001536:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800153a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1ec      	bne.n	800151c <main+0x23c>
                            motorOpen = true;
 8001542:	4b2a      	ldr	r3, [pc, #168]	@ (80015ec <main+0x30c>)
 8001544:	2201      	movs	r2, #1
 8001546:	701a      	strb	r2, [r3, #0]
                            sprintf(str, "Mode A: Motor OPENED\r\n");
 8001548:	492a      	ldr	r1, [pc, #168]	@ (80015f4 <main+0x314>)
 800154a:	4827      	ldr	r0, [pc, #156]	@ (80015e8 <main+0x308>)
 800154c:	f005 feb8 	bl	80072c0 <siprintf>
                        HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str),100);
 8001550:	4825      	ldr	r0, [pc, #148]	@ (80015e8 <main+0x308>)
 8001552:	f7fe fe9d 	bl	8000290 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	b29a      	uxth	r2, r3
 800155a:	2364      	movs	r3, #100	@ 0x64
 800155c:	4922      	ldr	r1, [pc, #136]	@ (80015e8 <main+0x308>)
 800155e:	481c      	ldr	r0, [pc, #112]	@ (80015d0 <main+0x2f0>)
 8001560:	f004 f8c6 	bl	80056f0 <HAL_UART_Transmit>
                        __HAL_ADC_CLEAR_FLAG(&hadc1, ADC_FLAG_EOC);
 8001564:	4b15      	ldr	r3, [pc, #84]	@ (80015bc <main+0x2dc>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0202 	mvn.w	r2, #2
 800156c:	601a      	str	r2, [r3, #0]
                    char exitKey = Keypad_Scan();
 800156e:	f7ff fdfb 	bl	8001168 <Keypad_Scan>
 8001572:	4603      	mov	r3, r0
 8001574:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                    if (exitKey == 'B') {
 8001578:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800157c:	2b42      	cmp	r3, #66	@ 0x42
 800157e:	d103      	bne.n	8001588 <main+0x2a8>
                        currentMode = MODE_B;
 8001580:	4b10      	ldr	r3, [pc, #64]	@ (80015c4 <main+0x2e4>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
 8001586:	e006      	b.n	8001596 <main+0x2b6>
                    } else if (exitKey == 'C') {
 8001588:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800158c:	2b43      	cmp	r3, #67	@ 0x43
 800158e:	d102      	bne.n	8001596 <main+0x2b6>
                        currentMode = MODE_C;
 8001590:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <main+0x2e4>)
 8001592:	2202      	movs	r2, #2
 8001594:	701a      	strb	r2, [r3, #0]
                    HAL_Delay(500);
 8001596:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800159a:	f001 f84d 	bl	8002638 <HAL_Delay>
                while (currentMode == MODE_A) {
 800159e:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <main+0x2e4>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f43f af3a 	beq.w	800141c <main+0x13c>
                break;
 80015a8:	e12a      	b.n	8001800 <main+0x520>
 80015aa:	bf00      	nop
 80015ac:	0800ac58 	.word	0x0800ac58
 80015b0:	0800ac68 	.word	0x0800ac68
 80015b4:	0800ac70 	.word	0x0800ac70
 80015b8:	0800ac80 	.word	0x0800ac80
 80015bc:	2000039c 	.word	0x2000039c
 80015c0:	20000494 	.word	0x20000494
 80015c4:	20000000 	.word	0x20000000
 80015c8:	20000001 	.word	0x20000001
 80015cc:	0800ab50 	.word	0x0800ab50
 80015d0:	20000524 	.word	0x20000524
 80015d4:	0800ab60 	.word	0x0800ab60
 80015d8:	0800ab70 	.word	0x0800ab70
 80015dc:	454e4000 	.word	0x454e4000
 80015e0:	457ff000 	.word	0x457ff000
 80015e4:	0800ab80 	.word	0x0800ab80
 80015e8:	20000a50 	.word	0x20000a50
 80015ec:	20000a90 	.word	0x20000a90
 80015f0:	0800ab9c 	.word	0x0800ab9c
 80015f4:	0800abb4 	.word	0x0800abb4
                if (key >= '0' && key <= '9') {
 80015f8:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80015fc:	2b2f      	cmp	r3, #47	@ 0x2f
 80015fe:	d927      	bls.n	8001650 <main+0x370>
 8001600:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 8001604:	2b39      	cmp	r3, #57	@ 0x39
 8001606:	d823      	bhi.n	8001650 <main+0x370>
                    uint32_t seconds = key - '0';
 8001608:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800160c:	3b30      	subs	r3, #48	@ 0x30
 800160e:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    countdown_ms = seconds * 1000U;
 8001610:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001612:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001616:	fb02 f303 	mul.w	r3, r2, r3
 800161a:	4a7a      	ldr	r2, [pc, #488]	@ (8001804 <main+0x524>)
 800161c:	6013      	str	r3, [r2, #0]
                    timer_started = true;
 800161e:	4b7a      	ldr	r3, [pc, #488]	@ (8001808 <main+0x528>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
                    sprintf(str, "Start countdown: %lu s\r\n", seconds);
 8001624:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001626:	4979      	ldr	r1, [pc, #484]	@ (800180c <main+0x52c>)
 8001628:	4879      	ldr	r0, [pc, #484]	@ (8001810 <main+0x530>)
 800162a:	f005 fe49 	bl	80072c0 <siprintf>
                    HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 800162e:	4878      	ldr	r0, [pc, #480]	@ (8001810 <main+0x530>)
 8001630:	f7fe fe2e 	bl	8000290 <strlen>
 8001634:	4603      	mov	r3, r0
 8001636:	b29a      	uxth	r2, r3
 8001638:	2364      	movs	r3, #100	@ 0x64
 800163a:	4975      	ldr	r1, [pc, #468]	@ (8001810 <main+0x530>)
 800163c:	4875      	ldr	r0, [pc, #468]	@ (8001814 <main+0x534>)
 800163e:	f004 f857 	bl	80056f0 <HAL_UART_Transmit>
                    __HAL_TIM_SET_COUNTER(&htim4, 0);
 8001642:	4b75      	ldr	r3, [pc, #468]	@ (8001818 <main+0x538>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2200      	movs	r2, #0
 8001648:	625a      	str	r2, [r3, #36]	@ 0x24
                    HAL_TIM_Base_Start_IT(&htim4);
 800164a:	4873      	ldr	r0, [pc, #460]	@ (8001818 <main+0x538>)
 800164c:	f003 f82a 	bl	80046a4 <HAL_TIM_Base_Start_IT>
                if (timer_started && countdown_ms == 0) {
 8001650:	4b6d      	ldr	r3, [pc, #436]	@ (8001808 <main+0x528>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80d2 	beq.w	80017fe <main+0x51e>
 800165a:	4b6a      	ldr	r3, [pc, #424]	@ (8001804 <main+0x524>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f040 80cd 	bne.w	80017fe <main+0x51e>
                    timer_started = false;
 8001664:	4b68      	ldr	r3, [pc, #416]	@ (8001808 <main+0x528>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
                    if (motorOpen) {
 800166a:	4b6c      	ldr	r3, [pc, #432]	@ (800181c <main+0x53c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d01e      	beq.n	80016b0 <main+0x3d0>
                        for (uint8_t a = 80; a > 0; a -= SERVO_STEP_DEGREE) {
 8001672:	2350      	movs	r3, #80	@ 0x50
 8001674:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001678:	e00e      	b.n	8001698 <main+0x3b8>
                            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, a);
 800167a:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800167e:	461a      	mov	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	4867      	ldr	r0, [pc, #412]	@ (8001820 <main+0x540>)
 8001684:	f7ff fdf2 	bl	800126c <Set_Servo_Angle>
                            HAL_Delay(50);
 8001688:	2032      	movs	r0, #50	@ 0x32
 800168a:	f000 ffd5 	bl	8002638 <HAL_Delay>
                        for (uint8_t a = 80; a > 0; a -= SERVO_STEP_DEGREE) {
 800168e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001692:	3b0a      	subs	r3, #10
 8001694:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8001698:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1ec      	bne.n	800167a <main+0x39a>
                        motorOpen = false;
 80016a0:	4b5e      	ldr	r3, [pc, #376]	@ (800181c <main+0x53c>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	701a      	strb	r2, [r3, #0]
                        sprintf(str, "Motor CLOSED\r\n");
 80016a6:	495f      	ldr	r1, [pc, #380]	@ (8001824 <main+0x544>)
 80016a8:	4859      	ldr	r0, [pc, #356]	@ (8001810 <main+0x530>)
 80016aa:	f005 fe09 	bl	80072c0 <siprintf>
 80016ae:	e01d      	b.n	80016ec <main+0x40c>
                        for (uint8_t a = 0; a <= 80; a += SERVO_STEP_DEGREE) {
 80016b0:	2300      	movs	r3, #0
 80016b2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80016b6:	e00e      	b.n	80016d6 <main+0x3f6>
                            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, a);
 80016b8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80016bc:	461a      	mov	r2, r3
 80016be:	2100      	movs	r1, #0
 80016c0:	4857      	ldr	r0, [pc, #348]	@ (8001820 <main+0x540>)
 80016c2:	f7ff fdd3 	bl	800126c <Set_Servo_Angle>
                            HAL_Delay(50);
 80016c6:	2032      	movs	r0, #50	@ 0x32
 80016c8:	f000 ffb6 	bl	8002638 <HAL_Delay>
                        for (uint8_t a = 0; a <= 80; a += SERVO_STEP_DEGREE) {
 80016cc:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80016d0:	330a      	adds	r3, #10
 80016d2:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80016d6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80016da:	2b50      	cmp	r3, #80	@ 0x50
 80016dc:	d9ec      	bls.n	80016b8 <main+0x3d8>
                        motorOpen = true;
 80016de:	4b4f      	ldr	r3, [pc, #316]	@ (800181c <main+0x53c>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
                        sprintf(str, "Motor OPENED\r\n");
 80016e4:	4950      	ldr	r1, [pc, #320]	@ (8001828 <main+0x548>)
 80016e6:	484a      	ldr	r0, [pc, #296]	@ (8001810 <main+0x530>)
 80016e8:	f005 fdea 	bl	80072c0 <siprintf>
                    HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 80016ec:	4848      	ldr	r0, [pc, #288]	@ (8001810 <main+0x530>)
 80016ee:	f7fe fdcf 	bl	8000290 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	2364      	movs	r3, #100	@ 0x64
 80016f8:	4945      	ldr	r1, [pc, #276]	@ (8001810 <main+0x530>)
 80016fa:	4846      	ldr	r0, [pc, #280]	@ (8001814 <main+0x534>)
 80016fc:	f003 fff8 	bl	80056f0 <HAL_UART_Transmit>
                break;
 8001700:	e07d      	b.n	80017fe <main+0x51e>
                GPIO_PinState curSound = HAL_GPIO_ReadPin(SOUND_GPIO_PORT, SOUND_PIN);
 8001702:	2140      	movs	r1, #64	@ 0x40
 8001704:	4849      	ldr	r0, [pc, #292]	@ (800182c <main+0x54c>)
 8001706:	f002 f9a5 	bl	8003a54 <HAL_GPIO_ReadPin>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
                sprintf(str, "Sound State: prev=%d, cur=%d\r\n", prevSoundState == GPIO_PIN_SET,
 8001710:	4b47      	ldr	r3, [pc, #284]	@ (8001830 <main+0x550>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	bf0c      	ite	eq
 8001718:	2301      	moveq	r3, #1
 800171a:	2300      	movne	r3, #0
 800171c:	b2db      	uxtb	r3, r3
 800171e:	461a      	mov	r2, r3
 8001720:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001724:	2b01      	cmp	r3, #1
 8001726:	bf0c      	ite	eq
 8001728:	2301      	moveq	r3, #1
 800172a:	2300      	movne	r3, #0
 800172c:	b2db      	uxtb	r3, r3
 800172e:	4941      	ldr	r1, [pc, #260]	@ (8001834 <main+0x554>)
 8001730:	4837      	ldr	r0, [pc, #220]	@ (8001810 <main+0x530>)
 8001732:	f005 fdc5 	bl	80072c0 <siprintf>
                HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str), 100);
 8001736:	4836      	ldr	r0, [pc, #216]	@ (8001810 <main+0x530>)
 8001738:	f7fe fdaa 	bl	8000290 <strlen>
 800173c:	4603      	mov	r3, r0
 800173e:	b29a      	uxth	r2, r3
 8001740:	2364      	movs	r3, #100	@ 0x64
 8001742:	4933      	ldr	r1, [pc, #204]	@ (8001810 <main+0x530>)
 8001744:	4833      	ldr	r0, [pc, #204]	@ (8001814 <main+0x534>)
 8001746:	f003 ffd3 	bl	80056f0 <HAL_UART_Transmit>
                if (curSound == GPIO_PIN_SET && prevSoundState == GPIO_PIN_RESET) {
 800174a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800174e:	2b01      	cmp	r3, #1
 8001750:	d14e      	bne.n	80017f0 <main+0x510>
 8001752:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <main+0x550>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d14a      	bne.n	80017f0 <main+0x510>
                    if (motorOpen) {
 800175a:	4b30      	ldr	r3, [pc, #192]	@ (800181c <main+0x53c>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d01e      	beq.n	80017a0 <main+0x4c0>
                        for (uint8_t a = 180; a > 0; a -= SERVO_STEP_DEGREE) {
 8001762:	23b4      	movs	r3, #180	@ 0xb4
 8001764:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001768:	e00e      	b.n	8001788 <main+0x4a8>
                            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, a);
 800176a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800176e:	461a      	mov	r2, r3
 8001770:	2100      	movs	r1, #0
 8001772:	482b      	ldr	r0, [pc, #172]	@ (8001820 <main+0x540>)
 8001774:	f7ff fd7a 	bl	800126c <Set_Servo_Angle>
                            HAL_Delay(50);
 8001778:	2032      	movs	r0, #50	@ 0x32
 800177a:	f000 ff5d 	bl	8002638 <HAL_Delay>
                        for (uint8_t a = 180; a > 0; a -= SERVO_STEP_DEGREE) {
 800177e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8001782:	3b0a      	subs	r3, #10
 8001784:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8001788:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800178c:	2b00      	cmp	r3, #0
 800178e:	d1ec      	bne.n	800176a <main+0x48a>
                        motorOpen = false;
 8001790:	4b22      	ldr	r3, [pc, #136]	@ (800181c <main+0x53c>)
 8001792:	2200      	movs	r2, #0
 8001794:	701a      	strb	r2, [r3, #0]
                        sprintf(str, "Mode C: Motor CLOSED\r\n");
 8001796:	4928      	ldr	r1, [pc, #160]	@ (8001838 <main+0x558>)
 8001798:	481d      	ldr	r0, [pc, #116]	@ (8001810 <main+0x530>)
 800179a:	f005 fd91 	bl	80072c0 <siprintf>
 800179e:	e01d      	b.n	80017dc <main+0x4fc>
                        for (uint8_t a = 0; a <= 180; a += SERVO_STEP_DEGREE) {
 80017a0:	2300      	movs	r3, #0
 80017a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80017a6:	e00e      	b.n	80017c6 <main+0x4e6>
                            Set_Servo_Angle(&htim2, TIM_CHANNEL_1, a);
 80017a8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80017ac:	461a      	mov	r2, r3
 80017ae:	2100      	movs	r1, #0
 80017b0:	481b      	ldr	r0, [pc, #108]	@ (8001820 <main+0x540>)
 80017b2:	f7ff fd5b 	bl	800126c <Set_Servo_Angle>
                            HAL_Delay(50);
 80017b6:	2032      	movs	r0, #50	@ 0x32
 80017b8:	f000 ff3e 	bl	8002638 <HAL_Delay>
                        for (uint8_t a = 0; a <= 180; a += SERVO_STEP_DEGREE) {
 80017bc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80017c0:	330a      	adds	r3, #10
 80017c2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80017c6:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 80017ca:	2bb4      	cmp	r3, #180	@ 0xb4
 80017cc:	d9ec      	bls.n	80017a8 <main+0x4c8>
                        motorOpen = true;
 80017ce:	4b13      	ldr	r3, [pc, #76]	@ (800181c <main+0x53c>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	701a      	strb	r2, [r3, #0]
                        sprintf(str, "Mode C: Motor OPENED\r\n");
 80017d4:	4919      	ldr	r1, [pc, #100]	@ (800183c <main+0x55c>)
 80017d6:	480e      	ldr	r0, [pc, #56]	@ (8001810 <main+0x530>)
 80017d8:	f005 fd72 	bl	80072c0 <siprintf>
                    HAL_UART_Transmit(&huart3, (uint8_t *) str, strlen(str),100);
 80017dc:	480c      	ldr	r0, [pc, #48]	@ (8001810 <main+0x530>)
 80017de:	f7fe fd57 	bl	8000290 <strlen>
 80017e2:	4603      	mov	r3, r0
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	2364      	movs	r3, #100	@ 0x64
 80017e8:	4909      	ldr	r1, [pc, #36]	@ (8001810 <main+0x530>)
 80017ea:	480a      	ldr	r0, [pc, #40]	@ (8001814 <main+0x534>)
 80017ec:	f003 ff80 	bl	80056f0 <HAL_UART_Transmit>
                prevSoundState = curSound;
 80017f0:	4a0f      	ldr	r2, [pc, #60]	@ (8001830 <main+0x550>)
 80017f2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80017f6:	7013      	strb	r3, [r2, #0]
                break;
 80017f8:	e002      	b.n	8001800 <main+0x520>
                break;
 80017fa:	bf00      	nop
 80017fc:	e5b6      	b.n	800136c <main+0x8c>
                break;
 80017fe:	bf00      	nop
    while (1) {
 8001800:	e5b4      	b.n	800136c <main+0x8c>
 8001802:	bf00      	nop
 8001804:	20000a94 	.word	0x20000a94
 8001808:	20000a98 	.word	0x20000a98
 800180c:	0800abcc 	.word	0x0800abcc
 8001810:	20000a50 	.word	0x20000a50
 8001814:	20000524 	.word	0x20000524
 8001818:	200004dc 	.word	0x200004dc
 800181c:	20000a90 	.word	0x20000a90
 8001820:	20000494 	.word	0x20000494
 8001824:	0800abe8 	.word	0x0800abe8
 8001828:	0800abf8 	.word	0x0800abf8
 800182c:	40020800 	.word	0x40020800
 8001830:	20000a99 	.word	0x20000a99
 8001834:	0800ac08 	.word	0x0800ac08
 8001838:	0800ac28 	.word	0x0800ac28
 800183c:	0800ac40 	.word	0x0800ac40

08001840 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b094      	sub	sp, #80	@ 0x50
 8001844:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001846:	f107 0320 	add.w	r3, r7, #32
 800184a:	2230      	movs	r2, #48	@ 0x30
 800184c:	2100      	movs	r1, #0
 800184e:	4618      	mov	r0, r3
 8001850:	f005 fd99 	bl	8007386 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001854:	f107 030c 	add.w	r3, r7, #12
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
 800185e:	609a      	str	r2, [r3, #8]
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
    */
    __HAL_RCC_PWR_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	4b28      	ldr	r3, [pc, #160]	@ (800190c <SystemClock_Config+0xcc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186c:	4a27      	ldr	r2, [pc, #156]	@ (800190c <SystemClock_Config+0xcc>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6413      	str	r3, [r2, #64]	@ 0x40
 8001874:	4b25      	ldr	r3, [pc, #148]	@ (800190c <SystemClock_Config+0xcc>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001880:	2300      	movs	r3, #0
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	4b22      	ldr	r3, [pc, #136]	@ (8001910 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a21      	ldr	r2, [pc, #132]	@ (8001910 <SystemClock_Config+0xd0>)
 800188a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	4b1f      	ldr	r3, [pc, #124]	@ (8001910 <SystemClock_Config+0xd0>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
    * in the RCC_OscInitTypeDef structure.
    */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800189c:	2301      	movs	r3, #1
 800189e:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018a0:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80018a4:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a6:	2302      	movs	r3, #2
 80018a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 4;
 80018b0:	2304      	movs	r3, #4
 80018b2:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 168;
 80018b4:	23a8      	movs	r3, #168	@ 0xa8
 80018b6:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 80018bc:	2307      	movs	r3, #7
 80018be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	4618      	mov	r0, r3
 80018c6:	f002 fa05 	bl	8003cd4 <HAL_RCC_OscConfig>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <SystemClock_Config+0x94>
        Error_Handler();
 80018d0:	f000 faaa 	bl	8001e28 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
    */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80018d4:	230f      	movs	r3, #15
 80018d6:	60fb      	str	r3, [r7, #12]
                                  | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d8:	2302      	movs	r3, #2
 80018da:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80018e4:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80018ea:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2105      	movs	r1, #5
 80018f2:	4618      	mov	r0, r3
 80018f4:	f002 fc66 	bl	80041c4 <HAL_RCC_ClockConfig>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <SystemClock_Config+0xc2>
        Error_Handler();
 80018fe:	f000 fa93 	bl	8001e28 <Error_Handler>
    }
}
 8001902:	bf00      	nop
 8001904:	3750      	adds	r7, #80	@ 0x50
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40007000 	.word	0x40007000

08001914 <MX_ADC1_Init>:
/**
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 800191a:	463b      	mov	r3, r7
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
    */
    hadc1.Instance = ADC1;
 8001926:	4b21      	ldr	r3, [pc, #132]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001928:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <MX_ADC1_Init+0x9c>)
 800192a:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <MX_ADC1_Init+0x98>)
 800192e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001932:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 800193a:	4b1c      	ldr	r3, [pc, #112]	@ (80019ac <MX_ADC1_Init+0x98>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8001940:	4b1a      	ldr	r3, [pc, #104]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001942:	2200      	movs	r2, #0
 8001944:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001946:	4b19      	ldr	r3, [pc, #100]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001950:	2200      	movs	r2, #0
 8001952:	62da      	str	r2, [r3, #44]	@ 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001954:	4b15      	ldr	r3, [pc, #84]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001956:	4a17      	ldr	r2, [pc, #92]	@ (80019b4 <MX_ADC1_Init+0xa0>)
 8001958:	629a      	str	r2, [r3, #40]	@ 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <MX_ADC1_Init+0x98>)
 800195c:	2200      	movs	r2, #0
 800195e:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8001960:	4b12      	ldr	r3, [pc, #72]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001962:	2201      	movs	r2, #1
 8001964:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8001966:	4b11      	ldr	r3, [pc, #68]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001970:	2201      	movs	r2, #1
 8001972:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8001974:	480d      	ldr	r0, [pc, #52]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001976:	f000 fe83 	bl	8002680 <HAL_ADC_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_ADC1_Init+0x70>
        Error_Handler();
 8001980:	f000 fa52 	bl	8001e28 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
    */
    sConfig.Channel = ADC_CHANNEL_10;
 8001984:	230a      	movs	r3, #10
 8001986:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8001988:	2301      	movs	r3, #1
 800198a:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800198c:	2300      	movs	r3, #0
 800198e:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	4805      	ldr	r0, [pc, #20]	@ (80019ac <MX_ADC1_Init+0x98>)
 8001996:	f001 f821 	bl	80029dc <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0x90>
        Error_Handler();
 80019a0:	f000 fa42 	bl	8001e28 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000039c 	.word	0x2000039c
 80019b0:	40012000 	.word	0x40012000
 80019b4:	0f000001 	.word	0x0f000001

080019b8 <MX_ETH_Init>:
/**
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
    static uint8_t MACAddr[6];

    /* USER CODE BEGIN ETH_Init 1 */

    /* USER CODE END ETH_Init 1 */
    heth.Instance = ETH;
 80019bc:	4b1f      	ldr	r3, [pc, #124]	@ (8001a3c <MX_ETH_Init+0x84>)
 80019be:	4a20      	ldr	r2, [pc, #128]	@ (8001a40 <MX_ETH_Init+0x88>)
 80019c0:	601a      	str	r2, [r3, #0]
    MACAddr[0] = 0x00;
 80019c2:	4b20      	ldr	r3, [pc, #128]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	701a      	strb	r2, [r3, #0]
    MACAddr[1] = 0x80;
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019ca:	2280      	movs	r2, #128	@ 0x80
 80019cc:	705a      	strb	r2, [r3, #1]
    MACAddr[2] = 0xE1;
 80019ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019d0:	22e1      	movs	r2, #225	@ 0xe1
 80019d2:	709a      	strb	r2, [r3, #2]
    MACAddr[3] = 0x00;
 80019d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	70da      	strb	r2, [r3, #3]
    MACAddr[4] = 0x00;
 80019da:	4b1a      	ldr	r3, [pc, #104]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	711a      	strb	r2, [r3, #4]
    MACAddr[5] = 0x00;
 80019e0:	4b18      	ldr	r3, [pc, #96]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	715a      	strb	r2, [r3, #5]
    heth.Init.MACAddr = &MACAddr[0];
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <MX_ETH_Init+0x84>)
 80019e8:	4a16      	ldr	r2, [pc, #88]	@ (8001a44 <MX_ETH_Init+0x8c>)
 80019ea:	605a      	str	r2, [r3, #4]
    heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80019ec:	4b13      	ldr	r3, [pc, #76]	@ (8001a3c <MX_ETH_Init+0x84>)
 80019ee:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80019f2:	609a      	str	r2, [r3, #8]
    heth.Init.TxDesc = DMATxDscrTab;
 80019f4:	4b11      	ldr	r3, [pc, #68]	@ (8001a3c <MX_ETH_Init+0x84>)
 80019f6:	4a14      	ldr	r2, [pc, #80]	@ (8001a48 <MX_ETH_Init+0x90>)
 80019f8:	60da      	str	r2, [r3, #12]
    heth.Init.RxDesc = DMARxDscrTab;
 80019fa:	4b10      	ldr	r3, [pc, #64]	@ (8001a3c <MX_ETH_Init+0x84>)
 80019fc:	4a13      	ldr	r2, [pc, #76]	@ (8001a4c <MX_ETH_Init+0x94>)
 80019fe:	611a      	str	r2, [r3, #16]
    heth.Init.RxBuffLen = 1524;
 8001a00:	4b0e      	ldr	r3, [pc, #56]	@ (8001a3c <MX_ETH_Init+0x84>)
 8001a02:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8001a06:	615a      	str	r2, [r3, #20]

    /* USER CODE BEGIN MACADDRESS */

    /* USER CODE END MACADDRESS */

    if (HAL_ETH_Init(&heth) != HAL_OK) {
 8001a08:	480c      	ldr	r0, [pc, #48]	@ (8001a3c <MX_ETH_Init+0x84>)
 8001a0a:	f001 fb27 	bl	800305c <HAL_ETH_Init>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_ETH_Init+0x60>
        Error_Handler();
 8001a14:	f000 fa08 	bl	8001e28 <Error_Handler>
    }

    memset(&TxConfig, 0, sizeof(ETH_TxPacketConfig));
 8001a18:	2238      	movs	r2, #56	@ 0x38
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	480c      	ldr	r0, [pc, #48]	@ (8001a50 <MX_ETH_Init+0x98>)
 8001a1e:	f005 fcb2 	bl	8007386 <memset>
    TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <MX_ETH_Init+0x98>)
 8001a24:	2221      	movs	r2, #33	@ 0x21
 8001a26:	601a      	str	r2, [r3, #0]
    TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001a28:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_ETH_Init+0x98>)
 8001a2a:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8001a2e:	615a      	str	r2, [r3, #20]
    TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <MX_ETH_Init+0x98>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN ETH_Init 2 */

    /* USER CODE END ETH_Init 2 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	200003e4 	.word	0x200003e4
 8001a40:	40028000 	.word	0x40028000
 8001a44:	20000a9c 	.word	0x20000a9c
 8001a48:	200002fc 	.word	0x200002fc
 8001a4c:	2000025c 	.word	0x2000025c
 8001a50:	20000224 	.word	0x20000224

08001a54 <MX_TIM2_Init>:
/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void) {
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a5a:	f107 0320 	add.w	r3, r7, #32
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001a64:	1d3b      	adds	r3, r7, #4
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
 8001a70:	611a      	str	r2, [r3, #16]
 8001a72:	615a      	str	r2, [r3, #20]
 8001a74:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 8001a76:	4b22      	ldr	r3, [pc, #136]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001a78:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a7c:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 168;
 8001a7e:	4b20      	ldr	r3, [pc, #128]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001a80:	22a8      	movs	r2, #168	@ 0xa8
 8001a82:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a84:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 10000 - 1;
 8001a8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001a8c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001a90:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a98:	4b19      	ldr	r3, [pc, #100]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001a9e:	4818      	ldr	r0, [pc, #96]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001aa0:	f002 fe70 	bl	8004784 <HAL_TIM_PWM_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM2_Init+0x5a>
        Error_Handler();
 8001aaa:	f000 f9bd 	bl	8001e28 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8001ab6:	f107 0320 	add.w	r3, r7, #32
 8001aba:	4619      	mov	r1, r3
 8001abc:	4810      	ldr	r0, [pc, #64]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001abe:	f003 fd37 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM2_Init+0x78>
        Error_Handler();
 8001ac8:	f000 f9ae 	bl	8001e28 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001acc:	2360      	movs	r3, #96	@ 0x60
 8001ace:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK) {
 8001adc:	1d3b      	adds	r3, r7, #4
 8001ade:	2200      	movs	r2, #0
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001ae4:	f003 f856 	bl	8004b94 <HAL_TIM_PWM_ConfigChannel>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d001      	beq.n	8001af2 <MX_TIM2_Init+0x9e>
        Error_Handler();
 8001aee:	f000 f99b 	bl	8001e28 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
    HAL_TIM_MspPostInit(&htim2);
 8001af2:	4803      	ldr	r0, [pc, #12]	@ (8001b00 <MX_TIM2_Init+0xac>)
 8001af4:	f000 fb18 	bl	8002128 <HAL_TIM_MspPostInit>
}
 8001af8:	bf00      	nop
 8001afa:	3728      	adds	r7, #40	@ 0x28
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000494 	.word	0x20000494

08001b04 <MX_TIM4_Init>:
/**
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b0a:	f107 0308 	add.w	r3, r7, #8
 8001b0e:	2200      	movs	r2, #0
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
 8001b14:	609a      	str	r2, [r3, #8]
 8001b16:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b18:	463b      	mov	r3, r7
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]
 8001b1e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001b20:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b22:	4a1e      	ldr	r2, [pc, #120]	@ (8001b9c <MX_TIM4_Init+0x98>)
 8001b24:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 8399;
 8001b26:	4b1c      	ldr	r3, [pc, #112]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b28:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001b2c:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 9;
 8001b34:	4b18      	ldr	r3, [pc, #96]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b36:	2209      	movs	r2, #9
 8001b38:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b40:	4b15      	ldr	r3, [pc, #84]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8001b46:	4814      	ldr	r0, [pc, #80]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b48:	f002 fd5c 	bl	8004604 <HAL_TIM_Base_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM4_Init+0x52>
        Error_Handler();
 8001b52:	f000 f969 	bl	8001e28 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b5a:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4619      	mov	r1, r3
 8001b62:	480d      	ldr	r0, [pc, #52]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b64:	f003 f8d8 	bl	8004d18 <HAL_TIM_ConfigClockSource>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM4_Init+0x6e>
        Error_Handler();
 8001b6e:	f000 f95b 	bl	8001e28 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b72:	2300      	movs	r3, #0
 8001b74:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8001b7a:	463b      	mov	r3, r7
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	4806      	ldr	r0, [pc, #24]	@ (8001b98 <MX_TIM4_Init+0x94>)
 8001b80:	f003 fcd6 	bl	8005530 <HAL_TIMEx_MasterConfigSynchronization>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM4_Init+0x8a>
        Error_Handler();
 8001b8a:	f000 f94d 	bl	8001e28 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200004dc 	.word	0x200004dc
 8001b9c:	40000800 	.word	0x40000800

08001ba0 <MX_USART3_UART_Init>:
/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
    /* USER CODE END USART3_Init 0 */

    /* USER CODE BEGIN USART3_Init 1 */

    /* USER CODE END USART3_Init 1 */
    huart3.Instance = USART3;
 8001ba4:	4b11      	ldr	r3, [pc, #68]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001ba6:	4a12      	ldr	r2, [pc, #72]	@ (8001bf0 <MX_USART3_UART_Init+0x50>)
 8001ba8:	601a      	str	r2, [r3, #0]
    huart3.Init.BaudRate = 115200;
 8001baa:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bb0:	605a      	str	r2, [r3, #4]
    huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	609a      	str	r2, [r3, #8]
    huart3.Init.StopBits = UART_STOPBITS_1;
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	60da      	str	r2, [r3, #12]
    huart3.Init.Parity = UART_PARITY_NONE;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	611a      	str	r2, [r3, #16]
    huart3.Init.Mode = UART_MODE_TX_RX;
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bc6:	220c      	movs	r2, #12
 8001bc8:	615a      	str	r2, [r3, #20]
    huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bca:	4b08      	ldr	r3, [pc, #32]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
    huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart3) != HAL_OK) {
 8001bd6:	4805      	ldr	r0, [pc, #20]	@ (8001bec <MX_USART3_UART_Init+0x4c>)
 8001bd8:	f003 fd3a 	bl	8005650 <HAL_UART_Init>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_USART3_UART_Init+0x46>
        Error_Handler();
 8001be2:	f000 f921 	bl	8001e28 <Error_Handler>
    }
    /* USER CODE BEGIN USART3_Init 2 */

    /* USER CODE END USART3_Init 2 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000524 	.word	0x20000524
 8001bf0:	40004800 	.word	0x40004800

08001bf4 <MX_USB_OTG_FS_PCD_Init>:
/**
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
    /* USER CODE END USB_OTG_FS_Init 0 */

    /* USER CODE BEGIN USB_OTG_FS_Init 1 */

    /* USER CODE END USB_OTG_FS_Init 1 */
    hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001bf8:	4b14      	ldr	r3, [pc, #80]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bfa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001bfe:	601a      	str	r2, [r3, #0]
    hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c02:	2204      	movs	r2, #4
 8001c04:	711a      	strb	r2, [r3, #4]
    hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c08:	2202      	movs	r2, #2
 8001c0a:	71da      	strb	r2, [r3, #7]
    hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	719a      	strb	r2, [r3, #6]
    hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c14:	2202      	movs	r2, #2
 8001c16:	725a      	strb	r2, [r3, #9]
    hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	729a      	strb	r2, [r3, #10]
    hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	72da      	strb	r2, [r3, #11]
    hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	731a      	strb	r2, [r3, #12]
    hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c2c:	2201      	movs	r2, #1
 8001c2e:	739a      	strb	r2, [r3, #14]
    hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	73da      	strb	r2, [r3, #15]
    if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001c38:	f001 ff3d 	bl	8003ab6 <HAL_PCD_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USB_OTG_FS_PCD_Init+0x52>
        Error_Handler();
 8001c42:	f000 f8f1 	bl	8001e28 <Error_Handler>
    }
    /* USER CODE BEGIN USB_OTG_FS_Init 2 */

    /* USER CODE END USB_OTG_FS_Init 2 */
}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	2000056c 	.word	0x2000056c

08001c50 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c56:	f107 031c 	add.w	r3, r7, #28
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
 8001c64:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */
    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
 8001c6a:	4b5c      	ldr	r3, [pc, #368]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c76:	4b59      	ldr	r3, [pc, #356]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	61bb      	str	r3, [r7, #24]
 8001c80:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
 8001c86:	4b55      	ldr	r3, [pc, #340]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a54      	ldr	r2, [pc, #336]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b52      	ldr	r3, [pc, #328]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b4e      	ldr	r3, [pc, #312]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a4d      	ldr	r2, [pc, #308]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b4b      	ldr	r3, [pc, #300]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b47      	ldr	r3, [pc, #284]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	4a46      	ldr	r2, [pc, #280]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cca:	4b44      	ldr	r3, [pc, #272]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
 8001cda:	4b40      	ldr	r3, [pc, #256]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	4a3f      	ldr	r2, [pc, #252]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001ce0:	f043 0308 	orr.w	r3, r3, #8
 8001ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	f003 0308 	and.w	r3, r3, #8
 8001cee:	60bb      	str	r3, [r7, #8]
 8001cf0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b39      	ldr	r3, [pc, #228]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfa:	4a38      	ldr	r2, [pc, #224]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d02:	4b36      	ldr	r3, [pc, #216]	@ (8001ddc <MX_GPIO_Init+0x18c>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, LD1_Pin | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f244 0181 	movw	r1, #16513	@ 0x4081
 8001d14:	4832      	ldr	r0, [pc, #200]	@ (8001de0 <MX_GPIO_Init+0x190>)
 8001d16:	f001 feb5 	bl	8003a84 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2140      	movs	r1, #64	@ 0x40
 8001d1e:	4831      	ldr	r0, [pc, #196]	@ (8001de4 <MX_GPIO_Init+0x194>)
 8001d20:	f001 feb0 	bl	8003a84 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOD, row1_Pin | row2_Pin | row3_Pin | row4_Pin, GPIO_PIN_RESET);
 8001d24:	2200      	movs	r2, #0
 8001d26:	21f0      	movs	r1, #240	@ 0xf0
 8001d28:	482f      	ldr	r0, [pc, #188]	@ (8001de8 <MX_GPIO_Init+0x198>)
 8001d2a:	f001 feab 	bl	8003a84 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : USER_Btn_Pin */
    GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001d2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001d3e:	f107 031c 	add.w	r3, r7, #28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4829      	ldr	r0, [pc, #164]	@ (8001dec <MX_GPIO_Init+0x19c>)
 8001d46:	f001 fcd9 	bl	80036fc <HAL_GPIO_Init>

    /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
    GPIO_InitStruct.Pin = LD1_Pin | LD3_Pin | LD2_Pin;
 8001d4a:	f244 0381 	movw	r3, #16513	@ 0x4081
 8001d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d50:	2301      	movs	r3, #1
 8001d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d5c:	f107 031c 	add.w	r3, r7, #28
 8001d60:	4619      	mov	r1, r3
 8001d62:	481f      	ldr	r0, [pc, #124]	@ (8001de0 <MX_GPIO_Init+0x190>)
 8001d64:	f001 fcca 	bl	80036fc <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001d68:	2340      	movs	r3, #64	@ 0x40
 8001d6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 031c 	add.w	r3, r7, #28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4819      	ldr	r0, [pc, #100]	@ (8001de4 <MX_GPIO_Init+0x194>)
 8001d80:	f001 fcbc 	bl	80036fc <HAL_GPIO_Init>

    /*Configure GPIO pin : USB_OverCurrent_Pin */
    GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001d84:	2380      	movs	r3, #128	@ 0x80
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d90:	f107 031c 	add.w	r3, r7, #28
 8001d94:	4619      	mov	r1, r3
 8001d96:	4813      	ldr	r0, [pc, #76]	@ (8001de4 <MX_GPIO_Init+0x194>)
 8001d98:	f001 fcb0 	bl	80036fc <HAL_GPIO_Init>

    /*Configure GPIO pins : PC6 col1_Pin col2_Pin col3_Pin
                             col4_Pin */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | col1_Pin | col2_Pin | col3_Pin
 8001d9c:	f44f 6374 	mov.w	r3, #3904	@ 0xf40
 8001da0:	61fb      	str	r3, [r7, #28]
                          | col4_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001da2:	2300      	movs	r3, #0
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001daa:	f107 031c 	add.w	r3, r7, #28
 8001dae:	4619      	mov	r1, r3
 8001db0:	480e      	ldr	r0, [pc, #56]	@ (8001dec <MX_GPIO_Init+0x19c>)
 8001db2:	f001 fca3 	bl	80036fc <HAL_GPIO_Init>

    /*Configure GPIO pins : row1_Pin row2_Pin row3_Pin row4_Pin */
    GPIO_InitStruct.Pin = row1_Pin | row2_Pin | row3_Pin | row4_Pin;
 8001db6:	23f0      	movs	r3, #240	@ 0xf0
 8001db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4806      	ldr	r0, [pc, #24]	@ (8001de8 <MX_GPIO_Init+0x198>)
 8001dce:	f001 fc95 	bl	80036fc <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */
    /* USER CODE END MX_GPIO_Init_2 */
}
 8001dd2:	bf00      	nop
 8001dd4:	3730      	adds	r7, #48	@ 0x30
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020400 	.word	0x40020400
 8001de4:	40021800 	.word	0x40021800
 8001de8:	40020c00 	.word	0x40020c00
 8001dec:	40020800 	.word	0x40020800

08001df0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// This callback runs every 1 ms when TIM4 update interrupt fires
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4 && countdown_ms > 0) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a08      	ldr	r2, [pc, #32]	@ (8001e20 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d108      	bne.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x24>
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <HAL_TIM_PeriodElapsedCallback+0x24>
        countdown_ms--;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	4a04      	ldr	r2, [pc, #16]	@ (8001e24 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001e12:	6013      	str	r3, [r2, #0]
    }
}
 8001e14:	bf00      	nop
 8001e16:	370c      	adds	r7, #12
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr
 8001e20:	40000800 	.word	0x40000800
 8001e24:	20000a94 	.word	0x20000a94

08001e28 <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e2c:	b672      	cpsid	i
}
 8001e2e:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {
 8001e30:	bf00      	nop
 8001e32:	e7fd      	b.n	8001e30 <Error_Handler+0x8>

08001e34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	607b      	str	r3, [r7, #4]
 8001e3e:	4b10      	ldr	r3, [pc, #64]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	4a0f      	ldr	r2, [pc, #60]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e52:	607b      	str	r3, [r7, #4]
 8001e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b09      	ldr	r3, [pc, #36]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	4a08      	ldr	r2, [pc, #32]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e66:	4b06      	ldr	r3, [pc, #24]	@ (8001e80 <HAL_MspInit+0x4c>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800

08001e84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b08a      	sub	sp, #40	@ 0x28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_ADC_MspInit+0x7c>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d127      	bne.n	8001ef6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <HAL_ADC_MspInit+0x80>)
 8001eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eae:	4a15      	ldr	r2, [pc, #84]	@ (8001f04 <HAL_ADC_MspInit+0x80>)
 8001eb0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb6:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <HAL_ADC_MspInit+0x80>)
 8001eb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f04 <HAL_ADC_MspInit+0x80>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a0e      	ldr	r2, [pc, #56]	@ (8001f04 <HAL_ADC_MspInit+0x80>)
 8001ecc:	f043 0304 	orr.w	r3, r3, #4
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <HAL_ADC_MspInit+0x80>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eea:	f107 0314 	add.w	r3, r7, #20
 8001eee:	4619      	mov	r1, r3
 8001ef0:	4805      	ldr	r0, [pc, #20]	@ (8001f08 <HAL_ADC_MspInit+0x84>)
 8001ef2:	f001 fc03 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ef6:	bf00      	nop
 8001ef8:	3728      	adds	r7, #40	@ 0x28
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40012000 	.word	0x40012000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40020800 	.word	0x40020800

08001f0c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08e      	sub	sp, #56	@ 0x38
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a55      	ldr	r2, [pc, #340]	@ (8002080 <HAL_ETH_MspInit+0x174>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	f040 80a4 	bne.w	8002078 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
 8001f34:	4b53      	ldr	r3, [pc, #332]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f38:	4a52      	ldr	r2, [pc, #328]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f3a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f40:	4b50      	ldr	r3, [pc, #320]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
 8001f50:	4b4c      	ldr	r3, [pc, #304]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f54:	4a4b      	ldr	r2, [pc, #300]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f56:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001f5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f5c:	4b49      	ldr	r3, [pc, #292]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
 8001f6c:	4b45      	ldr	r3, [pc, #276]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f70:	4a44      	ldr	r2, [pc, #272]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001f76:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f78:	4b42      	ldr	r3, [pc, #264]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
 8001f88:	4b3e      	ldr	r3, [pc, #248]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8c:	4a3d      	ldr	r2, [pc, #244]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f8e:	f043 0304 	orr.w	r3, r3, #4
 8001f92:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f94:	4b3b      	ldr	r3, [pc, #236]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	f003 0304 	and.w	r3, r3, #4
 8001f9c:	617b      	str	r3, [r7, #20]
 8001f9e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	613b      	str	r3, [r7, #16]
 8001fa4:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa8:	4a36      	ldr	r2, [pc, #216]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001faa:	f043 0301 	orr.w	r3, r3, #1
 8001fae:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fb0:	4b34      	ldr	r3, [pc, #208]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	613b      	str	r3, [r7, #16]
 8001fba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	4b30      	ldr	r3, [pc, #192]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc4:	4a2f      	ldr	r2, [pc, #188]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fc6:	f043 0302 	orr.w	r3, r3, #2
 8001fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd0:	f003 0302 	and.w	r3, r3, #2
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	4b29      	ldr	r3, [pc, #164]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe0:	4a28      	ldr	r2, [pc, #160]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001fe6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe8:	4b26      	ldr	r3, [pc, #152]	@ (8002084 <HAL_ETH_MspInit+0x178>)
 8001fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff0:	60bb      	str	r3, [r7, #8]
 8001ff2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001ff4:	2332      	movs	r3, #50	@ 0x32
 8001ff6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002004:	230b      	movs	r3, #11
 8002006:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800200c:	4619      	mov	r1, r3
 800200e:	481e      	ldr	r0, [pc, #120]	@ (8002088 <HAL_ETH_MspInit+0x17c>)
 8002010:	f001 fb74 	bl	80036fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8002014:	2386      	movs	r3, #134	@ 0x86
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201c:	2300      	movs	r3, #0
 800201e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002020:	2303      	movs	r3, #3
 8002022:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002024:	230b      	movs	r3, #11
 8002026:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800202c:	4619      	mov	r1, r3
 800202e:	4817      	ldr	r0, [pc, #92]	@ (800208c <HAL_ETH_MspInit+0x180>)
 8002030:	f001 fb64 	bl	80036fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8002034:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800203a:	2302      	movs	r3, #2
 800203c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002042:	2303      	movs	r3, #3
 8002044:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002046:	230b      	movs	r3, #11
 8002048:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800204a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800204e:	4619      	mov	r1, r3
 8002050:	480f      	ldr	r0, [pc, #60]	@ (8002090 <HAL_ETH_MspInit+0x184>)
 8002052:	f001 fb53 	bl	80036fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8002056:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002068:	230b      	movs	r3, #11
 800206a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800206c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002070:	4619      	mov	r1, r3
 8002072:	4808      	ldr	r0, [pc, #32]	@ (8002094 <HAL_ETH_MspInit+0x188>)
 8002074:	f001 fb42 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8002078:	bf00      	nop
 800207a:	3738      	adds	r7, #56	@ 0x38
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40028000 	.word	0x40028000
 8002084:	40023800 	.word	0x40023800
 8002088:	40020800 	.word	0x40020800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40021800 	.word	0x40021800

08002098 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a8:	d10d      	bne.n	80020c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b2:	4a08      	ldr	r2, [pc, #32]	@ (80020d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80020bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	60fb      	str	r3, [r7, #12]
 80020c4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80020c6:	bf00      	nop
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40023800 	.word	0x40023800

080020d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0e      	ldr	r2, [pc, #56]	@ (8002120 <HAL_TIM_Base_MspInit+0x48>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d115      	bne.n	8002116 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002124 <HAL_TIM_Base_MspInit+0x4c>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f2:	4a0c      	ldr	r2, [pc, #48]	@ (8002124 <HAL_TIM_Base_MspInit+0x4c>)
 80020f4:	f043 0304 	orr.w	r3, r3, #4
 80020f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_TIM_Base_MspInit+0x4c>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020fe:	f003 0304 	and.w	r3, r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	201e      	movs	r0, #30
 800210c:	f000 ff6f 	bl	8002fee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002110:	201e      	movs	r0, #30
 8002112:	f000 ff88 	bl	8003026 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8002116:	bf00      	nop
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40000800 	.word	0x40000800
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b088      	sub	sp, #32
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 030c 	add.w	r3, r7, #12
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002148:	d11d      	bne.n	8002186 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	4b10      	ldr	r3, [pc, #64]	@ (8002190 <HAL_TIM_MspPostInit+0x68>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <HAL_TIM_MspPostInit+0x68>)
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b0d      	ldr	r3, [pc, #52]	@ (8002190 <HAL_TIM_MspPostInit+0x68>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0301 	and.w	r3, r3, #1
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002166:	2301      	movs	r3, #1
 8002168:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216a:	2302      	movs	r3, #2
 800216c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002176:	2301      	movs	r3, #1
 8002178:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800217a:	f107 030c 	add.w	r3, r7, #12
 800217e:	4619      	mov	r1, r3
 8002180:	4804      	ldr	r0, [pc, #16]	@ (8002194 <HAL_TIM_MspPostInit+0x6c>)
 8002182:	f001 fabb 	bl	80036fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002186:	bf00      	nop
 8002188:	3720      	adds	r7, #32
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000

08002198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	@ 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a19      	ldr	r2, [pc, #100]	@ (800221c <HAL_UART_MspInit+0x84>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d12c      	bne.n	8002214 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b18      	ldr	r3, [pc, #96]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c2:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ca:	4b15      	ldr	r3, [pc, #84]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b11      	ldr	r3, [pc, #68]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	4a10      	ldr	r2, [pc, #64]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021e0:	f043 0308 	orr.w	r3, r3, #8
 80021e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <HAL_UART_MspInit+0x88>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80021f2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80021f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f8:	2302      	movs	r3, #2
 80021fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002204:	2307      	movs	r3, #7
 8002206:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002208:	f107 0314 	add.w	r3, r7, #20
 800220c:	4619      	mov	r1, r3
 800220e:	4805      	ldr	r0, [pc, #20]	@ (8002224 <HAL_UART_MspInit+0x8c>)
 8002210:	f001 fa74 	bl	80036fc <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8002214:	bf00      	nop
 8002216:	3728      	adds	r7, #40	@ 0x28
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40004800 	.word	0x40004800
 8002220:	40023800 	.word	0x40023800
 8002224:	40020c00 	.word	0x40020c00

08002228 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b08a      	sub	sp, #40	@ 0x28
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002230:	f107 0314 	add.w	r3, r7, #20
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002248:	d13f      	bne.n	80022ca <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	613b      	str	r3, [r7, #16]
 800224e:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a20      	ldr	r2, [pc, #128]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	613b      	str	r3, [r7, #16]
 8002264:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002266:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800226a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226c:	2302      	movs	r3, #2
 800226e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002270:	2300      	movs	r3, #0
 8002272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002278:	230a      	movs	r3, #10
 800227a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 0314 	add.w	r3, r7, #20
 8002280:	4619      	mov	r1, r3
 8002282:	4815      	ldr	r0, [pc, #84]	@ (80022d8 <HAL_PCD_MspInit+0xb0>)
 8002284:	f001 fa3a 	bl	80036fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800228c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002292:	2300      	movs	r3, #0
 8002294:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	480e      	ldr	r0, [pc, #56]	@ (80022d8 <HAL_PCD_MspInit+0xb0>)
 800229e:	f001 fa2d 	bl	80036fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022a2:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 80022a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022a6:	4a0b      	ldr	r2, [pc, #44]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 80022a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 80022b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022b6:	4a07      	ldr	r2, [pc, #28]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_PCD_MspInit+0xac>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022c6:	60fb      	str	r3, [r7, #12]
 80022c8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 80022ca:	bf00      	nop
 80022cc:	3728      	adds	r7, #40	@ 0x28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40023800 	.word	0x40023800
 80022d8:	40020000 	.word	0x40020000

080022dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <NMI_Handler+0x4>

080022e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022e8:	bf00      	nop
 80022ea:	e7fd      	b.n	80022e8 <HardFault_Handler+0x4>

080022ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022f0:	bf00      	nop
 80022f2:	e7fd      	b.n	80022f0 <MemManage_Handler+0x4>

080022f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022f8:	bf00      	nop
 80022fa:	e7fd      	b.n	80022f8 <BusFault_Handler+0x4>

080022fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002300:	bf00      	nop
 8002302:	e7fd      	b.n	8002300 <UsageFault_Handler+0x4>

08002304 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002308:	bf00      	nop
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002332:	f000 f961 	bl	80025f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <TIM4_IRQHandler+0x10>)
 8002342:	f002 fb37 	bl	80049b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200004dc 	.word	0x200004dc

08002350 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  return 1;
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <_kill>:

int _kill(int pid, int sig)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
 8002368:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800236a:	f005 f85f 	bl	800742c <__errno>
 800236e:	4603      	mov	r3, r0
 8002370:	2216      	movs	r2, #22
 8002372:	601a      	str	r2, [r3, #0]
  return -1;
 8002374:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_exit>:

void _exit (int status)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ffe7 	bl	8002360 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002392:	bf00      	nop
 8002394:	e7fd      	b.n	8002392 <_exit+0x12>

08002396 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002396:	b580      	push	{r7, lr}
 8002398:	b086      	sub	sp, #24
 800239a:	af00      	add	r7, sp, #0
 800239c:	60f8      	str	r0, [r7, #12]
 800239e:	60b9      	str	r1, [r7, #8]
 80023a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a2:	2300      	movs	r3, #0
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	e00a      	b.n	80023be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023a8:	f3af 8000 	nop.w
 80023ac:	4601      	mov	r1, r0
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	60ba      	str	r2, [r7, #8]
 80023b4:	b2ca      	uxtb	r2, r1
 80023b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	3301      	adds	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	dbf0      	blt.n	80023a8 <_read+0x12>
  }

  return len;
 80023c6:	687b      	ldr	r3, [r7, #4]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3718      	adds	r7, #24
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023dc:	2300      	movs	r3, #0
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	e009      	b.n	80023f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	60ba      	str	r2, [r7, #8]
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	3301      	adds	r3, #1
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	697a      	ldr	r2, [r7, #20]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	dbf1      	blt.n	80023e2 <_write+0x12>
  }
  return len;
 80023fe:	687b      	ldr	r3, [r7, #4]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}

08002408 <_close>:

int _close(int file)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002410:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002414:	4618      	mov	r0, r3
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002430:	605a      	str	r2, [r3, #4]
  return 0;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <_isatty>:

int _isatty(int file)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002448:	2301      	movs	r3, #1
}
 800244a:	4618      	mov	r0, r3
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002456:	b480      	push	{r7}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	60b9      	str	r1, [r7, #8]
 8002460:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002478:	4a14      	ldr	r2, [pc, #80]	@ (80024cc <_sbrk+0x5c>)
 800247a:	4b15      	ldr	r3, [pc, #84]	@ (80024d0 <_sbrk+0x60>)
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002484:	4b13      	ldr	r3, [pc, #76]	@ (80024d4 <_sbrk+0x64>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d102      	bne.n	8002492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800248c:	4b11      	ldr	r3, [pc, #68]	@ (80024d4 <_sbrk+0x64>)
 800248e:	4a12      	ldr	r2, [pc, #72]	@ (80024d8 <_sbrk+0x68>)
 8002490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002492:	4b10      	ldr	r3, [pc, #64]	@ (80024d4 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	429a      	cmp	r2, r3
 800249e:	d207      	bcs.n	80024b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024a0:	f004 ffc4 	bl	800742c <__errno>
 80024a4:	4603      	mov	r3, r0
 80024a6:	220c      	movs	r2, #12
 80024a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024aa:	f04f 33ff 	mov.w	r3, #4294967295
 80024ae:	e009      	b.n	80024c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024b0:	4b08      	ldr	r3, [pc, #32]	@ (80024d4 <_sbrk+0x64>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024b6:	4b07      	ldr	r3, [pc, #28]	@ (80024d4 <_sbrk+0x64>)
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4413      	add	r3, r2
 80024be:	4a05      	ldr	r2, [pc, #20]	@ (80024d4 <_sbrk+0x64>)
 80024c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024c2:	68fb      	ldr	r3, [r7, #12]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20030000 	.word	0x20030000
 80024d0:	00000400 	.word	0x00000400
 80024d4:	20000aa4 	.word	0x20000aa4
 80024d8:	20000bf8 	.word	0x20000bf8

080024dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e0:	4b06      	ldr	r3, [pc, #24]	@ (80024fc <SystemInit+0x20>)
 80024e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024e6:	4a05      	ldr	r2, [pc, #20]	@ (80024fc <SystemInit+0x20>)
 80024e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000ed00 	.word	0xe000ed00

08002500 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002500:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002538 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002504:	f7ff ffea 	bl	80024dc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002508:	480c      	ldr	r0, [pc, #48]	@ (800253c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800250a:	490d      	ldr	r1, [pc, #52]	@ (8002540 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800250c:	4a0d      	ldr	r2, [pc, #52]	@ (8002544 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800250e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002510:	e002      	b.n	8002518 <LoopCopyDataInit>

08002512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002516:	3304      	adds	r3, #4

08002518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800251c:	d3f9      	bcc.n	8002512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800251e:	4a0a      	ldr	r2, [pc, #40]	@ (8002548 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002520:	4c0a      	ldr	r4, [pc, #40]	@ (800254c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002524:	e001      	b.n	800252a <LoopFillZerobss>

08002526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002528:	3204      	adds	r2, #4

0800252a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800252c:	d3fb      	bcc.n	8002526 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800252e:	f004 ff83 	bl	8007438 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002532:	f7fe fed5 	bl	80012e0 <main>
  bx  lr    
 8002536:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002538:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800253c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002540:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002544:	0800b0f0 	.word	0x0800b0f0
  ldr r2, =_sbss
 8002548:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800254c:	20000bf8 	.word	0x20000bf8

08002550 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002550:	e7fe      	b.n	8002550 <ADC_IRQHandler>
	...

08002554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002558:	4b0e      	ldr	r3, [pc, #56]	@ (8002594 <HAL_Init+0x40>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0d      	ldr	r2, [pc, #52]	@ (8002594 <HAL_Init+0x40>)
 800255e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002562:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002564:	4b0b      	ldr	r3, [pc, #44]	@ (8002594 <HAL_Init+0x40>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a0a      	ldr	r2, [pc, #40]	@ (8002594 <HAL_Init+0x40>)
 800256a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800256e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_Init+0x40>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a07      	ldr	r2, [pc, #28]	@ (8002594 <HAL_Init+0x40>)
 8002576:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800257a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800257c:	2003      	movs	r0, #3
 800257e:	f000 fd2b 	bl	8002fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002582:	2000      	movs	r0, #0
 8002584:	f000 f808 	bl	8002598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002588:	f7ff fc54 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40023c00 	.word	0x40023c00

08002598 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b082      	sub	sp, #8
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025a0:	4b12      	ldr	r3, [pc, #72]	@ (80025ec <HAL_InitTick+0x54>)
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_InitTick+0x58>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	4619      	mov	r1, r3
 80025aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80025b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b6:	4618      	mov	r0, r3
 80025b8:	f000 fd43 	bl	8003042 <HAL_SYSTICK_Config>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e00e      	b.n	80025e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2b0f      	cmp	r3, #15
 80025ca:	d80a      	bhi.n	80025e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025cc:	2200      	movs	r2, #0
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	f04f 30ff 	mov.w	r0, #4294967295
 80025d4:	f000 fd0b 	bl	8002fee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d8:	4a06      	ldr	r2, [pc, #24]	@ (80025f4 <HAL_InitTick+0x5c>)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
 80025e0:	e000      	b.n	80025e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3708      	adds	r7, #8
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000004 	.word	0x20000004
 80025f0:	2000000c 	.word	0x2000000c
 80025f4:	20000008 	.word	0x20000008

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	2000000c 	.word	0x2000000c
 800261c:	20000aa8 	.word	0x20000aa8

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	20000aa8 	.word	0x20000aa8

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000000c 	.word	0x2000000c

08002680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e033      	b.n	80026fe <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7ff fbf0 	bl	8001e84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d118      	bne.n	80026f0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026c6:	f023 0302 	bic.w	r3, r3, #2
 80026ca:	f043 0202 	orr.w	r2, r3, #2
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 fab4 	bl	8002c40 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	f023 0303 	bic.w	r3, r3, #3
 80026e6:	f043 0201 	orr.w	r2, r3, #1
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	641a      	str	r2, [r3, #64]	@ 0x40
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
	...

08002708 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800271a:	2b01      	cmp	r3, #1
 800271c:	d101      	bne.n	8002722 <HAL_ADC_Start+0x1a>
 800271e:	2302      	movs	r3, #2
 8002720:	e0b2      	b.n	8002888 <HAL_ADC_Start+0x180>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2201      	movs	r2, #1
 8002726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	2b01      	cmp	r3, #1
 8002736:	d018      	beq.n	800276a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689a      	ldr	r2, [r3, #8]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002748:	4b52      	ldr	r3, [pc, #328]	@ (8002894 <HAL_ADC_Start+0x18c>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a52      	ldr	r2, [pc, #328]	@ (8002898 <HAL_ADC_Start+0x190>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	0c9a      	lsrs	r2, r3, #18
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800275c:	e002      	b.n	8002764 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	3b01      	subs	r3, #1
 8002762:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d1f9      	bne.n	800275e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b01      	cmp	r3, #1
 8002776:	d17a      	bne.n	800286e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002780:	f023 0301 	bic.w	r3, r3, #1
 8002784:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d007      	beq.n	80027aa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80027a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027b6:	d106      	bne.n	80027c6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027bc:	f023 0206 	bic.w	r2, r3, #6
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	645a      	str	r2, [r3, #68]	@ 0x44
 80027c4:	e002      	b.n	80027cc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027d4:	4b31      	ldr	r3, [pc, #196]	@ (800289c <HAL_ADC_Start+0x194>)
 80027d6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80027e0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f003 031f 	and.w	r3, r3, #31
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d12a      	bne.n	8002844 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2b      	ldr	r2, [pc, #172]	@ (80028a0 <HAL_ADC_Start+0x198>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d015      	beq.n	8002824 <HAL_ADC_Start+0x11c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a29      	ldr	r2, [pc, #164]	@ (80028a4 <HAL_ADC_Start+0x19c>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d105      	bne.n	800280e <HAL_ADC_Start+0x106>
 8002802:	4b26      	ldr	r3, [pc, #152]	@ (800289c <HAL_ADC_Start+0x194>)
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	f003 031f 	and.w	r3, r3, #31
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a25      	ldr	r2, [pc, #148]	@ (80028a8 <HAL_ADC_Start+0x1a0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d136      	bne.n	8002886 <HAL_ADC_Start+0x17e>
 8002818:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_ADC_Start+0x194>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0310 	and.w	r3, r3, #16
 8002820:	2b00      	cmp	r3, #0
 8002822:	d130      	bne.n	8002886 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d129      	bne.n	8002886 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	e020      	b.n	8002886 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a15      	ldr	r2, [pc, #84]	@ (80028a0 <HAL_ADC_Start+0x198>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d11b      	bne.n	8002886 <HAL_ADC_Start+0x17e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d114      	bne.n	8002886 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	689a      	ldr	r2, [r3, #8]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800286a:	609a      	str	r2, [r3, #8]
 800286c:	e00b      	b.n	8002886 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f043 0210 	orr.w	r2, r3, #16
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	f043 0201 	orr.w	r2, r3, #1
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3714      	adds	r7, #20
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	20000004 	.word	0x20000004
 8002898:	431bde83 	.word	0x431bde83
 800289c:	40012300 	.word	0x40012300
 80028a0:	40012000 	.word	0x40012000
 80028a4:	40012100 	.word	0x40012100
 80028a8:	40012200 	.word	0x40012200

080028ac <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028c8:	d113      	bne.n	80028f2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d8:	d10b      	bne.n	80028f2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028de:	f043 0220 	orr.w	r2, r3, #32
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e063      	b.n	80029ba <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028f2:	f7ff fe95 	bl	8002620 <HAL_GetTick>
 80028f6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028f8:	e021      	b.n	800293e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002900:	d01d      	beq.n	800293e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_ADC_PollForConversion+0x6c>
 8002908:	f7ff fe8a 	bl	8002620 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d212      	bcs.n	800293e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0302 	and.w	r3, r3, #2
 8002922:	2b02      	cmp	r3, #2
 8002924:	d00b      	beq.n	800293e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292a:	f043 0204 	orr.w	r2, r3, #4
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e03d      	b.n	80029ba <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	2b02      	cmp	r3, #2
 800294a:	d1d6      	bne.n	80028fa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0212 	mvn.w	r2, #18
 8002954:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d123      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d11f      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002982:	2b00      	cmp	r3, #0
 8002984:	d006      	beq.n	8002994 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002990:	2b00      	cmp	r3, #0
 8002992:	d111      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d105      	bne.n	80029b8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029b0:	f043 0201 	orr.w	r2, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3710      	adds	r7, #16
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}

080029c2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029c2:	b480      	push	{r7}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	370c      	adds	r7, #12
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x1c>
 80029f4:	2302      	movs	r3, #2
 80029f6:	e113      	b.n	8002c20 <HAL_ADC_ConfigChannel+0x244>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d925      	bls.n	8002a54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	68d9      	ldr	r1, [r3, #12]
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	461a      	mov	r2, r3
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3b1e      	subs	r3, #30
 8002a1e:	2207      	movs	r2, #7
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43da      	mvns	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	400a      	ands	r2, r1
 8002a2c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68d9      	ldr	r1, [r3, #12]
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	4603      	mov	r3, r0
 8002a42:	005b      	lsls	r3, r3, #1
 8002a44:	4403      	add	r3, r0
 8002a46:	3b1e      	subs	r3, #30
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	60da      	str	r2, [r3, #12]
 8002a52:	e022      	b.n	8002a9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6919      	ldr	r1, [r3, #16]
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	2207      	movs	r2, #7
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	400a      	ands	r2, r1
 8002a76:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	6919      	ldr	r1, [r3, #16]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	4618      	mov	r0, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4403      	add	r3, r0
 8002a90:	409a      	lsls	r2, r3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	430a      	orrs	r2, r1
 8002a98:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b06      	cmp	r3, #6
 8002aa0:	d824      	bhi.n	8002aec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	3b05      	subs	r3, #5
 8002ab4:	221f      	movs	r2, #31
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43da      	mvns	r2, r3
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	400a      	ands	r2, r1
 8002ac2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	3b05      	subs	r3, #5
 8002ade:	fa00 f203 	lsl.w	r2, r0, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002aea:	e04c      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	2b0c      	cmp	r3, #12
 8002af2:	d824      	bhi.n	8002b3e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685a      	ldr	r2, [r3, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3b23      	subs	r3, #35	@ 0x23
 8002b06:	221f      	movs	r2, #31
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43da      	mvns	r2, r3
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	400a      	ands	r2, r1
 8002b14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	4618      	mov	r0, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	685a      	ldr	r2, [r3, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	3b23      	subs	r3, #35	@ 0x23
 8002b30:	fa00 f203 	lsl.w	r2, r0, r3
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b3c:	e023      	b.n	8002b86 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4413      	add	r3, r2
 8002b4e:	3b41      	subs	r3, #65	@ 0x41
 8002b50:	221f      	movs	r2, #31
 8002b52:	fa02 f303 	lsl.w	r3, r2, r3
 8002b56:	43da      	mvns	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	400a      	ands	r2, r1
 8002b5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4413      	add	r3, r2
 8002b78:	3b41      	subs	r3, #65	@ 0x41
 8002b7a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b86:	4b29      	ldr	r3, [pc, #164]	@ (8002c2c <HAL_ADC_ConfigChannel+0x250>)
 8002b88:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a28      	ldr	r2, [pc, #160]	@ (8002c30 <HAL_ADC_ConfigChannel+0x254>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10f      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1d8>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b12      	cmp	r3, #18
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1d      	ldr	r2, [pc, #116]	@ (8002c30 <HAL_ADC_ConfigChannel+0x254>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d12b      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x23a>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c34 <HAL_ADC_ConfigChannel+0x258>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d003      	beq.n	8002bd0 <HAL_ADC_ConfigChannel+0x1f4>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b11      	cmp	r3, #17
 8002bce:	d122      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a11      	ldr	r2, [pc, #68]	@ (8002c34 <HAL_ADC_ConfigChannel+0x258>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d111      	bne.n	8002c16 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf2:	4b11      	ldr	r3, [pc, #68]	@ (8002c38 <HAL_ADC_ConfigChannel+0x25c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a11      	ldr	r2, [pc, #68]	@ (8002c3c <HAL_ADC_ConfigChannel+0x260>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	0c9a      	lsrs	r2, r3, #18
 8002bfe:	4613      	mov	r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	4413      	add	r3, r2
 8002c04:	005b      	lsls	r3, r3, #1
 8002c06:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c08:	e002      	b.n	8002c10 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d1f9      	bne.n	8002c0a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	40012300 	.word	0x40012300
 8002c30:	40012000 	.word	0x40012000
 8002c34:	10000012 	.word	0x10000012
 8002c38:	20000004 	.word	0x20000004
 8002c3c:	431bde83 	.word	0x431bde83

08002c40 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c48:	4b79      	ldr	r3, [pc, #484]	@ (8002e30 <ADC_Init+0x1f0>)
 8002c4a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	431a      	orrs	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	685a      	ldr	r2, [r3, #4]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6859      	ldr	r1, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	021a      	lsls	r2, r3, #8
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	685a      	ldr	r2, [r3, #4]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002c98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	6899      	ldr	r1, [r3, #8]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd2:	4a58      	ldr	r2, [pc, #352]	@ (8002e34 <ADC_Init+0x1f4>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ce6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6899      	ldr	r1, [r3, #8]
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d08:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	6899      	ldr	r1, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	430a      	orrs	r2, r1
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e00f      	b.n	8002d3e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d2c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002d3c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	689a      	ldr	r2, [r3, #8]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0202 	bic.w	r2, r2, #2
 8002d4c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	6899      	ldr	r1, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	7e1b      	ldrb	r3, [r3, #24]
 8002d58:	005a      	lsls	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01b      	beq.n	8002da4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	685a      	ldr	r2, [r3, #4]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d7a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002d8a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6859      	ldr	r1, [r3, #4]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d96:	3b01      	subs	r3, #1
 8002d98:	035a      	lsls	r2, r3, #13
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	e007      	b.n	8002db4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002dc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69db      	ldr	r3, [r3, #28]
 8002dce:	3b01      	subs	r3, #1
 8002dd0:	051a      	lsls	r2, r3, #20
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	430a      	orrs	r2, r1
 8002dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002de8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6899      	ldr	r1, [r3, #8]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002df6:	025a      	lsls	r2, r3, #9
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	689a      	ldr	r2, [r3, #8]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6899      	ldr	r1, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	695b      	ldr	r3, [r3, #20]
 8002e1a:	029a      	lsls	r2, r3, #10
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	609a      	str	r2, [r3, #8]
}
 8002e24:	bf00      	nop
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	40012300 	.word	0x40012300
 8002e34:	0f000001 	.word	0x0f000001

08002e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f003 0307 	and.w	r3, r3, #7
 8002e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e48:	4b0c      	ldr	r3, [pc, #48]	@ (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e4e:	68ba      	ldr	r2, [r7, #8]
 8002e50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e54:	4013      	ands	r3, r2
 8002e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e6a:	4a04      	ldr	r2, [pc, #16]	@ (8002e7c <__NVIC_SetPriorityGrouping+0x44>)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	60d3      	str	r3, [r2, #12]
}
 8002e70:	bf00      	nop
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	e000ed00 	.word	0xe000ed00

08002e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e84:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <__NVIC_GetPriorityGrouping+0x18>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	0a1b      	lsrs	r3, r3, #8
 8002e8a:	f003 0307 	and.w	r3, r3, #7
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	db0b      	blt.n	8002ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eae:	79fb      	ldrb	r3, [r7, #7]
 8002eb0:	f003 021f 	and.w	r2, r3, #31
 8002eb4:	4907      	ldr	r1, [pc, #28]	@ (8002ed4 <__NVIC_EnableIRQ+0x38>)
 8002eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eba:	095b      	lsrs	r3, r3, #5
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8002ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	e000e100 	.word	0xe000e100

08002ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	4603      	mov	r3, r0
 8002ee0:	6039      	str	r1, [r7, #0]
 8002ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	db0a      	blt.n	8002f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	490c      	ldr	r1, [pc, #48]	@ (8002f24 <__NVIC_SetPriority+0x4c>)
 8002ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef6:	0112      	lsls	r2, r2, #4
 8002ef8:	b2d2      	uxtb	r2, r2
 8002efa:	440b      	add	r3, r1
 8002efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f00:	e00a      	b.n	8002f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	b2da      	uxtb	r2, r3
 8002f06:	4908      	ldr	r1, [pc, #32]	@ (8002f28 <__NVIC_SetPriority+0x50>)
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	f003 030f 	and.w	r3, r3, #15
 8002f0e:	3b04      	subs	r3, #4
 8002f10:	0112      	lsls	r2, r2, #4
 8002f12:	b2d2      	uxtb	r2, r2
 8002f14:	440b      	add	r3, r1
 8002f16:	761a      	strb	r2, [r3, #24]
}
 8002f18:	bf00      	nop
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	e000e100 	.word	0xe000e100
 8002f28:	e000ed00 	.word	0xe000ed00

08002f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b089      	sub	sp, #36	@ 0x24
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f003 0307 	and.w	r3, r3, #7
 8002f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	f1c3 0307 	rsb	r3, r3, #7
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	bf28      	it	cs
 8002f4a:	2304      	movcs	r3, #4
 8002f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	3304      	adds	r3, #4
 8002f52:	2b06      	cmp	r3, #6
 8002f54:	d902      	bls.n	8002f5c <NVIC_EncodePriority+0x30>
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	3b03      	subs	r3, #3
 8002f5a:	e000      	b.n	8002f5e <NVIC_EncodePriority+0x32>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f60:	f04f 32ff 	mov.w	r2, #4294967295
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6a:	43da      	mvns	r2, r3
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	401a      	ands	r2, r3
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7e:	43d9      	mvns	r1, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f84:	4313      	orrs	r3, r2
         );
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3724      	adds	r7, #36	@ 0x24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002fa4:	d301      	bcc.n	8002faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e00f      	b.n	8002fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002faa:	4a0a      	ldr	r2, [pc, #40]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb2:	210f      	movs	r1, #15
 8002fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002fb8:	f7ff ff8e 	bl	8002ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	@ (8002fd4 <SysTick_Config+0x40>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff ff29 	bl	8002e38 <__NVIC_SetPriorityGrouping>
}
 8002fe6:	bf00      	nop
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b086      	sub	sp, #24
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003000:	f7ff ff3e 	bl	8002e80 <__NVIC_GetPriorityGrouping>
 8003004:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	68b9      	ldr	r1, [r7, #8]
 800300a:	6978      	ldr	r0, [r7, #20]
 800300c:	f7ff ff8e 	bl	8002f2c <NVIC_EncodePriority>
 8003010:	4602      	mov	r2, r0
 8003012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003016:	4611      	mov	r1, r2
 8003018:	4618      	mov	r0, r3
 800301a:	f7ff ff5d 	bl	8002ed8 <__NVIC_SetPriority>
}
 800301e:	bf00      	nop
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b082      	sub	sp, #8
 800302a:	af00      	add	r7, sp, #0
 800302c:	4603      	mov	r3, r0
 800302e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003034:	4618      	mov	r0, r3
 8003036:	f7ff ff31 	bl	8002e9c <__NVIC_EnableIRQ>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b082      	sub	sp, #8
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7ff ffa2 	bl	8002f94 <SysTick_Config>
 8003050:	4603      	mov	r3, r0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e08a      	b.n	8003184 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2223      	movs	r2, #35	@ 0x23
 800307c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f7fe ff43 	bl	8001f0c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	60bb      	str	r3, [r7, #8]
 800308a:	4b40      	ldr	r3, [pc, #256]	@ (800318c <HAL_ETH_Init+0x130>)
 800308c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800308e:	4a3f      	ldr	r2, [pc, #252]	@ (800318c <HAL_ETH_Init+0x130>)
 8003090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003094:	6453      	str	r3, [r2, #68]	@ 0x44
 8003096:	4b3d      	ldr	r3, [pc, #244]	@ (800318c <HAL_ETH_Init+0x130>)
 8003098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800309a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80030a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003190 <HAL_ETH_Init+0x134>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	4a3a      	ldr	r2, [pc, #232]	@ (8003190 <HAL_ETH_Init+0x134>)
 80030a8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80030ac:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80030ae:	4b38      	ldr	r3, [pc, #224]	@ (8003190 <HAL_ETH_Init+0x134>)
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	4936      	ldr	r1, [pc, #216]	@ (8003190 <HAL_ETH_Init+0x134>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80030bc:	4b34      	ldr	r3, [pc, #208]	@ (8003190 <HAL_ETH_Init+0x134>)
 80030be:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f043 0301 	orr.w	r3, r3, #1
 80030d2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80030d6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030d8:	f7ff faa2 	bl	8002620 <HAL_GetTick>
 80030dc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80030de:	e011      	b.n	8003104 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80030e0:	f7ff fa9e 	bl	8002620 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80030ee:	d909      	bls.n	8003104 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2204      	movs	r2, #4
 80030f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	22e0      	movs	r2, #224	@ 0xe0
 80030fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e03f      	b.n	8003184 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1e4      	bne.n	80030e0 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 f97a 	bl	8003410 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 fa25 	bl	800356c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa7b 	bl	800361e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	461a      	mov	r2, r3
 800312e:	2100      	movs	r1, #0
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f9e3 	bl	80034fc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003144:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003156:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800315a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 800316e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2210      	movs	r2, #16
 800317e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800

08003194 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4b53      	ldr	r3, [pc, #332]	@ (80032f8 <ETH_SetMACConfig+0x164>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	7b9b      	ldrb	r3, [r3, #14]
 80031b2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031b4:	683a      	ldr	r2, [r7, #0]
 80031b6:	7c12      	ldrb	r2, [r2, #16]
 80031b8:	2a00      	cmp	r2, #0
 80031ba:	d102      	bne.n	80031c2 <ETH_SetMACConfig+0x2e>
 80031bc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 80031c0:	e000      	b.n	80031c4 <ETH_SetMACConfig+0x30>
 80031c2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80031c4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	7c52      	ldrb	r2, [r2, #17]
 80031ca:	2a00      	cmp	r2, #0
 80031cc:	d102      	bne.n	80031d4 <ETH_SetMACConfig+0x40>
 80031ce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80031d2:	e000      	b.n	80031d6 <ETH_SetMACConfig+0x42>
 80031d4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80031d6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80031dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	7fdb      	ldrb	r3, [r3, #31]
 80031e2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80031e4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80031ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80031ec:	683a      	ldr	r2, [r7, #0]
 80031ee:	7f92      	ldrb	r2, [r2, #30]
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	d102      	bne.n	80031fa <ETH_SetMACConfig+0x66>
 80031f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80031f8:	e000      	b.n	80031fc <ETH_SetMACConfig+0x68>
 80031fa:	2200      	movs	r2, #0
                        macconf->Speed |
 80031fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	7f1b      	ldrb	r3, [r3, #28]
 8003202:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003204:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800320a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	791b      	ldrb	r3, [r3, #4]
 8003210:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003212:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003214:	683a      	ldr	r2, [r7, #0]
 8003216:	f892 2020 	ldrb.w	r2, [r2, #32]
 800321a:	2a00      	cmp	r2, #0
 800321c:	d102      	bne.n	8003224 <ETH_SetMACConfig+0x90>
 800321e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003222:	e000      	b.n	8003226 <ETH_SetMACConfig+0x92>
 8003224:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003226:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	7bdb      	ldrb	r3, [r3, #15]
 800322c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800322e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003234:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800323c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800323e:	4313      	orrs	r3, r2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003256:	2001      	movs	r0, #1
 8003258:	f7ff f9ee 	bl	8002638 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800327a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800327c:	683a      	ldr	r2, [r7, #0]
 800327e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8003282:	2a00      	cmp	r2, #0
 8003284:	d101      	bne.n	800328a <ETH_SetMACConfig+0xf6>
 8003286:	2280      	movs	r2, #128	@ 0x80
 8003288:	e000      	b.n	800328c <ETH_SetMACConfig+0xf8>
 800328a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800328c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8003292:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800329a:	2a01      	cmp	r2, #1
 800329c:	d101      	bne.n	80032a2 <ETH_SetMACConfig+0x10e>
 800329e:	2208      	movs	r2, #8
 80032a0:	e000      	b.n	80032a4 <ETH_SetMACConfig+0x110>
 80032a2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80032a4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 80032ac:	2a01      	cmp	r2, #1
 80032ae:	d101      	bne.n	80032b4 <ETH_SetMACConfig+0x120>
 80032b0:	2204      	movs	r2, #4
 80032b2:	e000      	b.n	80032b6 <ETH_SetMACConfig+0x122>
 80032b4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80032b6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 80032be:	2a01      	cmp	r2, #1
 80032c0:	d101      	bne.n	80032c6 <ETH_SetMACConfig+0x132>
 80032c2:	2202      	movs	r2, #2
 80032c4:	e000      	b.n	80032c8 <ETH_SetMACConfig+0x134>
 80032c6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80032c8:	4313      	orrs	r3, r2
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68fa      	ldr	r2, [r7, #12]
 80032d6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80032e0:	2001      	movs	r0, #1
 80032e2:	f7ff f9a9 	bl	8002638 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	619a      	str	r2, [r3, #24]
}
 80032ee:	bf00      	nop
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	fd20810f 	.word	0xfd20810f

080032fc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b084      	sub	sp, #16
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4b3d      	ldr	r3, [pc, #244]	@ (800340c <ETH_SetDMAConfig+0x110>)
 8003316:	4013      	ands	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	7b1b      	ldrb	r3, [r3, #12]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d102      	bne.n	8003328 <ETH_SetDMAConfig+0x2c>
 8003322:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003326:	e000      	b.n	800332a <ETH_SetDMAConfig+0x2e>
 8003328:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	7b5b      	ldrb	r3, [r3, #13]
 800332e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003330:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	7f52      	ldrb	r2, [r2, #29]
 8003336:	2a00      	cmp	r2, #0
 8003338:	d102      	bne.n	8003340 <ETH_SetDMAConfig+0x44>
 800333a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800333e:	e000      	b.n	8003342 <ETH_SetDMAConfig+0x46>
 8003340:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003342:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	7b9b      	ldrb	r3, [r3, #14]
 8003348:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800334a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003350:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	7f1b      	ldrb	r3, [r3, #28]
 8003356:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003358:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	7f9b      	ldrb	r3, [r3, #30]
 800335e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003360:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003366:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800336e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003370:	4313      	orrs	r3, r2
 8003372:	68fa      	ldr	r2, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003380:	461a      	mov	r2, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003392:	2001      	movs	r0, #1
 8003394:	f7ff f950 	bl	8002638 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033a0:	461a      	mov	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	791b      	ldrb	r3, [r3, #4]
 80033aa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033b0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80033b6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80033bc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80033c4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80033c6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033cc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80033ce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80033d4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6812      	ldr	r2, [r2, #0]
 80033da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80033de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033e2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7ff f921 	bl	8002638 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033fe:	461a      	mov	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6013      	str	r3, [r2, #0]
}
 8003404:	bf00      	nop
 8003406:	3710      	adds	r7, #16
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	f8de3f23 	.word	0xf8de3f23

08003410 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b0a6      	sub	sp, #152	@ 0x98
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003418:	2301      	movs	r3, #1
 800341a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003424:	2300      	movs	r3, #0
 8003426:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800342e:	2301      	movs	r3, #1
 8003430:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800343a:	2301      	movs	r3, #1
 800343c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003440:	2301      	movs	r3, #1
 8003442:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800344c:	2300      	movs	r3, #0
 800344e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003452:	2300      	movs	r3, #0
 8003454:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003456:	2300      	movs	r3, #0
 8003458:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800345c:	2300      	movs	r3, #0
 800345e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003460:	2300      	movs	r3, #0
 8003462:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003466:	2300      	movs	r3, #0
 8003468:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800346c:	2300      	movs	r3, #0
 800346e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003472:	2300      	movs	r3, #0
 8003474:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003478:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800347c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800347e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003482:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800348a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fe7f 	bl	8003194 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003496:	2301      	movs	r3, #1
 8003498:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800349a:	2301      	movs	r3, #1
 800349c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800349e:	2301      	movs	r3, #1
 80034a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80034a4:	2301      	movs	r3, #1
 80034a6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80034a8:	2300      	movs	r3, #0
 80034aa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80034b2:	2300      	movs	r3, #0
 80034b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80034bc:	2301      	movs	r3, #1
 80034be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80034c2:	2301      	movs	r3, #1
 80034c4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80034c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80034ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80034cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80034d0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80034d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80034d6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80034d8:	2301      	movs	r3, #1
 80034da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	4619      	mov	r1, r3
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff05 	bl	80032fc <ETH_SetDMAConfig>
}
 80034f2:	bf00      	nop
 80034f4:	3798      	adds	r7, #152	@ 0x98
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b087      	sub	sp, #28
 8003500:	af00      	add	r7, sp, #0
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3305      	adds	r3, #5
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	021b      	lsls	r3, r3, #8
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	3204      	adds	r2, #4
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	4313      	orrs	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	4b11      	ldr	r3, [pc, #68]	@ (8003564 <ETH_MACAddressConfig+0x68>)
 800351e:	4413      	add	r3, r2
 8003520:	461a      	mov	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3303      	adds	r3, #3
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	061a      	lsls	r2, r3, #24
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3302      	adds	r3, #2
 8003532:	781b      	ldrb	r3, [r3, #0]
 8003534:	041b      	lsls	r3, r3, #16
 8003536:	431a      	orrs	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3301      	adds	r3, #1
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	021b      	lsls	r3, r3, #8
 8003540:	4313      	orrs	r3, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	7812      	ldrb	r2, [r2, #0]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <ETH_MACAddressConfig+0x6c>)
 800354e:	4413      	add	r3, r2
 8003550:	461a      	mov	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	6013      	str	r3, [r2, #0]
}
 8003556:	bf00      	nop
 8003558:	371c      	adds	r7, #28
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40028040 	.word	0x40028040
 8003568:	40028044 	.word	0x40028044

0800356c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003574:	2300      	movs	r3, #0
 8003576:	60fb      	str	r3, [r7, #12]
 8003578:	e03e      	b.n	80035f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68d9      	ldr	r1, [r3, #12]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	440b      	add	r3, r1
 800358a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2200      	movs	r2, #0
 800359c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80035a4:	68b9      	ldr	r1, [r7, #8]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	3206      	adds	r2, #6
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d80c      	bhi.n	80035dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	68d9      	ldr	r1, [r3, #12]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	1c5a      	adds	r2, r3, #1
 80035ca:	4613      	mov	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4413      	add	r3, r2
 80035d0:	00db      	lsls	r3, r3, #3
 80035d2:	440b      	add	r3, r1
 80035d4:	461a      	mov	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	60da      	str	r2, [r3, #12]
 80035da:	e004      	b.n	80035e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3301      	adds	r3, #1
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d9bd      	bls.n	800357a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68da      	ldr	r2, [r3, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003610:	611a      	str	r2, [r3, #16]
}
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e048      	b.n	80036be <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6919      	ldr	r1, [r3, #16]
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	440b      	add	r3, r1
 800363c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2200      	movs	r2, #0
 8003642:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	2200      	movs	r2, #0
 800365a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003668:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003682:	68b9      	ldr	r1, [r7, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	3212      	adds	r2, #18
 800368a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d80c      	bhi.n	80036ae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6919      	ldr	r1, [r3, #16]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	1c5a      	adds	r2, r3, #1
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	00db      	lsls	r3, r3, #3
 80036a4:	440b      	add	r3, r1
 80036a6:	461a      	mov	r2, r3
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	60da      	str	r2, [r3, #12]
 80036ac:	e004      	b.n	80036b8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	691b      	ldr	r3, [r3, #16]
 80036b2:	461a      	mov	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	3301      	adds	r3, #1
 80036bc:	60fb      	str	r3, [r7, #12]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b03      	cmp	r3, #3
 80036c2:	d9b3      	bls.n	800362c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	691a      	ldr	r2, [r3, #16]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036ee:	60da      	str	r2, [r3, #12]
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	@ 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003706:	2300      	movs	r3, #0
 8003708:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003712:	2300      	movs	r3, #0
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	e177      	b.n	8003a08 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4013      	ands	r3, r2
 800372a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	429a      	cmp	r2, r3
 8003732:	f040 8166 	bne.w	8003a02 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	2b01      	cmp	r3, #1
 8003740:	d005      	beq.n	800374e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374a:	2b02      	cmp	r3, #2
 800374c:	d130      	bne.n	80037b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	69ba      	ldr	r2, [r7, #24]
 8003762:	4013      	ands	r3, r2
 8003764:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
 8003772:	69ba      	ldr	r2, [r7, #24]
 8003774:	4313      	orrs	r3, r2
 8003776:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003784:	2201      	movs	r2, #1
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	43db      	mvns	r3, r3
 800378e:	69ba      	ldr	r2, [r7, #24]
 8003790:	4013      	ands	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	091b      	lsrs	r3, r3, #4
 800379a:	f003 0201 	and.w	r2, r3, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f003 0303 	and.w	r3, r3, #3
 80037b8:	2b03      	cmp	r3, #3
 80037ba:	d017      	beq.n	80037ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	005b      	lsls	r3, r3, #1
 80037c6:	2203      	movs	r2, #3
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	43db      	mvns	r3, r3
 80037ce:	69ba      	ldr	r2, [r7, #24]
 80037d0:	4013      	ands	r3, r2
 80037d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689a      	ldr	r2, [r3, #8]
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	fa02 f303 	lsl.w	r3, r2, r3
 80037e0:	69ba      	ldr	r2, [r7, #24]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0303 	and.w	r3, r3, #3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d123      	bne.n	8003840 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	08da      	lsrs	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3208      	adds	r2, #8
 8003800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003804:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	220f      	movs	r2, #15
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	69ba      	ldr	r2, [r7, #24]
 8003818:	4013      	ands	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	691a      	ldr	r2, [r3, #16]
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f003 0307 	and.w	r3, r3, #7
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4313      	orrs	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003832:	69fb      	ldr	r3, [r7, #28]
 8003834:	08da      	lsrs	r2, r3, #3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	3208      	adds	r2, #8
 800383a:	69b9      	ldr	r1, [r7, #24]
 800383c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	2203      	movs	r2, #3
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	43db      	mvns	r3, r3
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	4013      	ands	r3, r2
 8003856:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0203 	and.w	r2, r3, #3
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4313      	orrs	r3, r2
 800386c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80c0 	beq.w	8003a02 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003882:	2300      	movs	r3, #0
 8003884:	60fb      	str	r3, [r7, #12]
 8003886:	4b66      	ldr	r3, [pc, #408]	@ (8003a20 <HAL_GPIO_Init+0x324>)
 8003888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388a:	4a65      	ldr	r2, [pc, #404]	@ (8003a20 <HAL_GPIO_Init+0x324>)
 800388c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003890:	6453      	str	r3, [r2, #68]	@ 0x44
 8003892:	4b63      	ldr	r3, [pc, #396]	@ (8003a20 <HAL_GPIO_Init+0x324>)
 8003894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003896:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800389e:	4a61      	ldr	r2, [pc, #388]	@ (8003a24 <HAL_GPIO_Init+0x328>)
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	3302      	adds	r3, #2
 80038a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	f003 0303 	and.w	r3, r3, #3
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	220f      	movs	r2, #15
 80038b6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ba:	43db      	mvns	r3, r3
 80038bc:	69ba      	ldr	r2, [r7, #24]
 80038be:	4013      	ands	r3, r2
 80038c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a58      	ldr	r2, [pc, #352]	@ (8003a28 <HAL_GPIO_Init+0x32c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d037      	beq.n	800393a <HAL_GPIO_Init+0x23e>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a57      	ldr	r2, [pc, #348]	@ (8003a2c <HAL_GPIO_Init+0x330>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d031      	beq.n	8003936 <HAL_GPIO_Init+0x23a>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a56      	ldr	r2, [pc, #344]	@ (8003a30 <HAL_GPIO_Init+0x334>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d02b      	beq.n	8003932 <HAL_GPIO_Init+0x236>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a55      	ldr	r2, [pc, #340]	@ (8003a34 <HAL_GPIO_Init+0x338>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d025      	beq.n	800392e <HAL_GPIO_Init+0x232>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a54      	ldr	r2, [pc, #336]	@ (8003a38 <HAL_GPIO_Init+0x33c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d01f      	beq.n	800392a <HAL_GPIO_Init+0x22e>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a53      	ldr	r2, [pc, #332]	@ (8003a3c <HAL_GPIO_Init+0x340>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d019      	beq.n	8003926 <HAL_GPIO_Init+0x22a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a52      	ldr	r2, [pc, #328]	@ (8003a40 <HAL_GPIO_Init+0x344>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_GPIO_Init+0x226>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a51      	ldr	r2, [pc, #324]	@ (8003a44 <HAL_GPIO_Init+0x348>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00d      	beq.n	800391e <HAL_GPIO_Init+0x222>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a50      	ldr	r2, [pc, #320]	@ (8003a48 <HAL_GPIO_Init+0x34c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <HAL_GPIO_Init+0x21e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4f      	ldr	r2, [pc, #316]	@ (8003a4c <HAL_GPIO_Init+0x350>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d101      	bne.n	8003916 <HAL_GPIO_Init+0x21a>
 8003912:	2309      	movs	r3, #9
 8003914:	e012      	b.n	800393c <HAL_GPIO_Init+0x240>
 8003916:	230a      	movs	r3, #10
 8003918:	e010      	b.n	800393c <HAL_GPIO_Init+0x240>
 800391a:	2308      	movs	r3, #8
 800391c:	e00e      	b.n	800393c <HAL_GPIO_Init+0x240>
 800391e:	2307      	movs	r3, #7
 8003920:	e00c      	b.n	800393c <HAL_GPIO_Init+0x240>
 8003922:	2306      	movs	r3, #6
 8003924:	e00a      	b.n	800393c <HAL_GPIO_Init+0x240>
 8003926:	2305      	movs	r3, #5
 8003928:	e008      	b.n	800393c <HAL_GPIO_Init+0x240>
 800392a:	2304      	movs	r3, #4
 800392c:	e006      	b.n	800393c <HAL_GPIO_Init+0x240>
 800392e:	2303      	movs	r3, #3
 8003930:	e004      	b.n	800393c <HAL_GPIO_Init+0x240>
 8003932:	2302      	movs	r3, #2
 8003934:	e002      	b.n	800393c <HAL_GPIO_Init+0x240>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_GPIO_Init+0x240>
 800393a:	2300      	movs	r3, #0
 800393c:	69fa      	ldr	r2, [r7, #28]
 800393e:	f002 0203 	and.w	r2, r2, #3
 8003942:	0092      	lsls	r2, r2, #2
 8003944:	4093      	lsls	r3, r2
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4313      	orrs	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800394c:	4935      	ldr	r1, [pc, #212]	@ (8003a24 <HAL_GPIO_Init+0x328>)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	3302      	adds	r3, #2
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800395a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	43db      	mvns	r3, r3
 8003964:	69ba      	ldr	r2, [r7, #24]
 8003966:	4013      	ands	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003976:	69ba      	ldr	r2, [r7, #24]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397e:	4a34      	ldr	r2, [pc, #208]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003984:	4b32      	ldr	r3, [pc, #200]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	43db      	mvns	r3, r3
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a8:	4a29      	ldr	r2, [pc, #164]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039ae:	4b28      	ldr	r3, [pc, #160]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	43db      	mvns	r3, r3
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	4013      	ands	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80039ca:	69ba      	ldr	r2, [r7, #24]
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d2:	4a1f      	ldr	r2, [pc, #124]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	69ba      	ldr	r2, [r7, #24]
 80039e4:	4013      	ands	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80039f4:	69ba      	ldr	r2, [r7, #24]
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039fc:	4a14      	ldr	r2, [pc, #80]	@ (8003a50 <HAL_GPIO_Init+0x354>)
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	3301      	adds	r3, #1
 8003a06:	61fb      	str	r3, [r7, #28]
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	2b0f      	cmp	r3, #15
 8003a0c:	f67f ae84 	bls.w	8003718 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a10:	bf00      	nop
 8003a12:	bf00      	nop
 8003a14:	3724      	adds	r7, #36	@ 0x24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40013800 	.word	0x40013800
 8003a28:	40020000 	.word	0x40020000
 8003a2c:	40020400 	.word	0x40020400
 8003a30:	40020800 	.word	0x40020800
 8003a34:	40020c00 	.word	0x40020c00
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40021400 	.word	0x40021400
 8003a40:	40021800 	.word	0x40021800
 8003a44:	40021c00 	.word	0x40021c00
 8003a48:	40022000 	.word	0x40022000
 8003a4c:	40022400 	.word	0x40022400
 8003a50:	40013c00 	.word	0x40013c00

08003a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	4013      	ands	r3, r2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
 8003a70:	e001      	b.n	8003a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	460b      	mov	r3, r1
 8003a8e:	807b      	strh	r3, [r7, #2]
 8003a90:	4613      	mov	r3, r2
 8003a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a94:	787b      	ldrb	r3, [r7, #1]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d003      	beq.n	8003aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a9a:	887a      	ldrh	r2, [r7, #2]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003aa0:	e003      	b.n	8003aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003aa2:	887b      	ldrh	r3, [r7, #2]
 8003aa4:	041a      	lsls	r2, r3, #16
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	619a      	str	r2, [r3, #24]
}
 8003aaa:	bf00      	nop
 8003aac:	370c      	adds	r7, #12
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr

08003ab6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b086      	sub	sp, #24
 8003aba:	af02      	add	r7, sp, #8
 8003abc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e101      	b.n	8003ccc <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d106      	bne.n	8003ae8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe fba0 	bl	8002228 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2203      	movs	r2, #3
 8003aec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003af6:	d102      	bne.n	8003afe <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f002 fa14 	bl	8005f30 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6818      	ldr	r0, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	7c1a      	ldrb	r2, [r3, #16]
 8003b10:	f88d 2000 	strb.w	r2, [sp]
 8003b14:	3304      	adds	r3, #4
 8003b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b18:	f002 f9a6 	bl	8005e68 <USB_CoreInit>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e0ce      	b.n	8003ccc <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	4618      	mov	r0, r3
 8003b36:	f002 fa0c 	bl	8005f52 <USB_SetCurrentMode>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e0bf      	b.n	8003ccc <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e04a      	b.n	8003be8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	3315      	adds	r3, #21
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	3314      	adds	r3, #20
 8003b76:	7bfa      	ldrb	r2, [r7, #15]
 8003b78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	7bfb      	ldrb	r3, [r7, #15]
 8003b7e:	b298      	uxth	r0, r3
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	332e      	adds	r3, #46	@ 0x2e
 8003b8e:	4602      	mov	r2, r0
 8003b90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3318      	adds	r3, #24
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ba6:	7bfa      	ldrb	r2, [r7, #15]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	00db      	lsls	r3, r3, #3
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	331c      	adds	r3, #28
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bba:	7bfa      	ldrb	r2, [r7, #15]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	4413      	add	r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3320      	adds	r3, #32
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003bce:	7bfa      	ldrb	r2, [r7, #15]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	4413      	add	r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3324      	adds	r3, #36	@ 0x24
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
 8003be4:	3301      	adds	r3, #1
 8003be6:	73fb      	strb	r3, [r7, #15]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	791b      	ldrb	r3, [r3, #4]
 8003bec:	7bfa      	ldrb	r2, [r7, #15]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d3af      	bcc.n	8003b52 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	73fb      	strb	r3, [r7, #15]
 8003bf6:	e044      	b.n	8003c82 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003bf8:	7bfa      	ldrb	r2, [r7, #15]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	4413      	add	r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8003c20:	7bfa      	ldrb	r2, [r7, #15]
 8003c22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c24:	7bfa      	ldrb	r2, [r7, #15]
 8003c26:	6879      	ldr	r1, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	440b      	add	r3, r1
 8003c32:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	4413      	add	r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	4413      	add	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c7c:	7bfb      	ldrb	r3, [r7, #15]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	791b      	ldrb	r3, [r3, #4]
 8003c86:	7bfa      	ldrb	r2, [r7, #15]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d3b5      	bcc.n	8003bf8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6818      	ldr	r0, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	7c1a      	ldrb	r2, [r3, #16]
 8003c94:	f88d 2000 	strb.w	r2, [sp]
 8003c98:	3304      	adds	r3, #4
 8003c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c9c:	f002 f9a6 	bl	8005fec <USB_DevInit>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d005      	beq.n	8003cb2 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2202      	movs	r2, #2
 8003caa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00c      	b.n	8003ccc <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f002 fb6e 	bl	80063a6 <USB_DevDisconnect>

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e267      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d075      	beq.n	8003dde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003cf2:	4b88      	ldr	r3, [pc, #544]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 030c 	and.w	r3, r3, #12
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d00c      	beq.n	8003d18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfe:	4b85      	ldr	r3, [pc, #532]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d112      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d0a:	4b82      	ldr	r3, [pc, #520]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003d16:	d10b      	bne.n	8003d30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d18:	4b7e      	ldr	r3, [pc, #504]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d05b      	beq.n	8003ddc <HAL_RCC_OscConfig+0x108>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d157      	bne.n	8003ddc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e242      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d38:	d106      	bne.n	8003d48 <HAL_RCC_OscConfig+0x74>
 8003d3a:	4b76      	ldr	r3, [pc, #472]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a75      	ldr	r2, [pc, #468]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d44:	6013      	str	r3, [r2, #0]
 8003d46:	e01d      	b.n	8003d84 <HAL_RCC_OscConfig+0xb0>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d50:	d10c      	bne.n	8003d6c <HAL_RCC_OscConfig+0x98>
 8003d52:	4b70      	ldr	r3, [pc, #448]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a6f      	ldr	r2, [pc, #444]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	4b6d      	ldr	r3, [pc, #436]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a6c      	ldr	r2, [pc, #432]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d68:	6013      	str	r3, [r2, #0]
 8003d6a:	e00b      	b.n	8003d84 <HAL_RCC_OscConfig+0xb0>
 8003d6c:	4b69      	ldr	r3, [pc, #420]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a68      	ldr	r2, [pc, #416]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d76:	6013      	str	r3, [r2, #0]
 8003d78:	4b66      	ldr	r3, [pc, #408]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a65      	ldr	r2, [pc, #404]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003d7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003d82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d013      	beq.n	8003db4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fc48 	bl	8002620 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fe fc44 	bl	8002620 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	@ 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e207      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003da6:	4b5b      	ldr	r3, [pc, #364]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0xc0>
 8003db2:	e014      	b.n	8003dde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003db4:	f7fe fc34 	bl	8002620 <HAL_GetTick>
 8003db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dba:	e008      	b.n	8003dce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dbc:	f7fe fc30 	bl	8002620 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	2b64      	cmp	r3, #100	@ 0x64
 8003dc8:	d901      	bls.n	8003dce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dca:	2303      	movs	r3, #3
 8003dcc:	e1f3      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dce:	4b51      	ldr	r3, [pc, #324]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d1f0      	bne.n	8003dbc <HAL_RCC_OscConfig+0xe8>
 8003dda:	e000      	b.n	8003dde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d063      	beq.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dea:	4b4a      	ldr	r3, [pc, #296]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df6:	4b47      	ldr	r3, [pc, #284]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d11c      	bne.n	8003e3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e02:	4b44      	ldr	r3, [pc, #272]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d116      	bne.n	8003e3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0e:	4b41      	ldr	r3, [pc, #260]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x152>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d001      	beq.n	8003e26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	e1c7      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e26:	4b3b      	ldr	r3, [pc, #236]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4937      	ldr	r1, [pc, #220]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e36:	4313      	orrs	r3, r2
 8003e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e3a:	e03a      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d020      	beq.n	8003e86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e44:	4b34      	ldr	r3, [pc, #208]	@ (8003f18 <HAL_RCC_OscConfig+0x244>)
 8003e46:	2201      	movs	r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fe fbe9 	bl	8002620 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e52:	f7fe fbe5 	bl	8002620 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e1a8      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e64:	4b2b      	ldr	r3, [pc, #172]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0302 	and.w	r3, r3, #2
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0f0      	beq.n	8003e52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e70:	4b28      	ldr	r3, [pc, #160]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	4925      	ldr	r1, [pc, #148]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003e80:	4313      	orrs	r3, r2
 8003e82:	600b      	str	r3, [r1, #0]
 8003e84:	e015      	b.n	8003eb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e86:	4b24      	ldr	r3, [pc, #144]	@ (8003f18 <HAL_RCC_OscConfig+0x244>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8c:	f7fe fbc8 	bl	8002620 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e92:	e008      	b.n	8003ea6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e94:	f7fe fbc4 	bl	8002620 <HAL_GetTick>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d901      	bls.n	8003ea6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e187      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d1f0      	bne.n	8003e94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0308 	and.w	r3, r3, #8
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d036      	beq.n	8003f2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d016      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec6:	4b15      	ldr	r3, [pc, #84]	@ (8003f1c <HAL_RCC_OscConfig+0x248>)
 8003ec8:	2201      	movs	r2, #1
 8003eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ecc:	f7fe fba8 	bl	8002620 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ed4:	f7fe fba4 	bl	8002620 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e167      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <HAL_RCC_OscConfig+0x240>)
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x200>
 8003ef2:	e01b      	b.n	8003f2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ef4:	4b09      	ldr	r3, [pc, #36]	@ (8003f1c <HAL_RCC_OscConfig+0x248>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003efa:	f7fe fb91 	bl	8002620 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f00:	e00e      	b.n	8003f20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f02:	f7fe fb8d 	bl	8002620 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d907      	bls.n	8003f20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e150      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
 8003f14:	40023800 	.word	0x40023800
 8003f18:	42470000 	.word	0x42470000
 8003f1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f20:	4b88      	ldr	r3, [pc, #544]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1ea      	bne.n	8003f02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0304 	and.w	r3, r3, #4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8097 	beq.w	8004068 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f3e:	4b81      	ldr	r3, [pc, #516]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10f      	bne.n	8003f6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	4b7d      	ldr	r3, [pc, #500]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f52:	4a7c      	ldr	r2, [pc, #496]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f58:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f5a:	4b7a      	ldr	r3, [pc, #488]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f66:	2301      	movs	r3, #1
 8003f68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f6a:	4b77      	ldr	r3, [pc, #476]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d118      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f76:	4b74      	ldr	r3, [pc, #464]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a73      	ldr	r2, [pc, #460]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f82:	f7fe fb4d 	bl	8002620 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f8a:	f7fe fb49 	bl	8002620 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e10c      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f9c:	4b6a      	ldr	r3, [pc, #424]	@ (8004148 <HAL_RCC_OscConfig+0x474>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d106      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ea>
 8003fb0:	4b64      	ldr	r3, [pc, #400]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fb4:	4a63      	ldr	r2, [pc, #396]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fb6:	f043 0301 	orr.w	r3, r3, #1
 8003fba:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fbc:	e01c      	b.n	8003ff8 <HAL_RCC_OscConfig+0x324>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	2b05      	cmp	r3, #5
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x30c>
 8003fc6:	4b5f      	ldr	r3, [pc, #380]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fca:	4a5e      	ldr	r2, [pc, #376]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	f043 0304 	orr.w	r3, r3, #4
 8003fd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fd2:	4b5c      	ldr	r3, [pc, #368]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fd6:	4a5b      	ldr	r2, [pc, #364]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0x324>
 8003fe0:	4b58      	ldr	r3, [pc, #352]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fe4:	4a57      	ldr	r2, [pc, #348]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	6713      	str	r3, [r2, #112]	@ 0x70
 8003fec:	4b55      	ldr	r3, [pc, #340]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	4a54      	ldr	r2, [pc, #336]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	f023 0304 	bic.w	r3, r3, #4
 8003ff6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d015      	beq.n	800402c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004000:	f7fe fb0e 	bl	8002620 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004006:	e00a      	b.n	800401e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004008:	f7fe fb0a 	bl	8002620 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004016:	4293      	cmp	r3, r2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e0cb      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800401e:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8004020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0ee      	beq.n	8004008 <HAL_RCC_OscConfig+0x334>
 800402a:	e014      	b.n	8004056 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800402c:	f7fe faf8 	bl	8002620 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fe faf4 	bl	8002620 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e0b5      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800404a:	4b3e      	ldr	r3, [pc, #248]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 800404c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800404e:	f003 0302 	and.w	r3, r3, #2
 8004052:	2b00      	cmp	r3, #0
 8004054:	d1ee      	bne.n	8004034 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004056:	7dfb      	ldrb	r3, [r7, #23]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d105      	bne.n	8004068 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405c:	4b39      	ldr	r3, [pc, #228]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 800405e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004060:	4a38      	ldr	r2, [pc, #224]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8004062:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004066:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80a1 	beq.w	80041b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004072:	4b34      	ldr	r3, [pc, #208]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b08      	cmp	r3, #8
 800407c:	d05c      	beq.n	8004138 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	2b02      	cmp	r3, #2
 8004084:	d141      	bne.n	800410a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004086:	4b31      	ldr	r3, [pc, #196]	@ (800414c <HAL_RCC_OscConfig+0x478>)
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408c:	f7fe fac8 	bl	8002620 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004094:	f7fe fac4 	bl	8002620 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e087      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040a6:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	69da      	ldr	r2, [r3, #28]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	431a      	orrs	r2, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	019b      	lsls	r3, r3, #6
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040c8:	085b      	lsrs	r3, r3, #1
 80040ca:	3b01      	subs	r3, #1
 80040cc:	041b      	lsls	r3, r3, #16
 80040ce:	431a      	orrs	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d4:	061b      	lsls	r3, r3, #24
 80040d6:	491b      	ldr	r1, [pc, #108]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040dc:	4b1b      	ldr	r3, [pc, #108]	@ (800414c <HAL_RCC_OscConfig+0x478>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e2:	f7fe fa9d 	bl	8002620 <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ea:	f7fe fa99 	bl	8002620 <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e05c      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040fc:	4b11      	ldr	r3, [pc, #68]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x416>
 8004108:	e054      	b.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <HAL_RCC_OscConfig+0x478>)
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004110:	f7fe fa86 	bl	8002620 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004118:	f7fe fa82 	bl	8002620 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e045      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <HAL_RCC_OscConfig+0x470>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1f0      	bne.n	8004118 <HAL_RCC_OscConfig+0x444>
 8004136:	e03d      	b.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	2b01      	cmp	r3, #1
 800413e:	d107      	bne.n	8004150 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e038      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
 8004144:	40023800 	.word	0x40023800
 8004148:	40007000 	.word	0x40007000
 800414c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004150:	4b1b      	ldr	r3, [pc, #108]	@ (80041c0 <HAL_RCC_OscConfig+0x4ec>)
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	699b      	ldr	r3, [r3, #24]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d028      	beq.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004168:	429a      	cmp	r2, r3
 800416a:	d121      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004176:	429a      	cmp	r2, r3
 8004178:	d11a      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004180:	4013      	ands	r3, r2
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004186:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004188:	4293      	cmp	r3, r2
 800418a:	d111      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004196:	085b      	lsrs	r3, r3, #1
 8004198:	3b01      	subs	r3, #1
 800419a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d107      	bne.n	80041b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d001      	beq.n	80041b4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e000      	b.n	80041b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800

080041c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0cc      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041d8:	4b68      	ldr	r3, [pc, #416]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 030f 	and.w	r3, r3, #15
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d90c      	bls.n	8004200 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b65      	ldr	r3, [pc, #404]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b63      	ldr	r3, [pc, #396]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 030f 	and.w	r3, r3, #15
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e0b8      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d020      	beq.n	800424e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004218:	4b59      	ldr	r3, [pc, #356]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a58      	ldr	r2, [pc, #352]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004222:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004230:	4b53      	ldr	r3, [pc, #332]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	4a52      	ldr	r2, [pc, #328]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004236:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800423a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800423c:	4b50      	ldr	r3, [pc, #320]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	494d      	ldr	r1, [pc, #308]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b00      	cmp	r3, #0
 8004258:	d044      	beq.n	80042e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d107      	bne.n	8004272 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b47      	ldr	r3, [pc, #284]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d119      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e07f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d003      	beq.n	8004282 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800427e:	2b03      	cmp	r3, #3
 8004280:	d107      	bne.n	8004292 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004282:	4b3f      	ldr	r3, [pc, #252]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d109      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e06f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004292:	4b3b      	ldr	r3, [pc, #236]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e067      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042a2:	4b37      	ldr	r3, [pc, #220]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f023 0203 	bic.w	r2, r3, #3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	4934      	ldr	r1, [pc, #208]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042b0:	4313      	orrs	r3, r2
 80042b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042b4:	f7fe f9b4 	bl	8002620 <HAL_GetTick>
 80042b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	e00a      	b.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042bc:	f7fe f9b0 	bl	8002620 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e04f      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042d2:	4b2b      	ldr	r3, [pc, #172]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 020c 	and.w	r2, r3, #12
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d1eb      	bne.n	80042bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042e4:	4b25      	ldr	r3, [pc, #148]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	683a      	ldr	r2, [r7, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d20c      	bcs.n	800430c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f2:	4b22      	ldr	r3, [pc, #136]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80042fa:	4b20      	ldr	r3, [pc, #128]	@ (800437c <HAL_RCC_ClockConfig+0x1b8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 030f 	and.w	r3, r3, #15
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d001      	beq.n	800430c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e032      	b.n	8004372 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d008      	beq.n	800432a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004318:	4b19      	ldr	r3, [pc, #100]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	4916      	ldr	r1, [pc, #88]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004326:	4313      	orrs	r3, r2
 8004328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0308 	and.w	r3, r3, #8
 8004332:	2b00      	cmp	r3, #0
 8004334:	d009      	beq.n	800434a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004336:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	691b      	ldr	r3, [r3, #16]
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	490e      	ldr	r1, [pc, #56]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004346:	4313      	orrs	r3, r2
 8004348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800434a:	f000 f821 	bl	8004390 <HAL_RCC_GetSysClockFreq>
 800434e:	4602      	mov	r2, r0
 8004350:	4b0b      	ldr	r3, [pc, #44]	@ (8004380 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	091b      	lsrs	r3, r3, #4
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	490a      	ldr	r1, [pc, #40]	@ (8004384 <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	5ccb      	ldrb	r3, [r1, r3]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a09      	ldr	r2, [pc, #36]	@ (8004388 <HAL_RCC_ClockConfig+0x1c4>)
 8004364:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004366:	4b09      	ldr	r3, [pc, #36]	@ (800438c <HAL_RCC_ClockConfig+0x1c8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7fe f914 	bl	8002598 <HAL_InitTick>

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40023c00 	.word	0x40023c00
 8004380:	40023800 	.word	0x40023800
 8004384:	0800ac98 	.word	0x0800ac98
 8004388:	20000004 	.word	0x20000004
 800438c:	20000008 	.word	0x20000008

08004390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004390:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004394:	b094      	sub	sp, #80	@ 0x50
 8004396:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004398:	2300      	movs	r3, #0
 800439a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800439c:	2300      	movs	r3, #0
 800439e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80043a4:	2300      	movs	r3, #0
 80043a6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043a8:	4b79      	ldr	r3, [pc, #484]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f003 030c 	and.w	r3, r3, #12
 80043b0:	2b08      	cmp	r3, #8
 80043b2:	d00d      	beq.n	80043d0 <HAL_RCC_GetSysClockFreq+0x40>
 80043b4:	2b08      	cmp	r3, #8
 80043b6:	f200 80e1 	bhi.w	800457c <HAL_RCC_GetSysClockFreq+0x1ec>
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d002      	beq.n	80043c4 <HAL_RCC_GetSysClockFreq+0x34>
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d003      	beq.n	80043ca <HAL_RCC_GetSysClockFreq+0x3a>
 80043c2:	e0db      	b.n	800457c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043c4:	4b73      	ldr	r3, [pc, #460]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x204>)
 80043c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043c8:	e0db      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ca:	4b73      	ldr	r3, [pc, #460]	@ (8004598 <HAL_RCC_GetSysClockFreq+0x208>)
 80043cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80043ce:	e0d8      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043d0:	4b6f      	ldr	r3, [pc, #444]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043d8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043da:	4b6d      	ldr	r3, [pc, #436]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d063      	beq.n	80044ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	099b      	lsrs	r3, r3, #6
 80043ec:	2200      	movs	r2, #0
 80043ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80043f0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80043f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80043fa:	2300      	movs	r3, #0
 80043fc:	637b      	str	r3, [r7, #52]	@ 0x34
 80043fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004402:	4622      	mov	r2, r4
 8004404:	462b      	mov	r3, r5
 8004406:	f04f 0000 	mov.w	r0, #0
 800440a:	f04f 0100 	mov.w	r1, #0
 800440e:	0159      	lsls	r1, r3, #5
 8004410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004414:	0150      	lsls	r0, r2, #5
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	4621      	mov	r1, r4
 800441c:	1a51      	subs	r1, r2, r1
 800441e:	6139      	str	r1, [r7, #16]
 8004420:	4629      	mov	r1, r5
 8004422:	eb63 0301 	sbc.w	r3, r3, r1
 8004426:	617b      	str	r3, [r7, #20]
 8004428:	f04f 0200 	mov.w	r2, #0
 800442c:	f04f 0300 	mov.w	r3, #0
 8004430:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004434:	4659      	mov	r1, fp
 8004436:	018b      	lsls	r3, r1, #6
 8004438:	4651      	mov	r1, sl
 800443a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800443e:	4651      	mov	r1, sl
 8004440:	018a      	lsls	r2, r1, #6
 8004442:	4651      	mov	r1, sl
 8004444:	ebb2 0801 	subs.w	r8, r2, r1
 8004448:	4659      	mov	r1, fp
 800444a:	eb63 0901 	sbc.w	r9, r3, r1
 800444e:	f04f 0200 	mov.w	r2, #0
 8004452:	f04f 0300 	mov.w	r3, #0
 8004456:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800445a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800445e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004462:	4690      	mov	r8, r2
 8004464:	4699      	mov	r9, r3
 8004466:	4623      	mov	r3, r4
 8004468:	eb18 0303 	adds.w	r3, r8, r3
 800446c:	60bb      	str	r3, [r7, #8]
 800446e:	462b      	mov	r3, r5
 8004470:	eb49 0303 	adc.w	r3, r9, r3
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	f04f 0200 	mov.w	r2, #0
 800447a:	f04f 0300 	mov.w	r3, #0
 800447e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004482:	4629      	mov	r1, r5
 8004484:	024b      	lsls	r3, r1, #9
 8004486:	4621      	mov	r1, r4
 8004488:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800448c:	4621      	mov	r1, r4
 800448e:	024a      	lsls	r2, r1, #9
 8004490:	4610      	mov	r0, r2
 8004492:	4619      	mov	r1, r3
 8004494:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004496:	2200      	movs	r2, #0
 8004498:	62bb      	str	r3, [r7, #40]	@ 0x28
 800449a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800449c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044a0:	f7fc fc02 	bl	8000ca8 <__aeabi_uldivmod>
 80044a4:	4602      	mov	r2, r0
 80044a6:	460b      	mov	r3, r1
 80044a8:	4613      	mov	r3, r2
 80044aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044ac:	e058      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044ae:	4b38      	ldr	r3, [pc, #224]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	099b      	lsrs	r3, r3, #6
 80044b4:	2200      	movs	r2, #0
 80044b6:	4618      	mov	r0, r3
 80044b8:	4611      	mov	r1, r2
 80044ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80044be:	623b      	str	r3, [r7, #32]
 80044c0:	2300      	movs	r3, #0
 80044c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	f04f 0000 	mov.w	r0, #0
 80044d0:	f04f 0100 	mov.w	r1, #0
 80044d4:	0159      	lsls	r1, r3, #5
 80044d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044da:	0150      	lsls	r0, r2, #5
 80044dc:	4602      	mov	r2, r0
 80044de:	460b      	mov	r3, r1
 80044e0:	4641      	mov	r1, r8
 80044e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80044e6:	4649      	mov	r1, r9
 80044e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80044ec:	f04f 0200 	mov.w	r2, #0
 80044f0:	f04f 0300 	mov.w	r3, #0
 80044f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80044f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80044fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004500:	ebb2 040a 	subs.w	r4, r2, sl
 8004504:	eb63 050b 	sbc.w	r5, r3, fp
 8004508:	f04f 0200 	mov.w	r2, #0
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	00eb      	lsls	r3, r5, #3
 8004512:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004516:	00e2      	lsls	r2, r4, #3
 8004518:	4614      	mov	r4, r2
 800451a:	461d      	mov	r5, r3
 800451c:	4643      	mov	r3, r8
 800451e:	18e3      	adds	r3, r4, r3
 8004520:	603b      	str	r3, [r7, #0]
 8004522:	464b      	mov	r3, r9
 8004524:	eb45 0303 	adc.w	r3, r5, r3
 8004528:	607b      	str	r3, [r7, #4]
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	f04f 0300 	mov.w	r3, #0
 8004532:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004536:	4629      	mov	r1, r5
 8004538:	028b      	lsls	r3, r1, #10
 800453a:	4621      	mov	r1, r4
 800453c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004540:	4621      	mov	r1, r4
 8004542:	028a      	lsls	r2, r1, #10
 8004544:	4610      	mov	r0, r2
 8004546:	4619      	mov	r1, r3
 8004548:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800454a:	2200      	movs	r2, #0
 800454c:	61bb      	str	r3, [r7, #24]
 800454e:	61fa      	str	r2, [r7, #28]
 8004550:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004554:	f7fc fba8 	bl	8000ca8 <__aeabi_uldivmod>
 8004558:	4602      	mov	r2, r0
 800455a:	460b      	mov	r3, r1
 800455c:	4613      	mov	r3, r2
 800455e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004560:	4b0b      	ldr	r3, [pc, #44]	@ (8004590 <HAL_RCC_GetSysClockFreq+0x200>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	0c1b      	lsrs	r3, r3, #16
 8004566:	f003 0303 	and.w	r3, r3, #3
 800456a:	3301      	adds	r3, #1
 800456c:	005b      	lsls	r3, r3, #1
 800456e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004570:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004574:	fbb2 f3f3 	udiv	r3, r2, r3
 8004578:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800457a:	e002      	b.n	8004582 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800457c:	4b05      	ldr	r3, [pc, #20]	@ (8004594 <HAL_RCC_GetSysClockFreq+0x204>)
 800457e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004580:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004582:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004584:	4618      	mov	r0, r3
 8004586:	3750      	adds	r7, #80	@ 0x50
 8004588:	46bd      	mov	sp, r7
 800458a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800
 8004594:	00f42400 	.word	0x00f42400
 8004598:	007a1200 	.word	0x007a1200

0800459c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045a0:	4b03      	ldr	r3, [pc, #12]	@ (80045b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045a2:	681b      	ldr	r3, [r3, #0]
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	20000004 	.word	0x20000004

080045b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045b8:	f7ff fff0 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045bc:	4602      	mov	r2, r0
 80045be:	4b05      	ldr	r3, [pc, #20]	@ (80045d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	0a9b      	lsrs	r3, r3, #10
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	4903      	ldr	r1, [pc, #12]	@ (80045d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045ca:	5ccb      	ldrb	r3, [r1, r3]
 80045cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	40023800 	.word	0x40023800
 80045d8:	0800aca8 	.word	0x0800aca8

080045dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045e0:	f7ff ffdc 	bl	800459c <HAL_RCC_GetHCLKFreq>
 80045e4:	4602      	mov	r2, r0
 80045e6:	4b05      	ldr	r3, [pc, #20]	@ (80045fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	0b5b      	lsrs	r3, r3, #13
 80045ec:	f003 0307 	and.w	r3, r3, #7
 80045f0:	4903      	ldr	r1, [pc, #12]	@ (8004600 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045f2:	5ccb      	ldrb	r3, [r1, r3]
 80045f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	40023800 	.word	0x40023800
 8004600:	0800aca8 	.word	0x0800aca8

08004604 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b082      	sub	sp, #8
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d101      	bne.n	8004616 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	e041      	b.n	800469a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800461c:	b2db      	uxtb	r3, r3
 800461e:	2b00      	cmp	r3, #0
 8004620:	d106      	bne.n	8004630 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f7fd fd54 	bl	80020d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f000 fc58 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d001      	beq.n	80046bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e04e      	b.n	800475a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2202      	movs	r2, #2
 80046c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68da      	ldr	r2, [r3, #12]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0201 	orr.w	r2, r2, #1
 80046d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a23      	ldr	r2, [pc, #140]	@ (8004768 <HAL_TIM_Base_Start_IT+0xc4>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d022      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046e6:	d01d      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1f      	ldr	r2, [pc, #124]	@ (800476c <HAL_TIM_Base_Start_IT+0xc8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d018      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a1e      	ldr	r2, [pc, #120]	@ (8004770 <HAL_TIM_Base_Start_IT+0xcc>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d013      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <HAL_TIM_Base_Start_IT+0xd0>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d00e      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a1b      	ldr	r2, [pc, #108]	@ (8004778 <HAL_TIM_Base_Start_IT+0xd4>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d009      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a19      	ldr	r2, [pc, #100]	@ (800477c <HAL_TIM_Base_Start_IT+0xd8>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d004      	beq.n	8004724 <HAL_TIM_Base_Start_IT+0x80>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a18      	ldr	r2, [pc, #96]	@ (8004780 <HAL_TIM_Base_Start_IT+0xdc>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d111      	bne.n	8004748 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	2b06      	cmp	r3, #6
 8004734:	d010      	beq.n	8004758 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004746:	e007      	b.n	8004758 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	40010000 	.word	0x40010000
 800476c:	40000400 	.word	0x40000400
 8004770:	40000800 	.word	0x40000800
 8004774:	40000c00 	.word	0x40000c00
 8004778:	40010400 	.word	0x40010400
 800477c:	40014000 	.word	0x40014000
 8004780:	40001800 	.word	0x40001800

08004784 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e041      	b.n	800481a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800479c:	b2db      	uxtb	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7fd fc74 	bl	8002098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2202      	movs	r2, #2
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4619      	mov	r1, r3
 80047c2:	4610      	mov	r0, r2
 80047c4:	f000 fb98 	bl	8004ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d109      	bne.n	8004848 <HAL_TIM_PWM_Start+0x24>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b01      	cmp	r3, #1
 800483e:	bf14      	ite	ne
 8004840:	2301      	movne	r3, #1
 8004842:	2300      	moveq	r3, #0
 8004844:	b2db      	uxtb	r3, r3
 8004846:	e022      	b.n	800488e <HAL_TIM_PWM_Start+0x6a>
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	2b04      	cmp	r3, #4
 800484c:	d109      	bne.n	8004862 <HAL_TIM_PWM_Start+0x3e>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004854:	b2db      	uxtb	r3, r3
 8004856:	2b01      	cmp	r3, #1
 8004858:	bf14      	ite	ne
 800485a:	2301      	movne	r3, #1
 800485c:	2300      	moveq	r3, #0
 800485e:	b2db      	uxtb	r3, r3
 8004860:	e015      	b.n	800488e <HAL_TIM_PWM_Start+0x6a>
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	2b08      	cmp	r3, #8
 8004866:	d109      	bne.n	800487c <HAL_TIM_PWM_Start+0x58>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	bf14      	ite	ne
 8004874:	2301      	movne	r3, #1
 8004876:	2300      	moveq	r3, #0
 8004878:	b2db      	uxtb	r3, r3
 800487a:	e008      	b.n	800488e <HAL_TIM_PWM_Start+0x6a>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b01      	cmp	r3, #1
 8004886:	bf14      	ite	ne
 8004888:	2301      	movne	r3, #1
 800488a:	2300      	moveq	r3, #0
 800488c:	b2db      	uxtb	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e07c      	b.n	8004990 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d104      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x82>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2202      	movs	r2, #2
 80048a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a4:	e013      	b.n	80048ce <HAL_TIM_PWM_Start+0xaa>
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d104      	bne.n	80048b6 <HAL_TIM_PWM_Start+0x92>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048b4:	e00b      	b.n	80048ce <HAL_TIM_PWM_Start+0xaa>
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d104      	bne.n	80048c6 <HAL_TIM_PWM_Start+0xa2>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c4:	e003      	b.n	80048ce <HAL_TIM_PWM_Start+0xaa>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2202      	movs	r2, #2
 80048ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	6839      	ldr	r1, [r7, #0]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fe04 	bl	80054e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a2d      	ldr	r2, [pc, #180]	@ (8004998 <HAL_TIM_PWM_Start+0x174>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d004      	beq.n	80048f0 <HAL_TIM_PWM_Start+0xcc>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a2c      	ldr	r2, [pc, #176]	@ (800499c <HAL_TIM_PWM_Start+0x178>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d101      	bne.n	80048f4 <HAL_TIM_PWM_Start+0xd0>
 80048f0:	2301      	movs	r3, #1
 80048f2:	e000      	b.n	80048f6 <HAL_TIM_PWM_Start+0xd2>
 80048f4:	2300      	movs	r3, #0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d007      	beq.n	800490a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004908:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a22      	ldr	r2, [pc, #136]	@ (8004998 <HAL_TIM_PWM_Start+0x174>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d022      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800491c:	d01d      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a1f      	ldr	r2, [pc, #124]	@ (80049a0 <HAL_TIM_PWM_Start+0x17c>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d018      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a1d      	ldr	r2, [pc, #116]	@ (80049a4 <HAL_TIM_PWM_Start+0x180>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	4a1c      	ldr	r2, [pc, #112]	@ (80049a8 <HAL_TIM_PWM_Start+0x184>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d00e      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a16      	ldr	r2, [pc, #88]	@ (800499c <HAL_TIM_PWM_Start+0x178>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d009      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a18      	ldr	r2, [pc, #96]	@ (80049ac <HAL_TIM_PWM_Start+0x188>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d004      	beq.n	800495a <HAL_TIM_PWM_Start+0x136>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a16      	ldr	r2, [pc, #88]	@ (80049b0 <HAL_TIM_PWM_Start+0x18c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d111      	bne.n	800497e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0307 	and.w	r3, r3, #7
 8004964:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b06      	cmp	r3, #6
 800496a:	d010      	beq.n	800498e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497c:	e007      	b.n	800498e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0201 	orr.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3710      	adds	r7, #16
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40010000 	.word	0x40010000
 800499c:	40010400 	.word	0x40010400
 80049a0:	40000400 	.word	0x40000400
 80049a4:	40000800 	.word	0x40000800
 80049a8:	40000c00 	.word	0x40000c00
 80049ac:	40014000 	.word	0x40014000
 80049b0:	40001800 	.word	0x40001800

080049b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d020      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d01b      	beq.n	8004a18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0202 	mvn.w	r2, #2
 80049e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f003 0303 	and.w	r3, r3, #3
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa5b 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa4d 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa5e 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	f003 0304 	and.w	r3, r3, #4
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d020      	beq.n	8004a64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f003 0304 	and.w	r3, r3, #4
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01b      	beq.n	8004a64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f06f 0204 	mvn.w	r2, #4
 8004a34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d003      	beq.n	8004a52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fa35 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004a50:	e005      	b.n	8004a5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa27 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 fa38 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2200      	movs	r2, #0
 8004a62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	f003 0308 	and.w	r3, r3, #8
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d020      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f003 0308 	and.w	r3, r3, #8
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0208 	mvn.w	r2, #8
 8004a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2204      	movs	r2, #4
 8004a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69db      	ldr	r3, [r3, #28]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 fa0f 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004a9c:	e005      	b.n	8004aaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fa01 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fa12 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 0310 	and.w	r3, r3, #16
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d020      	beq.n	8004afc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f003 0310 	and.w	r3, r3, #16
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d01b      	beq.n	8004afc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0210 	mvn.w	r2, #16
 8004acc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2208      	movs	r2, #8
 8004ad2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 f9e9 	bl	8004eba <HAL_TIM_IC_CaptureCallback>
 8004ae8:	e005      	b.n	8004af6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 f9db 	bl	8004ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 f9ec 	bl	8004ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00c      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d007      	beq.n	8004b20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0201 	mvn.w	r2, #1
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fd f968 	bl	8001df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00c      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d007      	beq.n	8004b44 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fd7c 	bl	800563c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00c      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f9bd 	bl	8004ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00c      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f003 0320 	and.w	r3, r3, #32
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f06f 0220 	mvn.w	r2, #32
 8004b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 fd4e 	bl	8005628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3710      	adds	r7, #16
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e0ae      	b.n	8004d10 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	f200 809f 	bhi.w	8004d00 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc8:	08004bfd 	.word	0x08004bfd
 8004bcc:	08004d01 	.word	0x08004d01
 8004bd0:	08004d01 	.word	0x08004d01
 8004bd4:	08004d01 	.word	0x08004d01
 8004bd8:	08004c3d 	.word	0x08004c3d
 8004bdc:	08004d01 	.word	0x08004d01
 8004be0:	08004d01 	.word	0x08004d01
 8004be4:	08004d01 	.word	0x08004d01
 8004be8:	08004c7f 	.word	0x08004c7f
 8004bec:	08004d01 	.word	0x08004d01
 8004bf0:	08004d01 	.word	0x08004d01
 8004bf4:	08004d01 	.word	0x08004d01
 8004bf8:	08004cbf 	.word	0x08004cbf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa24 	bl	8005050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0208 	orr.w	r2, r2, #8
 8004c16:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699a      	ldr	r2, [r3, #24]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0204 	bic.w	r2, r2, #4
 8004c26:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6999      	ldr	r1, [r3, #24]
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	619a      	str	r2, [r3, #24]
      break;
 8004c3a:	e064      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fa74 	bl	8005130 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699a      	ldr	r2, [r3, #24]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004c56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6999      	ldr	r1, [r3, #24]
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	021a      	lsls	r2, r3, #8
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	619a      	str	r2, [r3, #24]
      break;
 8004c7c:	e043      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 fac9 	bl	800521c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f042 0208 	orr.w	r2, r2, #8
 8004c98:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69da      	ldr	r2, [r3, #28]
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0204 	bic.w	r2, r2, #4
 8004ca8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69d9      	ldr	r1, [r3, #28]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	61da      	str	r2, [r3, #28]
      break;
 8004cbc:	e023      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fb1d 	bl	8005304 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69da      	ldr	r2, [r3, #28]
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cd8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	69da      	ldr	r2, [r3, #28]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ce8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69d9      	ldr	r1, [r3, #28]
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	021a      	lsls	r2, r3, #8
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	61da      	str	r2, [r3, #28]
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	75fb      	strb	r3, [r7, #23]
      break;
 8004d04:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3718      	adds	r7, #24
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
 8004d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d101      	bne.n	8004d34 <HAL_TIM_ConfigClockSource+0x1c>
 8004d30:	2302      	movs	r3, #2
 8004d32:	e0b4      	b.n	8004e9e <HAL_TIM_ConfigClockSource+0x186>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2201      	movs	r2, #1
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2202      	movs	r2, #2
 8004d40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68ba      	ldr	r2, [r7, #8]
 8004d62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d6c:	d03e      	beq.n	8004dec <HAL_TIM_ConfigClockSource+0xd4>
 8004d6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d72:	f200 8087 	bhi.w	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004d76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d7a:	f000 8086 	beq.w	8004e8a <HAL_TIM_ConfigClockSource+0x172>
 8004d7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d82:	d87f      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004d84:	2b70      	cmp	r3, #112	@ 0x70
 8004d86:	d01a      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0xa6>
 8004d88:	2b70      	cmp	r3, #112	@ 0x70
 8004d8a:	d87b      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8c:	2b60      	cmp	r3, #96	@ 0x60
 8004d8e:	d050      	beq.n	8004e32 <HAL_TIM_ConfigClockSource+0x11a>
 8004d90:	2b60      	cmp	r3, #96	@ 0x60
 8004d92:	d877      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004d94:	2b50      	cmp	r3, #80	@ 0x50
 8004d96:	d03c      	beq.n	8004e12 <HAL_TIM_ConfigClockSource+0xfa>
 8004d98:	2b50      	cmp	r3, #80	@ 0x50
 8004d9a:	d873      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004d9c:	2b40      	cmp	r3, #64	@ 0x40
 8004d9e:	d058      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0x13a>
 8004da0:	2b40      	cmp	r3, #64	@ 0x40
 8004da2:	d86f      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004da4:	2b30      	cmp	r3, #48	@ 0x30
 8004da6:	d064      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x15a>
 8004da8:	2b30      	cmp	r3, #48	@ 0x30
 8004daa:	d86b      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004dac:	2b20      	cmp	r3, #32
 8004dae:	d060      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x15a>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d867      	bhi.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d05c      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x15a>
 8004db8:	2b10      	cmp	r3, #16
 8004dba:	d05a      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	e062      	b.n	8004e84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dce:	f000 fb69 	bl	80054a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004de0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	609a      	str	r2, [r3, #8]
      break;
 8004dea:	e04f      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004dfc:	f000 fb52 	bl	80054a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e0e:	609a      	str	r2, [r3, #8]
      break;
 8004e10:	e03c      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e1e:	461a      	mov	r2, r3
 8004e20:	f000 fac6 	bl	80053b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2150      	movs	r1, #80	@ 0x50
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fb1f 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004e30:	e02c      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e3e:	461a      	mov	r2, r3
 8004e40:	f000 fae5 	bl	800540e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2160      	movs	r1, #96	@ 0x60
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fb0f 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004e50:	e01c      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	461a      	mov	r2, r3
 8004e60:	f000 faa6 	bl	80053b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2140      	movs	r1, #64	@ 0x40
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 faff 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004e70:	e00c      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f000 faf6 	bl	800546e <TIM_ITRx_SetConfig>
      break;
 8004e82:	e003      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
      break;
 8004e88:	e000      	b.n	8004e8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eae:	bf00      	nop
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
	...

08004ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a46      	ldr	r2, [pc, #280]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f16:	d00f      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a43      	ldr	r2, [pc, #268]	@ (8005028 <TIM_Base_SetConfig+0x130>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a42      	ldr	r2, [pc, #264]	@ (800502c <TIM_Base_SetConfig+0x134>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a41      	ldr	r2, [pc, #260]	@ (8005030 <TIM_Base_SetConfig+0x138>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_Base_SetConfig+0x40>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a40      	ldr	r2, [pc, #256]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d108      	bne.n	8004f4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a35      	ldr	r2, [pc, #212]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d02b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f58:	d027      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a32      	ldr	r2, [pc, #200]	@ (8005028 <TIM_Base_SetConfig+0x130>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d023      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a31      	ldr	r2, [pc, #196]	@ (800502c <TIM_Base_SetConfig+0x134>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d01f      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a30      	ldr	r2, [pc, #192]	@ (8005030 <TIM_Base_SetConfig+0x138>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a2f      	ldr	r2, [pc, #188]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d017      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2e      	ldr	r2, [pc, #184]	@ (8005038 <TIM_Base_SetConfig+0x140>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2d      	ldr	r2, [pc, #180]	@ (800503c <TIM_Base_SetConfig+0x144>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d00f      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8005040 <TIM_Base_SetConfig+0x148>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00b      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2b      	ldr	r2, [pc, #172]	@ (8005044 <TIM_Base_SetConfig+0x14c>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d007      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <TIM_Base_SetConfig+0x150>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d003      	beq.n	8004faa <TIM_Base_SetConfig+0xb2>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a29      	ldr	r2, [pc, #164]	@ (800504c <TIM_Base_SetConfig+0x154>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d108      	bne.n	8004fbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	68fa      	ldr	r2, [r7, #12]
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	695b      	ldr	r3, [r3, #20]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689a      	ldr	r2, [r3, #8]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	4a10      	ldr	r2, [pc, #64]	@ (8005024 <TIM_Base_SetConfig+0x12c>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d003      	beq.n	8004ff0 <TIM_Base_SetConfig+0xf8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a12      	ldr	r2, [pc, #72]	@ (8005034 <TIM_Base_SetConfig+0x13c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d103      	bne.n	8004ff8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	691a      	ldr	r2, [r3, #16]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b01      	cmp	r3, #1
 8005008:	d105      	bne.n	8005016 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f023 0201 	bic.w	r2, r3, #1
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	611a      	str	r2, [r3, #16]
  }
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
 8005022:	bf00      	nop
 8005024:	40010000 	.word	0x40010000
 8005028:	40000400 	.word	0x40000400
 800502c:	40000800 	.word	0x40000800
 8005030:	40000c00 	.word	0x40000c00
 8005034:	40010400 	.word	0x40010400
 8005038:	40014000 	.word	0x40014000
 800503c:	40014400 	.word	0x40014400
 8005040:	40014800 	.word	0x40014800
 8005044:	40001800 	.word	0x40001800
 8005048:	40001c00 	.word	0x40001c00
 800504c:	40002000 	.word	0x40002000

08005050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005050:	b480      	push	{r7}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
 800505e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	f023 0201 	bic.w	r2, r3, #1
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f023 0303 	bic.w	r3, r3, #3
 8005086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4313      	orrs	r3, r2
 8005090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	f023 0302 	bic.w	r3, r3, #2
 8005098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	4a20      	ldr	r2, [pc, #128]	@ (8005128 <TIM_OC1_SetConfig+0xd8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d003      	beq.n	80050b4 <TIM_OC1_SetConfig+0x64>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a1f      	ldr	r2, [pc, #124]	@ (800512c <TIM_OC1_SetConfig+0xdc>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10c      	bne.n	80050ce <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	f023 0308 	bic.w	r3, r3, #8
 80050ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f023 0304 	bic.w	r3, r3, #4
 80050cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a15      	ldr	r2, [pc, #84]	@ (8005128 <TIM_OC1_SetConfig+0xd8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_OC1_SetConfig+0x8e>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a14      	ldr	r2, [pc, #80]	@ (800512c <TIM_OC1_SetConfig+0xdc>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d111      	bne.n	8005102 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	693a      	ldr	r2, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	699b      	ldr	r3, [r3, #24]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	68fa      	ldr	r2, [r7, #12]
 800510c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	621a      	str	r2, [r3, #32]
}
 800511c:	bf00      	nop
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr
 8005128:	40010000 	.word	0x40010000
 800512c:	40010400 	.word	0x40010400

08005130 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005130:	b480      	push	{r7}
 8005132:	b087      	sub	sp, #28
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	f023 0210 	bic.w	r2, r3, #16
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800515e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	021b      	lsls	r3, r3, #8
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	4313      	orrs	r3, r2
 8005172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	f023 0320 	bic.w	r3, r3, #32
 800517a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	4313      	orrs	r3, r2
 8005186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a22      	ldr	r2, [pc, #136]	@ (8005214 <TIM_OC2_SetConfig+0xe4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d003      	beq.n	8005198 <TIM_OC2_SetConfig+0x68>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a21      	ldr	r2, [pc, #132]	@ (8005218 <TIM_OC2_SetConfig+0xe8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10d      	bne.n	80051b4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800519e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	697a      	ldr	r2, [r7, #20]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a17      	ldr	r2, [pc, #92]	@ (8005214 <TIM_OC2_SetConfig+0xe4>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d003      	beq.n	80051c4 <TIM_OC2_SetConfig+0x94>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a16      	ldr	r2, [pc, #88]	@ (8005218 <TIM_OC2_SetConfig+0xe8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d113      	bne.n	80051ec <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80051ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	695b      	ldr	r3, [r3, #20]
 80051d8:	009b      	lsls	r3, r3, #2
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	4313      	orrs	r3, r2
 80051de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	4313      	orrs	r3, r2
 80051ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	621a      	str	r2, [r3, #32]
}
 8005206:	bf00      	nop
 8005208:	371c      	adds	r7, #28
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	40010000 	.word	0x40010000
 8005218:	40010400 	.word	0x40010400

0800521c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6a1b      	ldr	r3, [r3, #32]
 8005230:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	021b      	lsls	r3, r3, #8
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	4313      	orrs	r3, r2
 8005270:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a21      	ldr	r2, [pc, #132]	@ (80052fc <TIM_OC3_SetConfig+0xe0>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d003      	beq.n	8005282 <TIM_OC3_SetConfig+0x66>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <TIM_OC3_SetConfig+0xe4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d10d      	bne.n	800529e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005288:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	68db      	ldr	r3, [r3, #12]
 800528e:	021b      	lsls	r3, r3, #8
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800529c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a16      	ldr	r2, [pc, #88]	@ (80052fc <TIM_OC3_SetConfig+0xe0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d003      	beq.n	80052ae <TIM_OC3_SetConfig+0x92>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <TIM_OC3_SetConfig+0xe4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d113      	bne.n	80052d6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80052b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80052bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	693a      	ldr	r2, [r7, #16]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	693a      	ldr	r2, [r7, #16]
 80052da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	697a      	ldr	r2, [r7, #20]
 80052ee:	621a      	str	r2, [r3, #32]
}
 80052f0:	bf00      	nop
 80052f2:	371c      	adds	r7, #28
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	40010000 	.word	0x40010000
 8005300:	40010400 	.word	0x40010400

08005304 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6a1b      	ldr	r3, [r3, #32]
 8005318:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800533a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	68fa      	ldr	r2, [r7, #12]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800534e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	031b      	lsls	r3, r3, #12
 8005356:	693a      	ldr	r2, [r7, #16]
 8005358:	4313      	orrs	r3, r2
 800535a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a12      	ldr	r2, [pc, #72]	@ (80053a8 <TIM_OC4_SetConfig+0xa4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d003      	beq.n	800536c <TIM_OC4_SetConfig+0x68>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a11      	ldr	r2, [pc, #68]	@ (80053ac <TIM_OC4_SetConfig+0xa8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d109      	bne.n	8005380 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005372:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	695b      	ldr	r3, [r3, #20]
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	697a      	ldr	r2, [r7, #20]
 800537c:	4313      	orrs	r3, r2
 800537e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	6a1b      	ldr	r3, [r3, #32]
 80053c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f023 0201 	bic.w	r2, r3, #1
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	699b      	ldr	r3, [r3, #24]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	f023 030a 	bic.w	r3, r3, #10
 80053ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053ee:	697a      	ldr	r2, [r7, #20]
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	621a      	str	r2, [r3, #32]
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a1b      	ldr	r3, [r3, #32]
 8005424:	f023 0210 	bic.w	r2, r3, #16
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005438:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	031b      	lsls	r3, r3, #12
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800544a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	011b      	lsls	r3, r3, #4
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800546e:	b480      	push	{r7}
 8005470:	b085      	sub	sp, #20
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
 8005476:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005484:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005486:	683a      	ldr	r2, [r7, #0]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	4313      	orrs	r3, r2
 800548c:	f043 0307 	orr.w	r3, r3, #7
 8005490:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	609a      	str	r2, [r3, #8]
}
 8005498:	bf00      	nop
 800549a:	3714      	adds	r7, #20
 800549c:	46bd      	mov	sp, r7
 800549e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a2:	4770      	bx	lr

080054a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b087      	sub	sp, #28
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80054be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	021a      	lsls	r2, r3, #8
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	4313      	orrs	r3, r2
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	697a      	ldr	r2, [r7, #20]
 80054d6:	609a      	str	r2, [r3, #8]
}
 80054d8:	bf00      	nop
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b087      	sub	sp, #28
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2201      	movs	r2, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6a1a      	ldr	r2, [r3, #32]
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6a1a      	ldr	r2, [r3, #32]
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	6879      	ldr	r1, [r7, #4]
 8005518:	fa01 f303 	lsl.w	r3, r1, r3
 800551c:	431a      	orrs	r2, r3
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
	...

08005530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005540:	2b01      	cmp	r3, #1
 8005542:	d101      	bne.n	8005548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005544:	2302      	movs	r3, #2
 8005546:	e05a      	b.n	80055fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2202      	movs	r2, #2
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a21      	ldr	r2, [pc, #132]	@ (800560c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005594:	d01d      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1d      	ldr	r2, [pc, #116]	@ (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1b      	ldr	r2, [pc, #108]	@ (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a1a      	ldr	r2, [pc, #104]	@ (8005618 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a18      	ldr	r2, [pc, #96]	@ (800561c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a17      	ldr	r2, [pc, #92]	@ (8005620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a15      	ldr	r2, [pc, #84]	@ (8005624 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10c      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3714      	adds	r7, #20
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40010000 	.word	0x40010000
 8005610:	40000400 	.word	0x40000400
 8005614:	40000800 	.word	0x40000800
 8005618:	40000c00 	.word	0x40000c00
 800561c:	40010400 	.word	0x40010400
 8005620:	40014000 	.word	0x40014000
 8005624:	40001800 	.word	0x40001800

08005628 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e042      	b.n	80056e8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d106      	bne.n	800567c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7fc fd8e 	bl	8002198 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2224      	movs	r2, #36	@ 0x24
 8005680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68da      	ldr	r2, [r3, #12]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005692:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f000 f973 	bl	8005980 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	691a      	ldr	r2, [r3, #16]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	695a      	ldr	r2, [r3, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68da      	ldr	r2, [r3, #12]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2220      	movs	r2, #32
 80056d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2220      	movs	r2, #32
 80056dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056e6:	2300      	movs	r3, #0
}
 80056e8:	4618      	mov	r0, r3
 80056ea:	3708      	adds	r7, #8
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bd80      	pop	{r7, pc}

080056f0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	@ 0x28
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	603b      	str	r3, [r7, #0]
 80056fc:	4613      	mov	r3, r2
 80056fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b20      	cmp	r3, #32
 800570e:	d175      	bne.n	80057fc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d002      	beq.n	800571c <HAL_UART_Transmit+0x2c>
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e06e      	b.n	80057fe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2200      	movs	r2, #0
 8005724:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2221      	movs	r2, #33	@ 0x21
 800572a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800572e:	f7fc ff77 	bl	8002620 <HAL_GetTick>
 8005732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	88fa      	ldrh	r2, [r7, #6]
 8005738:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	88fa      	ldrh	r2, [r7, #6]
 800573e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005748:	d108      	bne.n	800575c <HAL_UART_Transmit+0x6c>
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	691b      	ldr	r3, [r3, #16]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005752:	2300      	movs	r3, #0
 8005754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	61bb      	str	r3, [r7, #24]
 800575a:	e003      	b.n	8005764 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005760:	2300      	movs	r3, #0
 8005762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005764:	e02e      	b.n	80057c4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	2200      	movs	r2, #0
 800576e:	2180      	movs	r1, #128	@ 0x80
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f848 	bl	8005806 <UART_WaitOnFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d005      	beq.n	8005788 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005784:	2303      	movs	r3, #3
 8005786:	e03a      	b.n	80057fe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d10b      	bne.n	80057a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	881b      	ldrh	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800579c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800579e:	69bb      	ldr	r3, [r7, #24]
 80057a0:	3302      	adds	r3, #2
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e007      	b.n	80057b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	781a      	ldrb	r2, [r3, #0]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1cb      	bne.n	8005766 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2200      	movs	r2, #0
 80057d6:	2140      	movs	r1, #64	@ 0x40
 80057d8:	68f8      	ldr	r0, [r7, #12]
 80057da:	f000 f814 	bl	8005806 <UART_WaitOnFlagUntilTimeout>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2220      	movs	r2, #32
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80057ec:	2303      	movs	r3, #3
 80057ee:	e006      	b.n	80057fe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2220      	movs	r2, #32
 80057f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80057f8:	2300      	movs	r3, #0
 80057fa:	e000      	b.n	80057fe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80057fc:	2302      	movs	r3, #2
  }
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3720      	adds	r7, #32
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}

08005806 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b086      	sub	sp, #24
 800580a:	af00      	add	r7, sp, #0
 800580c:	60f8      	str	r0, [r7, #12]
 800580e:	60b9      	str	r1, [r7, #8]
 8005810:	603b      	str	r3, [r7, #0]
 8005812:	4613      	mov	r3, r2
 8005814:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005816:	e03b      	b.n	8005890 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800581e:	d037      	beq.n	8005890 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005820:	f7fc fefe 	bl	8002620 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	6a3a      	ldr	r2, [r7, #32]
 800582c:	429a      	cmp	r2, r3
 800582e:	d302      	bcc.n	8005836 <UART_WaitOnFlagUntilTimeout+0x30>
 8005830:	6a3b      	ldr	r3, [r7, #32]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d101      	bne.n	800583a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e03a      	b.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0304 	and.w	r3, r3, #4
 8005844:	2b00      	cmp	r3, #0
 8005846:	d023      	beq.n	8005890 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b80      	cmp	r3, #128	@ 0x80
 800584c:	d020      	beq.n	8005890 <UART_WaitOnFlagUntilTimeout+0x8a>
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d01d      	beq.n	8005890 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b08      	cmp	r3, #8
 8005860:	d116      	bne.n	8005890 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005862:	2300      	movs	r3, #0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	617b      	str	r3, [r7, #20]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	617b      	str	r3, [r7, #20]
 8005876:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f000 f81d 	bl	80058b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2208      	movs	r2, #8
 8005882:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00f      	b.n	80058b0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	4013      	ands	r3, r2
 800589a:	68ba      	ldr	r2, [r7, #8]
 800589c:	429a      	cmp	r2, r3
 800589e:	bf0c      	ite	eq
 80058a0:	2301      	moveq	r3, #1
 80058a2:	2300      	movne	r3, #0
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	79fb      	ldrb	r3, [r7, #7]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d0b4      	beq.n	8005818 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058ae:	2300      	movs	r3, #0
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b095      	sub	sp, #84	@ 0x54
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	330c      	adds	r3, #12
 80058c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058ca:	e853 3f00 	ldrex	r3, [r3]
 80058ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80058d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	330c      	adds	r3, #12
 80058de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80058e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80058e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80058e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80058e8:	e841 2300 	strex	r3, r2, [r1]
 80058ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80058ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1e5      	bne.n	80058c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	3314      	adds	r3, #20
 80058fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fc:	6a3b      	ldr	r3, [r7, #32]
 80058fe:	e853 3f00 	ldrex	r3, [r3]
 8005902:	61fb      	str	r3, [r7, #28]
   return(result);
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	f023 0301 	bic.w	r3, r3, #1
 800590a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	3314      	adds	r3, #20
 8005912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800591a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800591c:	e841 2300 	strex	r3, r2, [r1]
 8005920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1e5      	bne.n	80058f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592c:	2b01      	cmp	r3, #1
 800592e:	d119      	bne.n	8005964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	330c      	adds	r3, #12
 8005936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	e853 3f00 	ldrex	r3, [r3]
 800593e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	f023 0310 	bic.w	r3, r3, #16
 8005946:	647b      	str	r3, [r7, #68]	@ 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	330c      	adds	r3, #12
 800594e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005950:	61ba      	str	r2, [r7, #24]
 8005952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005954:	6979      	ldr	r1, [r7, #20]
 8005956:	69ba      	ldr	r2, [r7, #24]
 8005958:	e841 2300 	strex	r3, r2, [r1]
 800595c:	613b      	str	r3, [r7, #16]
   return(result);
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1e5      	bne.n	8005930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005972:	bf00      	nop
 8005974:	3754      	adds	r7, #84	@ 0x54
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
	...

08005980 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005984:	b0c0      	sub	sp, #256	@ 0x100
 8005986:	af00      	add	r7, sp, #0
 8005988:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800598c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800599c:	68d9      	ldr	r1, [r3, #12]
 800599e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	ea40 0301 	orr.w	r3, r0, r1
 80059a8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ae:	689a      	ldr	r2, [r3, #8]
 80059b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	431a      	orrs	r2, r3
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80059d8:	f021 010c 	bic.w	r1, r1, #12
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80059e6:	430b      	orrs	r3, r1
 80059e8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80059f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059fa:	6999      	ldr	r1, [r3, #24]
 80059fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	ea40 0301 	orr.w	r3, r0, r1
 8005a06:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	4b8f      	ldr	r3, [pc, #572]	@ (8005c4c <UART_SetConfig+0x2cc>)
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d005      	beq.n	8005a20 <UART_SetConfig+0xa0>
 8005a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b8d      	ldr	r3, [pc, #564]	@ (8005c50 <UART_SetConfig+0x2d0>)
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d104      	bne.n	8005a2a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a20:	f7fe fddc 	bl	80045dc <HAL_RCC_GetPCLK2Freq>
 8005a24:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a28:	e003      	b.n	8005a32 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a2a:	f7fe fdc3 	bl	80045b4 <HAL_RCC_GetPCLK1Freq>
 8005a2e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3c:	f040 810c 	bne.w	8005c58 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a44:	2200      	movs	r2, #0
 8005a46:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a4a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a4e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a52:	4622      	mov	r2, r4
 8005a54:	462b      	mov	r3, r5
 8005a56:	1891      	adds	r1, r2, r2
 8005a58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a5a:	415b      	adcs	r3, r3
 8005a5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a5e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a62:	4621      	mov	r1, r4
 8005a64:	eb12 0801 	adds.w	r8, r2, r1
 8005a68:	4629      	mov	r1, r5
 8005a6a:	eb43 0901 	adc.w	r9, r3, r1
 8005a6e:	f04f 0200 	mov.w	r2, #0
 8005a72:	f04f 0300 	mov.w	r3, #0
 8005a76:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005a7a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005a7e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005a82:	4690      	mov	r8, r2
 8005a84:	4699      	mov	r9, r3
 8005a86:	4623      	mov	r3, r4
 8005a88:	eb18 0303 	adds.w	r3, r8, r3
 8005a8c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a90:	462b      	mov	r3, r5
 8005a92:	eb49 0303 	adc.w	r3, r9, r3
 8005a96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005aa6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005aaa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005aae:	460b      	mov	r3, r1
 8005ab0:	18db      	adds	r3, r3, r3
 8005ab2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	eb42 0303 	adc.w	r3, r2, r3
 8005aba:	657b      	str	r3, [r7, #84]	@ 0x54
 8005abc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005ac0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ac4:	f7fb f8f0 	bl	8000ca8 <__aeabi_uldivmod>
 8005ac8:	4602      	mov	r2, r0
 8005aca:	460b      	mov	r3, r1
 8005acc:	4b61      	ldr	r3, [pc, #388]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005ace:	fba3 2302 	umull	r2, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	011c      	lsls	r4, r3, #4
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ada:	2200      	movs	r2, #0
 8005adc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ae0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ae4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ae8:	4642      	mov	r2, r8
 8005aea:	464b      	mov	r3, r9
 8005aec:	1891      	adds	r1, r2, r2
 8005aee:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005af0:	415b      	adcs	r3, r3
 8005af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005af8:	4641      	mov	r1, r8
 8005afa:	eb12 0a01 	adds.w	sl, r2, r1
 8005afe:	4649      	mov	r1, r9
 8005b00:	eb43 0b01 	adc.w	fp, r3, r1
 8005b04:	f04f 0200 	mov.w	r2, #0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b10:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b18:	4692      	mov	sl, r2
 8005b1a:	469b      	mov	fp, r3
 8005b1c:	4643      	mov	r3, r8
 8005b1e:	eb1a 0303 	adds.w	r3, sl, r3
 8005b22:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b26:	464b      	mov	r3, r9
 8005b28:	eb4b 0303 	adc.w	r3, fp, r3
 8005b2c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b3c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b40:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b44:	460b      	mov	r3, r1
 8005b46:	18db      	adds	r3, r3, r3
 8005b48:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	eb42 0303 	adc.w	r3, r2, r3
 8005b50:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b52:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b56:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b5a:	f7fb f8a5 	bl	8000ca8 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4611      	mov	r1, r2
 8005b64:	4b3b      	ldr	r3, [pc, #236]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005b66:	fba3 2301 	umull	r2, r3, r3, r1
 8005b6a:	095b      	lsrs	r3, r3, #5
 8005b6c:	2264      	movs	r2, #100	@ 0x64
 8005b6e:	fb02 f303 	mul.w	r3, r2, r3
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	00db      	lsls	r3, r3, #3
 8005b76:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005b7a:	4b36      	ldr	r3, [pc, #216]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005b7c:	fba3 2302 	umull	r2, r3, r3, r2
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	005b      	lsls	r3, r3, #1
 8005b84:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005b88:	441c      	add	r4, r3
 8005b8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005b94:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005b98:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	1891      	adds	r1, r2, r2
 8005ba2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ba4:	415b      	adcs	r3, r3
 8005ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ba8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005bac:	4641      	mov	r1, r8
 8005bae:	1851      	adds	r1, r2, r1
 8005bb0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005bb2:	4649      	mov	r1, r9
 8005bb4:	414b      	adcs	r3, r1
 8005bb6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bb8:	f04f 0200 	mov.w	r2, #0
 8005bbc:	f04f 0300 	mov.w	r3, #0
 8005bc0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bc4:	4659      	mov	r1, fp
 8005bc6:	00cb      	lsls	r3, r1, #3
 8005bc8:	4651      	mov	r1, sl
 8005bca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bce:	4651      	mov	r1, sl
 8005bd0:	00ca      	lsls	r2, r1, #3
 8005bd2:	4610      	mov	r0, r2
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	4642      	mov	r2, r8
 8005bda:	189b      	adds	r3, r3, r2
 8005bdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005be0:	464b      	mov	r3, r9
 8005be2:	460a      	mov	r2, r1
 8005be4:	eb42 0303 	adc.w	r3, r2, r3
 8005be8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bf8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005bfc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c00:	460b      	mov	r3, r1
 8005c02:	18db      	adds	r3, r3, r3
 8005c04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c06:	4613      	mov	r3, r2
 8005c08:	eb42 0303 	adc.w	r3, r2, r3
 8005c0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c12:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c16:	f7fb f847 	bl	8000ca8 <__aeabi_uldivmod>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005c20:	fba3 1302 	umull	r1, r3, r3, r2
 8005c24:	095b      	lsrs	r3, r3, #5
 8005c26:	2164      	movs	r1, #100	@ 0x64
 8005c28:	fb01 f303 	mul.w	r3, r1, r3
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	00db      	lsls	r3, r3, #3
 8005c30:	3332      	adds	r3, #50	@ 0x32
 8005c32:	4a08      	ldr	r2, [pc, #32]	@ (8005c54 <UART_SetConfig+0x2d4>)
 8005c34:	fba2 2303 	umull	r2, r3, r2, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	f003 0207 	and.w	r2, r3, #7
 8005c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4422      	add	r2, r4
 8005c46:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c48:	e106      	b.n	8005e58 <UART_SetConfig+0x4d8>
 8005c4a:	bf00      	nop
 8005c4c:	40011000 	.word	0x40011000
 8005c50:	40011400 	.word	0x40011400
 8005c54:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c62:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c66:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c6a:	4642      	mov	r2, r8
 8005c6c:	464b      	mov	r3, r9
 8005c6e:	1891      	adds	r1, r2, r2
 8005c70:	6239      	str	r1, [r7, #32]
 8005c72:	415b      	adcs	r3, r3
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005c7a:	4641      	mov	r1, r8
 8005c7c:	1854      	adds	r4, r2, r1
 8005c7e:	4649      	mov	r1, r9
 8005c80:	eb43 0501 	adc.w	r5, r3, r1
 8005c84:	f04f 0200 	mov.w	r2, #0
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	00eb      	lsls	r3, r5, #3
 8005c8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c92:	00e2      	lsls	r2, r4, #3
 8005c94:	4614      	mov	r4, r2
 8005c96:	461d      	mov	r5, r3
 8005c98:	4643      	mov	r3, r8
 8005c9a:	18e3      	adds	r3, r4, r3
 8005c9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	eb45 0303 	adc.w	r3, r5, r3
 8005ca6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cc6:	4629      	mov	r1, r5
 8005cc8:	008b      	lsls	r3, r1, #2
 8005cca:	4621      	mov	r1, r4
 8005ccc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	008a      	lsls	r2, r1, #2
 8005cd4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005cd8:	f7fa ffe6 	bl	8000ca8 <__aeabi_uldivmod>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4b60      	ldr	r3, [pc, #384]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005ce2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ce6:	095b      	lsrs	r3, r3, #5
 8005ce8:	011c      	lsls	r4, r3, #4
 8005cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005cf4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005cf8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005cfc:	4642      	mov	r2, r8
 8005cfe:	464b      	mov	r3, r9
 8005d00:	1891      	adds	r1, r2, r2
 8005d02:	61b9      	str	r1, [r7, #24]
 8005d04:	415b      	adcs	r3, r3
 8005d06:	61fb      	str	r3, [r7, #28]
 8005d08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d0c:	4641      	mov	r1, r8
 8005d0e:	1851      	adds	r1, r2, r1
 8005d10:	6139      	str	r1, [r7, #16]
 8005d12:	4649      	mov	r1, r9
 8005d14:	414b      	adcs	r3, r1
 8005d16:	617b      	str	r3, [r7, #20]
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d24:	4659      	mov	r1, fp
 8005d26:	00cb      	lsls	r3, r1, #3
 8005d28:	4651      	mov	r1, sl
 8005d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d2e:	4651      	mov	r1, sl
 8005d30:	00ca      	lsls	r2, r1, #3
 8005d32:	4610      	mov	r0, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	4603      	mov	r3, r0
 8005d38:	4642      	mov	r2, r8
 8005d3a:	189b      	adds	r3, r3, r2
 8005d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d40:	464b      	mov	r3, r9
 8005d42:	460a      	mov	r2, r1
 8005d44:	eb42 0303 	adc.w	r3, r2, r3
 8005d48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d56:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	f04f 0300 	mov.w	r3, #0
 8005d60:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d64:	4649      	mov	r1, r9
 8005d66:	008b      	lsls	r3, r1, #2
 8005d68:	4641      	mov	r1, r8
 8005d6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d6e:	4641      	mov	r1, r8
 8005d70:	008a      	lsls	r2, r1, #2
 8005d72:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005d76:	f7fa ff97 	bl	8000ca8 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4b38      	ldr	r3, [pc, #224]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005d82:	fba3 2301 	umull	r2, r3, r3, r1
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2264      	movs	r2, #100	@ 0x64
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	1acb      	subs	r3, r1, r3
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	3332      	adds	r3, #50	@ 0x32
 8005d94:	4a33      	ldr	r2, [pc, #204]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005d96:	fba2 2303 	umull	r2, r3, r2, r3
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005da0:	441c      	add	r4, r3
 8005da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da6:	2200      	movs	r2, #0
 8005da8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005daa:	677a      	str	r2, [r7, #116]	@ 0x74
 8005dac:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	415b      	adcs	r3, r3
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	1851      	adds	r1, r2, r1
 8005dc4:	6039      	str	r1, [r7, #0]
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	414b      	adcs	r3, r1
 8005dca:	607b      	str	r3, [r7, #4]
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005dd8:	4659      	mov	r1, fp
 8005dda:	00cb      	lsls	r3, r1, #3
 8005ddc:	4651      	mov	r1, sl
 8005dde:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005de2:	4651      	mov	r1, sl
 8005de4:	00ca      	lsls	r2, r1, #3
 8005de6:	4610      	mov	r0, r2
 8005de8:	4619      	mov	r1, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	4642      	mov	r2, r8
 8005dee:	189b      	adds	r3, r3, r2
 8005df0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005df2:	464b      	mov	r3, r9
 8005df4:	460a      	mov	r2, r1
 8005df6:	eb42 0303 	adc.w	r3, r2, r3
 8005dfa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e06:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	f04f 0300 	mov.w	r3, #0
 8005e10:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e14:	4649      	mov	r1, r9
 8005e16:	008b      	lsls	r3, r1, #2
 8005e18:	4641      	mov	r1, r8
 8005e1a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e1e:	4641      	mov	r1, r8
 8005e20:	008a      	lsls	r2, r1, #2
 8005e22:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e26:	f7fa ff3f 	bl	8000ca8 <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005e30:	fba3 1302 	umull	r1, r3, r3, r2
 8005e34:	095b      	lsrs	r3, r3, #5
 8005e36:	2164      	movs	r1, #100	@ 0x64
 8005e38:	fb01 f303 	mul.w	r3, r1, r3
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	011b      	lsls	r3, r3, #4
 8005e40:	3332      	adds	r3, #50	@ 0x32
 8005e42:	4a08      	ldr	r2, [pc, #32]	@ (8005e64 <UART_SetConfig+0x4e4>)
 8005e44:	fba2 2303 	umull	r2, r3, r2, r3
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	f003 020f 	and.w	r2, r3, #15
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4422      	add	r2, r4
 8005e56:	609a      	str	r2, [r3, #8]
}
 8005e58:	bf00      	nop
 8005e5a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e64:	51eb851f 	.word	0x51eb851f

08005e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e68:	b084      	sub	sp, #16
 8005e6a:	b580      	push	{r7, lr}
 8005e6c:	b084      	sub	sp, #16
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	f107 001c 	add.w	r0, r7, #28
 8005e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005e7a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d123      	bne.n	8005eca <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005e96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d105      	bne.n	8005ebe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 faa0 	bl	8006404 <USB_CoreReset>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	73fb      	strb	r3, [r7, #15]
 8005ec8:	e01b      	b.n	8005f02 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa94 	bl	8006404 <USB_CoreReset>
 8005edc:	4603      	mov	r3, r0
 8005ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005ee0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ef4:	e005      	b.n	8005f02 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005efa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f02:	7fbb      	ldrb	r3, [r7, #30]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d10b      	bne.n	8005f20 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f043 0206 	orr.w	r2, r3, #6
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	f043 0220 	orr.w	r2, r3, #32
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f2c:	b004      	add	sp, #16
 8005f2e:	4770      	bx	lr

08005f30 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f023 0201 	bic.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
 8005f5a:	460b      	mov	r3, r1
 8005f5c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f6e:	78fb      	ldrb	r3, [r7, #3]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d115      	bne.n	8005fa0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005f80:	200a      	movs	r0, #10
 8005f82:	f7fc fb59 	bl	8002638 <HAL_Delay>
      ms += 10U;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	330a      	adds	r3, #10
 8005f8a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa2b 	bl	80063e8 <USB_GetMode>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d01e      	beq.n	8005fd6 <USB_SetCurrentMode+0x84>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2bc7      	cmp	r3, #199	@ 0xc7
 8005f9c:	d9f0      	bls.n	8005f80 <USB_SetCurrentMode+0x2e>
 8005f9e:	e01a      	b.n	8005fd6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fa0:	78fb      	ldrb	r3, [r7, #3]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d115      	bne.n	8005fd2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005fb2:	200a      	movs	r0, #10
 8005fb4:	f7fc fb40 	bl	8002638 <HAL_Delay>
      ms += 10U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	330a      	adds	r3, #10
 8005fbc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa12 	bl	80063e8 <USB_GetMode>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d005      	beq.n	8005fd6 <USB_SetCurrentMode+0x84>
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2bc7      	cmp	r3, #199	@ 0xc7
 8005fce:	d9f0      	bls.n	8005fb2 <USB_SetCurrentMode+0x60>
 8005fd0:	e001      	b.n	8005fd6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e005      	b.n	8005fe2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2bc8      	cmp	r3, #200	@ 0xc8
 8005fda:	d101      	bne.n	8005fe0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fec:	b084      	sub	sp, #16
 8005fee:	b580      	push	{r7, lr}
 8005ff0:	b086      	sub	sp, #24
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006006:	2300      	movs	r3, #0
 8006008:	613b      	str	r3, [r7, #16]
 800600a:	e009      	b.n	8006020 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	3340      	adds	r3, #64	@ 0x40
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	2200      	movs	r2, #0
 8006018:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	3301      	adds	r3, #1
 800601e:	613b      	str	r3, [r7, #16]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	2b0e      	cmp	r3, #14
 8006024:	d9f2      	bls.n	800600c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006026:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800602a:	2b00      	cmp	r3, #0
 800602c:	d11c      	bne.n	8006068 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	68fa      	ldr	r2, [r7, #12]
 8006038:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800603c:	f043 0302 	orr.w	r3, r3, #2
 8006040:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006046:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006052:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800605e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	639a      	str	r2, [r3, #56]	@ 0x38
 8006066:	e00b      	b.n	8006080 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006086:	461a      	mov	r2, r3
 8006088:	2300      	movs	r3, #0
 800608a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800608c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006090:	2b01      	cmp	r3, #1
 8006092:	d10d      	bne.n	80060b0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006094:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006098:	2b00      	cmp	r3, #0
 800609a:	d104      	bne.n	80060a6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800609c:	2100      	movs	r1, #0
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f968 	bl	8006374 <USB_SetDevSpeed>
 80060a4:	e008      	b.n	80060b8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060a6:	2101      	movs	r1, #1
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f963 	bl	8006374 <USB_SetDevSpeed>
 80060ae:	e003      	b.n	80060b8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060b0:	2103      	movs	r1, #3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f95e 	bl	8006374 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060b8:	2110      	movs	r1, #16
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f8fa 	bl	80062b4 <USB_FlushTxFifo>
 80060c0:	4603      	mov	r3, r0
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d001      	beq.n	80060ca <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f924 	bl	8006318 <USB_FlushRxFifo>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060e0:	461a      	mov	r2, r3
 80060e2:	2300      	movs	r3, #0
 80060e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060ec:	461a      	mov	r2, r3
 80060ee:	2300      	movs	r3, #0
 80060f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80060f8:	461a      	mov	r2, r3
 80060fa:	2300      	movs	r3, #0
 80060fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
 8006102:	e043      	b.n	800618c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006116:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800611a:	d118      	bne.n	800614e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10a      	bne.n	8006138 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612e:	461a      	mov	r2, r3
 8006130:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	e013      	b.n	8006160 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	015a      	lsls	r2, r3, #5
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	4413      	add	r3, r2
 8006140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006144:	461a      	mov	r2, r3
 8006146:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800614a:	6013      	str	r3, [r2, #0]
 800614c:	e008      	b.n	8006160 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615a:	461a      	mov	r2, r3
 800615c:	2300      	movs	r3, #0
 800615e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	015a      	lsls	r2, r3, #5
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	4413      	add	r3, r2
 8006168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800616c:	461a      	mov	r2, r3
 800616e:	2300      	movs	r3, #0
 8006170:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	015a      	lsls	r2, r3, #5
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	4413      	add	r3, r2
 800617a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617e:	461a      	mov	r2, r3
 8006180:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006184:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006190:	461a      	mov	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	4293      	cmp	r3, r2
 8006196:	d3b5      	bcc.n	8006104 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006198:	2300      	movs	r3, #0
 800619a:	613b      	str	r3, [r7, #16]
 800619c:	e043      	b.n	8006226 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80061b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80061b4:	d118      	bne.n	80061e8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061c8:	461a      	mov	r2, r3
 80061ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80061ce:	6013      	str	r3, [r2, #0]
 80061d0:	e013      	b.n	80061fa <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	015a      	lsls	r2, r3, #5
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061de:	461a      	mov	r2, r3
 80061e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	e008      	b.n	80061fa <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061f4:	461a      	mov	r2, r3
 80061f6:	2300      	movs	r3, #0
 80061f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	015a      	lsls	r2, r3, #5
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4413      	add	r3, r2
 8006202:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006206:	461a      	mov	r2, r3
 8006208:	2300      	movs	r3, #0
 800620a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	015a      	lsls	r2, r3, #5
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4413      	add	r3, r2
 8006214:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006218:	461a      	mov	r2, r3
 800621a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800621e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	3301      	adds	r3, #1
 8006224:	613b      	str	r3, [r7, #16]
 8006226:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800622a:	461a      	mov	r2, r3
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4293      	cmp	r3, r2
 8006230:	d3b5      	bcc.n	800619e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006240:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006244:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8006252:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006254:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f043 0210 	orr.w	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b10      	ldr	r3, [pc, #64]	@ (80062b0 <USB_DevInit+0x2c4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006274:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006278:	2b00      	cmp	r3, #0
 800627a:	d005      	beq.n	8006288 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	699b      	ldr	r3, [r3, #24]
 8006280:	f043 0208 	orr.w	r2, r3, #8
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006288:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800628c:	2b01      	cmp	r3, #1
 800628e:	d107      	bne.n	80062a0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006298:	f043 0304 	orr.w	r3, r3, #4
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062ac:	b004      	add	sp, #16
 80062ae:	4770      	bx	lr
 80062b0:	803c3800 	.word	0x803c3800

080062b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	3301      	adds	r3, #1
 80062c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062ce:	d901      	bls.n	80062d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062d0:	2303      	movs	r3, #3
 80062d2:	e01b      	b.n	800630c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	daf2      	bge.n	80062c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80062dc:	2300      	movs	r3, #0
 80062de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	019b      	lsls	r3, r3, #6
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	3301      	adds	r3, #1
 80062f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062f8:	d901      	bls.n	80062fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e006      	b.n	800630c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0320 	and.w	r3, r3, #32
 8006306:	2b20      	cmp	r3, #32
 8006308:	d0f0      	beq.n	80062ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	3301      	adds	r3, #1
 8006328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006330:	d901      	bls.n	8006336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e018      	b.n	8006368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	daf2      	bge.n	8006324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800633e:	2300      	movs	r3, #0
 8006340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2210      	movs	r2, #16
 8006346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006354:	d901      	bls.n	800635a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e006      	b.n	8006368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f003 0310 	and.w	r3, r3, #16
 8006362:	2b10      	cmp	r3, #16
 8006364:	d0f0      	beq.n	8006348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	78fb      	ldrb	r3, [r7, #3]
 800638e:	68f9      	ldr	r1, [r7, #12]
 8006390:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006394:	4313      	orrs	r3, r2
 8006396:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006398:	2300      	movs	r3, #0
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80063a6:	b480      	push	{r7}
 80063a8:	b085      	sub	sp, #20
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68fa      	ldr	r2, [r7, #12]
 80063bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063c0:	f023 0303 	bic.w	r3, r3, #3
 80063c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063d4:	f043 0302 	orr.w	r3, r3, #2
 80063d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063da:	2300      	movs	r3, #0
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3714      	adds	r7, #20
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b083      	sub	sp, #12
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	f003 0301 	and.w	r3, r3, #1
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	370c      	adds	r7, #12
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	3301      	adds	r3, #1
 8006414:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800641c:	d901      	bls.n	8006422 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e01b      	b.n	800645a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	daf2      	bge.n	8006410 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800642a:	2300      	movs	r3, #0
 800642c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006446:	d901      	bls.n	800644c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e006      	b.n	800645a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b01      	cmp	r3, #1
 8006456:	d0f0      	beq.n	800643a <USB_CoreReset+0x36>

  return HAL_OK;
 8006458:	2300      	movs	r3, #0
}
 800645a:	4618      	mov	r0, r3
 800645c:	3714      	adds	r7, #20
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <__cvt>:
 8006466:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800646a:	ec57 6b10 	vmov	r6, r7, d0
 800646e:	2f00      	cmp	r7, #0
 8006470:	460c      	mov	r4, r1
 8006472:	4619      	mov	r1, r3
 8006474:	463b      	mov	r3, r7
 8006476:	bfbb      	ittet	lt
 8006478:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800647c:	461f      	movlt	r7, r3
 800647e:	2300      	movge	r3, #0
 8006480:	232d      	movlt	r3, #45	@ 0x2d
 8006482:	700b      	strb	r3, [r1, #0]
 8006484:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006486:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800648a:	4691      	mov	r9, r2
 800648c:	f023 0820 	bic.w	r8, r3, #32
 8006490:	bfbc      	itt	lt
 8006492:	4632      	movlt	r2, r6
 8006494:	4616      	movlt	r6, r2
 8006496:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800649a:	d005      	beq.n	80064a8 <__cvt+0x42>
 800649c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80064a0:	d100      	bne.n	80064a4 <__cvt+0x3e>
 80064a2:	3401      	adds	r4, #1
 80064a4:	2102      	movs	r1, #2
 80064a6:	e000      	b.n	80064aa <__cvt+0x44>
 80064a8:	2103      	movs	r1, #3
 80064aa:	ab03      	add	r3, sp, #12
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	ab02      	add	r3, sp, #8
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	ec47 6b10 	vmov	d0, r6, r7
 80064b6:	4653      	mov	r3, sl
 80064b8:	4622      	mov	r2, r4
 80064ba:	f001 f875 	bl	80075a8 <_dtoa_r>
 80064be:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80064c2:	4605      	mov	r5, r0
 80064c4:	d119      	bne.n	80064fa <__cvt+0x94>
 80064c6:	f019 0f01 	tst.w	r9, #1
 80064ca:	d00e      	beq.n	80064ea <__cvt+0x84>
 80064cc:	eb00 0904 	add.w	r9, r0, r4
 80064d0:	2200      	movs	r2, #0
 80064d2:	2300      	movs	r3, #0
 80064d4:	4630      	mov	r0, r6
 80064d6:	4639      	mov	r1, r7
 80064d8:	f7fa fb06 	bl	8000ae8 <__aeabi_dcmpeq>
 80064dc:	b108      	cbz	r0, 80064e2 <__cvt+0x7c>
 80064de:	f8cd 900c 	str.w	r9, [sp, #12]
 80064e2:	2230      	movs	r2, #48	@ 0x30
 80064e4:	9b03      	ldr	r3, [sp, #12]
 80064e6:	454b      	cmp	r3, r9
 80064e8:	d31e      	bcc.n	8006528 <__cvt+0xc2>
 80064ea:	9b03      	ldr	r3, [sp, #12]
 80064ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80064ee:	1b5b      	subs	r3, r3, r5
 80064f0:	4628      	mov	r0, r5
 80064f2:	6013      	str	r3, [r2, #0]
 80064f4:	b004      	add	sp, #16
 80064f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064fa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80064fe:	eb00 0904 	add.w	r9, r0, r4
 8006502:	d1e5      	bne.n	80064d0 <__cvt+0x6a>
 8006504:	7803      	ldrb	r3, [r0, #0]
 8006506:	2b30      	cmp	r3, #48	@ 0x30
 8006508:	d10a      	bne.n	8006520 <__cvt+0xba>
 800650a:	2200      	movs	r2, #0
 800650c:	2300      	movs	r3, #0
 800650e:	4630      	mov	r0, r6
 8006510:	4639      	mov	r1, r7
 8006512:	f7fa fae9 	bl	8000ae8 <__aeabi_dcmpeq>
 8006516:	b918      	cbnz	r0, 8006520 <__cvt+0xba>
 8006518:	f1c4 0401 	rsb	r4, r4, #1
 800651c:	f8ca 4000 	str.w	r4, [sl]
 8006520:	f8da 3000 	ldr.w	r3, [sl]
 8006524:	4499      	add	r9, r3
 8006526:	e7d3      	b.n	80064d0 <__cvt+0x6a>
 8006528:	1c59      	adds	r1, r3, #1
 800652a:	9103      	str	r1, [sp, #12]
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	e7d9      	b.n	80064e4 <__cvt+0x7e>

08006530 <__exponent>:
 8006530:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006532:	2900      	cmp	r1, #0
 8006534:	bfba      	itte	lt
 8006536:	4249      	neglt	r1, r1
 8006538:	232d      	movlt	r3, #45	@ 0x2d
 800653a:	232b      	movge	r3, #43	@ 0x2b
 800653c:	2909      	cmp	r1, #9
 800653e:	7002      	strb	r2, [r0, #0]
 8006540:	7043      	strb	r3, [r0, #1]
 8006542:	dd29      	ble.n	8006598 <__exponent+0x68>
 8006544:	f10d 0307 	add.w	r3, sp, #7
 8006548:	461d      	mov	r5, r3
 800654a:	270a      	movs	r7, #10
 800654c:	461a      	mov	r2, r3
 800654e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006552:	fb07 1416 	mls	r4, r7, r6, r1
 8006556:	3430      	adds	r4, #48	@ 0x30
 8006558:	f802 4c01 	strb.w	r4, [r2, #-1]
 800655c:	460c      	mov	r4, r1
 800655e:	2c63      	cmp	r4, #99	@ 0x63
 8006560:	f103 33ff 	add.w	r3, r3, #4294967295
 8006564:	4631      	mov	r1, r6
 8006566:	dcf1      	bgt.n	800654c <__exponent+0x1c>
 8006568:	3130      	adds	r1, #48	@ 0x30
 800656a:	1e94      	subs	r4, r2, #2
 800656c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006570:	1c41      	adds	r1, r0, #1
 8006572:	4623      	mov	r3, r4
 8006574:	42ab      	cmp	r3, r5
 8006576:	d30a      	bcc.n	800658e <__exponent+0x5e>
 8006578:	f10d 0309 	add.w	r3, sp, #9
 800657c:	1a9b      	subs	r3, r3, r2
 800657e:	42ac      	cmp	r4, r5
 8006580:	bf88      	it	hi
 8006582:	2300      	movhi	r3, #0
 8006584:	3302      	adds	r3, #2
 8006586:	4403      	add	r3, r0
 8006588:	1a18      	subs	r0, r3, r0
 800658a:	b003      	add	sp, #12
 800658c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800658e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006592:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006596:	e7ed      	b.n	8006574 <__exponent+0x44>
 8006598:	2330      	movs	r3, #48	@ 0x30
 800659a:	3130      	adds	r1, #48	@ 0x30
 800659c:	7083      	strb	r3, [r0, #2]
 800659e:	70c1      	strb	r1, [r0, #3]
 80065a0:	1d03      	adds	r3, r0, #4
 80065a2:	e7f1      	b.n	8006588 <__exponent+0x58>

080065a4 <_printf_float>:
 80065a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a8:	b08d      	sub	sp, #52	@ 0x34
 80065aa:	460c      	mov	r4, r1
 80065ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80065b0:	4616      	mov	r6, r2
 80065b2:	461f      	mov	r7, r3
 80065b4:	4605      	mov	r5, r0
 80065b6:	f000 feef 	bl	8007398 <_localeconv_r>
 80065ba:	6803      	ldr	r3, [r0, #0]
 80065bc:	9304      	str	r3, [sp, #16]
 80065be:	4618      	mov	r0, r3
 80065c0:	f7f9 fe66 	bl	8000290 <strlen>
 80065c4:	2300      	movs	r3, #0
 80065c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80065c8:	f8d8 3000 	ldr.w	r3, [r8]
 80065cc:	9005      	str	r0, [sp, #20]
 80065ce:	3307      	adds	r3, #7
 80065d0:	f023 0307 	bic.w	r3, r3, #7
 80065d4:	f103 0208 	add.w	r2, r3, #8
 80065d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80065dc:	f8d4 b000 	ldr.w	fp, [r4]
 80065e0:	f8c8 2000 	str.w	r2, [r8]
 80065e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80065ec:	9307      	str	r3, [sp, #28]
 80065ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80065f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80065f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80065fa:	4b9c      	ldr	r3, [pc, #624]	@ (800686c <_printf_float+0x2c8>)
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006600:	f7fa faa4 	bl	8000b4c <__aeabi_dcmpun>
 8006604:	bb70      	cbnz	r0, 8006664 <_printf_float+0xc0>
 8006606:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800660a:	4b98      	ldr	r3, [pc, #608]	@ (800686c <_printf_float+0x2c8>)
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	f7fa fa7e 	bl	8000b10 <__aeabi_dcmple>
 8006614:	bb30      	cbnz	r0, 8006664 <_printf_float+0xc0>
 8006616:	2200      	movs	r2, #0
 8006618:	2300      	movs	r3, #0
 800661a:	4640      	mov	r0, r8
 800661c:	4649      	mov	r1, r9
 800661e:	f7fa fa6d 	bl	8000afc <__aeabi_dcmplt>
 8006622:	b110      	cbz	r0, 800662a <_printf_float+0x86>
 8006624:	232d      	movs	r3, #45	@ 0x2d
 8006626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800662a:	4a91      	ldr	r2, [pc, #580]	@ (8006870 <_printf_float+0x2cc>)
 800662c:	4b91      	ldr	r3, [pc, #580]	@ (8006874 <_printf_float+0x2d0>)
 800662e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006632:	bf94      	ite	ls
 8006634:	4690      	movls	r8, r2
 8006636:	4698      	movhi	r8, r3
 8006638:	2303      	movs	r3, #3
 800663a:	6123      	str	r3, [r4, #16]
 800663c:	f02b 0304 	bic.w	r3, fp, #4
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	9700      	str	r7, [sp, #0]
 8006648:	4633      	mov	r3, r6
 800664a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800664c:	4621      	mov	r1, r4
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f9d2 	bl	80069f8 <_printf_common>
 8006654:	3001      	adds	r0, #1
 8006656:	f040 808d 	bne.w	8006774 <_printf_float+0x1d0>
 800665a:	f04f 30ff 	mov.w	r0, #4294967295
 800665e:	b00d      	add	sp, #52	@ 0x34
 8006660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006664:	4642      	mov	r2, r8
 8006666:	464b      	mov	r3, r9
 8006668:	4640      	mov	r0, r8
 800666a:	4649      	mov	r1, r9
 800666c:	f7fa fa6e 	bl	8000b4c <__aeabi_dcmpun>
 8006670:	b140      	cbz	r0, 8006684 <_printf_float+0xe0>
 8006672:	464b      	mov	r3, r9
 8006674:	2b00      	cmp	r3, #0
 8006676:	bfbc      	itt	lt
 8006678:	232d      	movlt	r3, #45	@ 0x2d
 800667a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800667e:	4a7e      	ldr	r2, [pc, #504]	@ (8006878 <_printf_float+0x2d4>)
 8006680:	4b7e      	ldr	r3, [pc, #504]	@ (800687c <_printf_float+0x2d8>)
 8006682:	e7d4      	b.n	800662e <_printf_float+0x8a>
 8006684:	6863      	ldr	r3, [r4, #4]
 8006686:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800668a:	9206      	str	r2, [sp, #24]
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	d13b      	bne.n	8006708 <_printf_float+0x164>
 8006690:	2306      	movs	r3, #6
 8006692:	6063      	str	r3, [r4, #4]
 8006694:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006698:	2300      	movs	r3, #0
 800669a:	6022      	str	r2, [r4, #0]
 800669c:	9303      	str	r3, [sp, #12]
 800669e:	ab0a      	add	r3, sp, #40	@ 0x28
 80066a0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80066a4:	ab09      	add	r3, sp, #36	@ 0x24
 80066a6:	9300      	str	r3, [sp, #0]
 80066a8:	6861      	ldr	r1, [r4, #4]
 80066aa:	ec49 8b10 	vmov	d0, r8, r9
 80066ae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80066b2:	4628      	mov	r0, r5
 80066b4:	f7ff fed7 	bl	8006466 <__cvt>
 80066b8:	9b06      	ldr	r3, [sp, #24]
 80066ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80066bc:	2b47      	cmp	r3, #71	@ 0x47
 80066be:	4680      	mov	r8, r0
 80066c0:	d129      	bne.n	8006716 <_printf_float+0x172>
 80066c2:	1cc8      	adds	r0, r1, #3
 80066c4:	db02      	blt.n	80066cc <_printf_float+0x128>
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	4299      	cmp	r1, r3
 80066ca:	dd41      	ble.n	8006750 <_printf_float+0x1ac>
 80066cc:	f1aa 0a02 	sub.w	sl, sl, #2
 80066d0:	fa5f fa8a 	uxtb.w	sl, sl
 80066d4:	3901      	subs	r1, #1
 80066d6:	4652      	mov	r2, sl
 80066d8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80066dc:	9109      	str	r1, [sp, #36]	@ 0x24
 80066de:	f7ff ff27 	bl	8006530 <__exponent>
 80066e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80066e4:	1813      	adds	r3, r2, r0
 80066e6:	2a01      	cmp	r2, #1
 80066e8:	4681      	mov	r9, r0
 80066ea:	6123      	str	r3, [r4, #16]
 80066ec:	dc02      	bgt.n	80066f4 <_printf_float+0x150>
 80066ee:	6822      	ldr	r2, [r4, #0]
 80066f0:	07d2      	lsls	r2, r2, #31
 80066f2:	d501      	bpl.n	80066f8 <_printf_float+0x154>
 80066f4:	3301      	adds	r3, #1
 80066f6:	6123      	str	r3, [r4, #16]
 80066f8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d0a2      	beq.n	8006646 <_printf_float+0xa2>
 8006700:	232d      	movs	r3, #45	@ 0x2d
 8006702:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006706:	e79e      	b.n	8006646 <_printf_float+0xa2>
 8006708:	9a06      	ldr	r2, [sp, #24]
 800670a:	2a47      	cmp	r2, #71	@ 0x47
 800670c:	d1c2      	bne.n	8006694 <_printf_float+0xf0>
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1c0      	bne.n	8006694 <_printf_float+0xf0>
 8006712:	2301      	movs	r3, #1
 8006714:	e7bd      	b.n	8006692 <_printf_float+0xee>
 8006716:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800671a:	d9db      	bls.n	80066d4 <_printf_float+0x130>
 800671c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006720:	d118      	bne.n	8006754 <_printf_float+0x1b0>
 8006722:	2900      	cmp	r1, #0
 8006724:	6863      	ldr	r3, [r4, #4]
 8006726:	dd0b      	ble.n	8006740 <_printf_float+0x19c>
 8006728:	6121      	str	r1, [r4, #16]
 800672a:	b913      	cbnz	r3, 8006732 <_printf_float+0x18e>
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	07d0      	lsls	r0, r2, #31
 8006730:	d502      	bpl.n	8006738 <_printf_float+0x194>
 8006732:	3301      	adds	r3, #1
 8006734:	440b      	add	r3, r1
 8006736:	6123      	str	r3, [r4, #16]
 8006738:	65a1      	str	r1, [r4, #88]	@ 0x58
 800673a:	f04f 0900 	mov.w	r9, #0
 800673e:	e7db      	b.n	80066f8 <_printf_float+0x154>
 8006740:	b913      	cbnz	r3, 8006748 <_printf_float+0x1a4>
 8006742:	6822      	ldr	r2, [r4, #0]
 8006744:	07d2      	lsls	r2, r2, #31
 8006746:	d501      	bpl.n	800674c <_printf_float+0x1a8>
 8006748:	3302      	adds	r3, #2
 800674a:	e7f4      	b.n	8006736 <_printf_float+0x192>
 800674c:	2301      	movs	r3, #1
 800674e:	e7f2      	b.n	8006736 <_printf_float+0x192>
 8006750:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006754:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006756:	4299      	cmp	r1, r3
 8006758:	db05      	blt.n	8006766 <_printf_float+0x1c2>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	6121      	str	r1, [r4, #16]
 800675e:	07d8      	lsls	r0, r3, #31
 8006760:	d5ea      	bpl.n	8006738 <_printf_float+0x194>
 8006762:	1c4b      	adds	r3, r1, #1
 8006764:	e7e7      	b.n	8006736 <_printf_float+0x192>
 8006766:	2900      	cmp	r1, #0
 8006768:	bfd4      	ite	le
 800676a:	f1c1 0202 	rsble	r2, r1, #2
 800676e:	2201      	movgt	r2, #1
 8006770:	4413      	add	r3, r2
 8006772:	e7e0      	b.n	8006736 <_printf_float+0x192>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	055a      	lsls	r2, r3, #21
 8006778:	d407      	bmi.n	800678a <_printf_float+0x1e6>
 800677a:	6923      	ldr	r3, [r4, #16]
 800677c:	4642      	mov	r2, r8
 800677e:	4631      	mov	r1, r6
 8006780:	4628      	mov	r0, r5
 8006782:	47b8      	blx	r7
 8006784:	3001      	adds	r0, #1
 8006786:	d12b      	bne.n	80067e0 <_printf_float+0x23c>
 8006788:	e767      	b.n	800665a <_printf_float+0xb6>
 800678a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800678e:	f240 80dd 	bls.w	800694c <_printf_float+0x3a8>
 8006792:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006796:	2200      	movs	r2, #0
 8006798:	2300      	movs	r3, #0
 800679a:	f7fa f9a5 	bl	8000ae8 <__aeabi_dcmpeq>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d033      	beq.n	800680a <_printf_float+0x266>
 80067a2:	4a37      	ldr	r2, [pc, #220]	@ (8006880 <_printf_float+0x2dc>)
 80067a4:	2301      	movs	r3, #1
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	f43f af54 	beq.w	800665a <_printf_float+0xb6>
 80067b2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80067b6:	4543      	cmp	r3, r8
 80067b8:	db02      	blt.n	80067c0 <_printf_float+0x21c>
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	07d8      	lsls	r0, r3, #31
 80067be:	d50f      	bpl.n	80067e0 <_printf_float+0x23c>
 80067c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80067c4:	4631      	mov	r1, r6
 80067c6:	4628      	mov	r0, r5
 80067c8:	47b8      	blx	r7
 80067ca:	3001      	adds	r0, #1
 80067cc:	f43f af45 	beq.w	800665a <_printf_float+0xb6>
 80067d0:	f04f 0900 	mov.w	r9, #0
 80067d4:	f108 38ff 	add.w	r8, r8, #4294967295
 80067d8:	f104 0a1a 	add.w	sl, r4, #26
 80067dc:	45c8      	cmp	r8, r9
 80067de:	dc09      	bgt.n	80067f4 <_printf_float+0x250>
 80067e0:	6823      	ldr	r3, [r4, #0]
 80067e2:	079b      	lsls	r3, r3, #30
 80067e4:	f100 8103 	bmi.w	80069ee <_printf_float+0x44a>
 80067e8:	68e0      	ldr	r0, [r4, #12]
 80067ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067ec:	4298      	cmp	r0, r3
 80067ee:	bfb8      	it	lt
 80067f0:	4618      	movlt	r0, r3
 80067f2:	e734      	b.n	800665e <_printf_float+0xba>
 80067f4:	2301      	movs	r3, #1
 80067f6:	4652      	mov	r2, sl
 80067f8:	4631      	mov	r1, r6
 80067fa:	4628      	mov	r0, r5
 80067fc:	47b8      	blx	r7
 80067fe:	3001      	adds	r0, #1
 8006800:	f43f af2b 	beq.w	800665a <_printf_float+0xb6>
 8006804:	f109 0901 	add.w	r9, r9, #1
 8006808:	e7e8      	b.n	80067dc <_printf_float+0x238>
 800680a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	dc39      	bgt.n	8006884 <_printf_float+0x2e0>
 8006810:	4a1b      	ldr	r2, [pc, #108]	@ (8006880 <_printf_float+0x2dc>)
 8006812:	2301      	movs	r3, #1
 8006814:	4631      	mov	r1, r6
 8006816:	4628      	mov	r0, r5
 8006818:	47b8      	blx	r7
 800681a:	3001      	adds	r0, #1
 800681c:	f43f af1d 	beq.w	800665a <_printf_float+0xb6>
 8006820:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006824:	ea59 0303 	orrs.w	r3, r9, r3
 8006828:	d102      	bne.n	8006830 <_printf_float+0x28c>
 800682a:	6823      	ldr	r3, [r4, #0]
 800682c:	07d9      	lsls	r1, r3, #31
 800682e:	d5d7      	bpl.n	80067e0 <_printf_float+0x23c>
 8006830:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006834:	4631      	mov	r1, r6
 8006836:	4628      	mov	r0, r5
 8006838:	47b8      	blx	r7
 800683a:	3001      	adds	r0, #1
 800683c:	f43f af0d 	beq.w	800665a <_printf_float+0xb6>
 8006840:	f04f 0a00 	mov.w	sl, #0
 8006844:	f104 0b1a 	add.w	fp, r4, #26
 8006848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800684a:	425b      	negs	r3, r3
 800684c:	4553      	cmp	r3, sl
 800684e:	dc01      	bgt.n	8006854 <_printf_float+0x2b0>
 8006850:	464b      	mov	r3, r9
 8006852:	e793      	b.n	800677c <_printf_float+0x1d8>
 8006854:	2301      	movs	r3, #1
 8006856:	465a      	mov	r2, fp
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f aefb 	beq.w	800665a <_printf_float+0xb6>
 8006864:	f10a 0a01 	add.w	sl, sl, #1
 8006868:	e7ee      	b.n	8006848 <_printf_float+0x2a4>
 800686a:	bf00      	nop
 800686c:	7fefffff 	.word	0x7fefffff
 8006870:	0800acb0 	.word	0x0800acb0
 8006874:	0800acb4 	.word	0x0800acb4
 8006878:	0800acb8 	.word	0x0800acb8
 800687c:	0800acbc 	.word	0x0800acbc
 8006880:	0800acc0 	.word	0x0800acc0
 8006884:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006886:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800688a:	4553      	cmp	r3, sl
 800688c:	bfa8      	it	ge
 800688e:	4653      	movge	r3, sl
 8006890:	2b00      	cmp	r3, #0
 8006892:	4699      	mov	r9, r3
 8006894:	dc36      	bgt.n	8006904 <_printf_float+0x360>
 8006896:	f04f 0b00 	mov.w	fp, #0
 800689a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800689e:	f104 021a 	add.w	r2, r4, #26
 80068a2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80068a4:	9306      	str	r3, [sp, #24]
 80068a6:	eba3 0309 	sub.w	r3, r3, r9
 80068aa:	455b      	cmp	r3, fp
 80068ac:	dc31      	bgt.n	8006912 <_printf_float+0x36e>
 80068ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068b0:	459a      	cmp	sl, r3
 80068b2:	dc3a      	bgt.n	800692a <_printf_float+0x386>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	07da      	lsls	r2, r3, #31
 80068b8:	d437      	bmi.n	800692a <_printf_float+0x386>
 80068ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068bc:	ebaa 0903 	sub.w	r9, sl, r3
 80068c0:	9b06      	ldr	r3, [sp, #24]
 80068c2:	ebaa 0303 	sub.w	r3, sl, r3
 80068c6:	4599      	cmp	r9, r3
 80068c8:	bfa8      	it	ge
 80068ca:	4699      	movge	r9, r3
 80068cc:	f1b9 0f00 	cmp.w	r9, #0
 80068d0:	dc33      	bgt.n	800693a <_printf_float+0x396>
 80068d2:	f04f 0800 	mov.w	r8, #0
 80068d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80068da:	f104 0b1a 	add.w	fp, r4, #26
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	ebaa 0303 	sub.w	r3, sl, r3
 80068e4:	eba3 0309 	sub.w	r3, r3, r9
 80068e8:	4543      	cmp	r3, r8
 80068ea:	f77f af79 	ble.w	80067e0 <_printf_float+0x23c>
 80068ee:	2301      	movs	r3, #1
 80068f0:	465a      	mov	r2, fp
 80068f2:	4631      	mov	r1, r6
 80068f4:	4628      	mov	r0, r5
 80068f6:	47b8      	blx	r7
 80068f8:	3001      	adds	r0, #1
 80068fa:	f43f aeae 	beq.w	800665a <_printf_float+0xb6>
 80068fe:	f108 0801 	add.w	r8, r8, #1
 8006902:	e7ec      	b.n	80068de <_printf_float+0x33a>
 8006904:	4642      	mov	r2, r8
 8006906:	4631      	mov	r1, r6
 8006908:	4628      	mov	r0, r5
 800690a:	47b8      	blx	r7
 800690c:	3001      	adds	r0, #1
 800690e:	d1c2      	bne.n	8006896 <_printf_float+0x2f2>
 8006910:	e6a3      	b.n	800665a <_printf_float+0xb6>
 8006912:	2301      	movs	r3, #1
 8006914:	4631      	mov	r1, r6
 8006916:	4628      	mov	r0, r5
 8006918:	9206      	str	r2, [sp, #24]
 800691a:	47b8      	blx	r7
 800691c:	3001      	adds	r0, #1
 800691e:	f43f ae9c 	beq.w	800665a <_printf_float+0xb6>
 8006922:	9a06      	ldr	r2, [sp, #24]
 8006924:	f10b 0b01 	add.w	fp, fp, #1
 8006928:	e7bb      	b.n	80068a2 <_printf_float+0x2fe>
 800692a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800692e:	4631      	mov	r1, r6
 8006930:	4628      	mov	r0, r5
 8006932:	47b8      	blx	r7
 8006934:	3001      	adds	r0, #1
 8006936:	d1c0      	bne.n	80068ba <_printf_float+0x316>
 8006938:	e68f      	b.n	800665a <_printf_float+0xb6>
 800693a:	9a06      	ldr	r2, [sp, #24]
 800693c:	464b      	mov	r3, r9
 800693e:	4442      	add	r2, r8
 8006940:	4631      	mov	r1, r6
 8006942:	4628      	mov	r0, r5
 8006944:	47b8      	blx	r7
 8006946:	3001      	adds	r0, #1
 8006948:	d1c3      	bne.n	80068d2 <_printf_float+0x32e>
 800694a:	e686      	b.n	800665a <_printf_float+0xb6>
 800694c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006950:	f1ba 0f01 	cmp.w	sl, #1
 8006954:	dc01      	bgt.n	800695a <_printf_float+0x3b6>
 8006956:	07db      	lsls	r3, r3, #31
 8006958:	d536      	bpl.n	80069c8 <_printf_float+0x424>
 800695a:	2301      	movs	r3, #1
 800695c:	4642      	mov	r2, r8
 800695e:	4631      	mov	r1, r6
 8006960:	4628      	mov	r0, r5
 8006962:	47b8      	blx	r7
 8006964:	3001      	adds	r0, #1
 8006966:	f43f ae78 	beq.w	800665a <_printf_float+0xb6>
 800696a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696e:	4631      	mov	r1, r6
 8006970:	4628      	mov	r0, r5
 8006972:	47b8      	blx	r7
 8006974:	3001      	adds	r0, #1
 8006976:	f43f ae70 	beq.w	800665a <_printf_float+0xb6>
 800697a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800697e:	2200      	movs	r2, #0
 8006980:	2300      	movs	r3, #0
 8006982:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006986:	f7fa f8af 	bl	8000ae8 <__aeabi_dcmpeq>
 800698a:	b9c0      	cbnz	r0, 80069be <_printf_float+0x41a>
 800698c:	4653      	mov	r3, sl
 800698e:	f108 0201 	add.w	r2, r8, #1
 8006992:	4631      	mov	r1, r6
 8006994:	4628      	mov	r0, r5
 8006996:	47b8      	blx	r7
 8006998:	3001      	adds	r0, #1
 800699a:	d10c      	bne.n	80069b6 <_printf_float+0x412>
 800699c:	e65d      	b.n	800665a <_printf_float+0xb6>
 800699e:	2301      	movs	r3, #1
 80069a0:	465a      	mov	r2, fp
 80069a2:	4631      	mov	r1, r6
 80069a4:	4628      	mov	r0, r5
 80069a6:	47b8      	blx	r7
 80069a8:	3001      	adds	r0, #1
 80069aa:	f43f ae56 	beq.w	800665a <_printf_float+0xb6>
 80069ae:	f108 0801 	add.w	r8, r8, #1
 80069b2:	45d0      	cmp	r8, sl
 80069b4:	dbf3      	blt.n	800699e <_printf_float+0x3fa>
 80069b6:	464b      	mov	r3, r9
 80069b8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80069bc:	e6df      	b.n	800677e <_printf_float+0x1da>
 80069be:	f04f 0800 	mov.w	r8, #0
 80069c2:	f104 0b1a 	add.w	fp, r4, #26
 80069c6:	e7f4      	b.n	80069b2 <_printf_float+0x40e>
 80069c8:	2301      	movs	r3, #1
 80069ca:	4642      	mov	r2, r8
 80069cc:	e7e1      	b.n	8006992 <_printf_float+0x3ee>
 80069ce:	2301      	movs	r3, #1
 80069d0:	464a      	mov	r2, r9
 80069d2:	4631      	mov	r1, r6
 80069d4:	4628      	mov	r0, r5
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f ae3e 	beq.w	800665a <_printf_float+0xb6>
 80069de:	f108 0801 	add.w	r8, r8, #1
 80069e2:	68e3      	ldr	r3, [r4, #12]
 80069e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069e6:	1a5b      	subs	r3, r3, r1
 80069e8:	4543      	cmp	r3, r8
 80069ea:	dcf0      	bgt.n	80069ce <_printf_float+0x42a>
 80069ec:	e6fc      	b.n	80067e8 <_printf_float+0x244>
 80069ee:	f04f 0800 	mov.w	r8, #0
 80069f2:	f104 0919 	add.w	r9, r4, #25
 80069f6:	e7f4      	b.n	80069e2 <_printf_float+0x43e>

080069f8 <_printf_common>:
 80069f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069fc:	4616      	mov	r6, r2
 80069fe:	4698      	mov	r8, r3
 8006a00:	688a      	ldr	r2, [r1, #8]
 8006a02:	690b      	ldr	r3, [r1, #16]
 8006a04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	bfb8      	it	lt
 8006a0c:	4613      	movlt	r3, r2
 8006a0e:	6033      	str	r3, [r6, #0]
 8006a10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a14:	4607      	mov	r7, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	b10a      	cbz	r2, 8006a1e <_printf_common+0x26>
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	6033      	str	r3, [r6, #0]
 8006a1e:	6823      	ldr	r3, [r4, #0]
 8006a20:	0699      	lsls	r1, r3, #26
 8006a22:	bf42      	ittt	mi
 8006a24:	6833      	ldrmi	r3, [r6, #0]
 8006a26:	3302      	addmi	r3, #2
 8006a28:	6033      	strmi	r3, [r6, #0]
 8006a2a:	6825      	ldr	r5, [r4, #0]
 8006a2c:	f015 0506 	ands.w	r5, r5, #6
 8006a30:	d106      	bne.n	8006a40 <_printf_common+0x48>
 8006a32:	f104 0a19 	add.w	sl, r4, #25
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	6832      	ldr	r2, [r6, #0]
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dc26      	bgt.n	8006a8e <_printf_common+0x96>
 8006a40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a44:	6822      	ldr	r2, [r4, #0]
 8006a46:	3b00      	subs	r3, #0
 8006a48:	bf18      	it	ne
 8006a4a:	2301      	movne	r3, #1
 8006a4c:	0692      	lsls	r2, r2, #26
 8006a4e:	d42b      	bmi.n	8006aa8 <_printf_common+0xb0>
 8006a50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a54:	4641      	mov	r1, r8
 8006a56:	4638      	mov	r0, r7
 8006a58:	47c8      	blx	r9
 8006a5a:	3001      	adds	r0, #1
 8006a5c:	d01e      	beq.n	8006a9c <_printf_common+0xa4>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	f003 0306 	and.w	r3, r3, #6
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	bf02      	ittt	eq
 8006a6a:	68e5      	ldreq	r5, [r4, #12]
 8006a6c:	6833      	ldreq	r3, [r6, #0]
 8006a6e:	1aed      	subeq	r5, r5, r3
 8006a70:	68a3      	ldr	r3, [r4, #8]
 8006a72:	bf0c      	ite	eq
 8006a74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a78:	2500      	movne	r5, #0
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bfc4      	itt	gt
 8006a7e:	1a9b      	subgt	r3, r3, r2
 8006a80:	18ed      	addgt	r5, r5, r3
 8006a82:	2600      	movs	r6, #0
 8006a84:	341a      	adds	r4, #26
 8006a86:	42b5      	cmp	r5, r6
 8006a88:	d11a      	bne.n	8006ac0 <_printf_common+0xc8>
 8006a8a:	2000      	movs	r0, #0
 8006a8c:	e008      	b.n	8006aa0 <_printf_common+0xa8>
 8006a8e:	2301      	movs	r3, #1
 8006a90:	4652      	mov	r2, sl
 8006a92:	4641      	mov	r1, r8
 8006a94:	4638      	mov	r0, r7
 8006a96:	47c8      	blx	r9
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d103      	bne.n	8006aa4 <_printf_common+0xac>
 8006a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa4:	3501      	adds	r5, #1
 8006aa6:	e7c6      	b.n	8006a36 <_printf_common+0x3e>
 8006aa8:	18e1      	adds	r1, r4, r3
 8006aaa:	1c5a      	adds	r2, r3, #1
 8006aac:	2030      	movs	r0, #48	@ 0x30
 8006aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ab2:	4422      	add	r2, r4
 8006ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006abc:	3302      	adds	r3, #2
 8006abe:	e7c7      	b.n	8006a50 <_printf_common+0x58>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	4622      	mov	r2, r4
 8006ac4:	4641      	mov	r1, r8
 8006ac6:	4638      	mov	r0, r7
 8006ac8:	47c8      	blx	r9
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0e6      	beq.n	8006a9c <_printf_common+0xa4>
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7d9      	b.n	8006a86 <_printf_common+0x8e>
	...

08006ad4 <_printf_i>:
 8006ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad8:	7e0f      	ldrb	r7, [r1, #24]
 8006ada:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006adc:	2f78      	cmp	r7, #120	@ 0x78
 8006ade:	4691      	mov	r9, r2
 8006ae0:	4680      	mov	r8, r0
 8006ae2:	460c      	mov	r4, r1
 8006ae4:	469a      	mov	sl, r3
 8006ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006aea:	d807      	bhi.n	8006afc <_printf_i+0x28>
 8006aec:	2f62      	cmp	r7, #98	@ 0x62
 8006aee:	d80a      	bhi.n	8006b06 <_printf_i+0x32>
 8006af0:	2f00      	cmp	r7, #0
 8006af2:	f000 80d2 	beq.w	8006c9a <_printf_i+0x1c6>
 8006af6:	2f58      	cmp	r7, #88	@ 0x58
 8006af8:	f000 80b9 	beq.w	8006c6e <_printf_i+0x19a>
 8006afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b04:	e03a      	b.n	8006b7c <_printf_i+0xa8>
 8006b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b0a:	2b15      	cmp	r3, #21
 8006b0c:	d8f6      	bhi.n	8006afc <_printf_i+0x28>
 8006b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8006b14 <_printf_i+0x40>)
 8006b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b14:	08006b6d 	.word	0x08006b6d
 8006b18:	08006b81 	.word	0x08006b81
 8006b1c:	08006afd 	.word	0x08006afd
 8006b20:	08006afd 	.word	0x08006afd
 8006b24:	08006afd 	.word	0x08006afd
 8006b28:	08006afd 	.word	0x08006afd
 8006b2c:	08006b81 	.word	0x08006b81
 8006b30:	08006afd 	.word	0x08006afd
 8006b34:	08006afd 	.word	0x08006afd
 8006b38:	08006afd 	.word	0x08006afd
 8006b3c:	08006afd 	.word	0x08006afd
 8006b40:	08006c81 	.word	0x08006c81
 8006b44:	08006bab 	.word	0x08006bab
 8006b48:	08006c3b 	.word	0x08006c3b
 8006b4c:	08006afd 	.word	0x08006afd
 8006b50:	08006afd 	.word	0x08006afd
 8006b54:	08006ca3 	.word	0x08006ca3
 8006b58:	08006afd 	.word	0x08006afd
 8006b5c:	08006bab 	.word	0x08006bab
 8006b60:	08006afd 	.word	0x08006afd
 8006b64:	08006afd 	.word	0x08006afd
 8006b68:	08006c43 	.word	0x08006c43
 8006b6c:	6833      	ldr	r3, [r6, #0]
 8006b6e:	1d1a      	adds	r2, r3, #4
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	6032      	str	r2, [r6, #0]
 8006b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e09d      	b.n	8006cbc <_printf_i+0x1e8>
 8006b80:	6833      	ldr	r3, [r6, #0]
 8006b82:	6820      	ldr	r0, [r4, #0]
 8006b84:	1d19      	adds	r1, r3, #4
 8006b86:	6031      	str	r1, [r6, #0]
 8006b88:	0606      	lsls	r6, r0, #24
 8006b8a:	d501      	bpl.n	8006b90 <_printf_i+0xbc>
 8006b8c:	681d      	ldr	r5, [r3, #0]
 8006b8e:	e003      	b.n	8006b98 <_printf_i+0xc4>
 8006b90:	0645      	lsls	r5, r0, #25
 8006b92:	d5fb      	bpl.n	8006b8c <_printf_i+0xb8>
 8006b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b98:	2d00      	cmp	r5, #0
 8006b9a:	da03      	bge.n	8006ba4 <_printf_i+0xd0>
 8006b9c:	232d      	movs	r3, #45	@ 0x2d
 8006b9e:	426d      	negs	r5, r5
 8006ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ba4:	4859      	ldr	r0, [pc, #356]	@ (8006d0c <_printf_i+0x238>)
 8006ba6:	230a      	movs	r3, #10
 8006ba8:	e011      	b.n	8006bce <_printf_i+0xfa>
 8006baa:	6821      	ldr	r1, [r4, #0]
 8006bac:	6833      	ldr	r3, [r6, #0]
 8006bae:	0608      	lsls	r0, r1, #24
 8006bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bb4:	d402      	bmi.n	8006bbc <_printf_i+0xe8>
 8006bb6:	0649      	lsls	r1, r1, #25
 8006bb8:	bf48      	it	mi
 8006bba:	b2ad      	uxthmi	r5, r5
 8006bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bbe:	4853      	ldr	r0, [pc, #332]	@ (8006d0c <_printf_i+0x238>)
 8006bc0:	6033      	str	r3, [r6, #0]
 8006bc2:	bf14      	ite	ne
 8006bc4:	230a      	movne	r3, #10
 8006bc6:	2308      	moveq	r3, #8
 8006bc8:	2100      	movs	r1, #0
 8006bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bce:	6866      	ldr	r6, [r4, #4]
 8006bd0:	60a6      	str	r6, [r4, #8]
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	bfa2      	ittt	ge
 8006bd6:	6821      	ldrge	r1, [r4, #0]
 8006bd8:	f021 0104 	bicge.w	r1, r1, #4
 8006bdc:	6021      	strge	r1, [r4, #0]
 8006bde:	b90d      	cbnz	r5, 8006be4 <_printf_i+0x110>
 8006be0:	2e00      	cmp	r6, #0
 8006be2:	d04b      	beq.n	8006c7c <_printf_i+0x1a8>
 8006be4:	4616      	mov	r6, r2
 8006be6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006bea:	fb03 5711 	mls	r7, r3, r1, r5
 8006bee:	5dc7      	ldrb	r7, [r0, r7]
 8006bf0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bf4:	462f      	mov	r7, r5
 8006bf6:	42bb      	cmp	r3, r7
 8006bf8:	460d      	mov	r5, r1
 8006bfa:	d9f4      	bls.n	8006be6 <_printf_i+0x112>
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d10b      	bne.n	8006c18 <_printf_i+0x144>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	07df      	lsls	r7, r3, #31
 8006c04:	d508      	bpl.n	8006c18 <_printf_i+0x144>
 8006c06:	6923      	ldr	r3, [r4, #16]
 8006c08:	6861      	ldr	r1, [r4, #4]
 8006c0a:	4299      	cmp	r1, r3
 8006c0c:	bfde      	ittt	le
 8006c0e:	2330      	movle	r3, #48	@ 0x30
 8006c10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c18:	1b92      	subs	r2, r2, r6
 8006c1a:	6122      	str	r2, [r4, #16]
 8006c1c:	f8cd a000 	str.w	sl, [sp]
 8006c20:	464b      	mov	r3, r9
 8006c22:	aa03      	add	r2, sp, #12
 8006c24:	4621      	mov	r1, r4
 8006c26:	4640      	mov	r0, r8
 8006c28:	f7ff fee6 	bl	80069f8 <_printf_common>
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	d14a      	bne.n	8006cc6 <_printf_i+0x1f2>
 8006c30:	f04f 30ff 	mov.w	r0, #4294967295
 8006c34:	b004      	add	sp, #16
 8006c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c3a:	6823      	ldr	r3, [r4, #0]
 8006c3c:	f043 0320 	orr.w	r3, r3, #32
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	4833      	ldr	r0, [pc, #204]	@ (8006d10 <_printf_i+0x23c>)
 8006c44:	2778      	movs	r7, #120	@ 0x78
 8006c46:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	6831      	ldr	r1, [r6, #0]
 8006c4e:	061f      	lsls	r7, r3, #24
 8006c50:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c54:	d402      	bmi.n	8006c5c <_printf_i+0x188>
 8006c56:	065f      	lsls	r7, r3, #25
 8006c58:	bf48      	it	mi
 8006c5a:	b2ad      	uxthmi	r5, r5
 8006c5c:	6031      	str	r1, [r6, #0]
 8006c5e:	07d9      	lsls	r1, r3, #31
 8006c60:	bf44      	itt	mi
 8006c62:	f043 0320 	orrmi.w	r3, r3, #32
 8006c66:	6023      	strmi	r3, [r4, #0]
 8006c68:	b11d      	cbz	r5, 8006c72 <_printf_i+0x19e>
 8006c6a:	2310      	movs	r3, #16
 8006c6c:	e7ac      	b.n	8006bc8 <_printf_i+0xf4>
 8006c6e:	4827      	ldr	r0, [pc, #156]	@ (8006d0c <_printf_i+0x238>)
 8006c70:	e7e9      	b.n	8006c46 <_printf_i+0x172>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	f023 0320 	bic.w	r3, r3, #32
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	e7f6      	b.n	8006c6a <_printf_i+0x196>
 8006c7c:	4616      	mov	r6, r2
 8006c7e:	e7bd      	b.n	8006bfc <_printf_i+0x128>
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	6825      	ldr	r5, [r4, #0]
 8006c84:	6961      	ldr	r1, [r4, #20]
 8006c86:	1d18      	adds	r0, r3, #4
 8006c88:	6030      	str	r0, [r6, #0]
 8006c8a:	062e      	lsls	r6, r5, #24
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	d501      	bpl.n	8006c94 <_printf_i+0x1c0>
 8006c90:	6019      	str	r1, [r3, #0]
 8006c92:	e002      	b.n	8006c9a <_printf_i+0x1c6>
 8006c94:	0668      	lsls	r0, r5, #25
 8006c96:	d5fb      	bpl.n	8006c90 <_printf_i+0x1bc>
 8006c98:	8019      	strh	r1, [r3, #0]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	6123      	str	r3, [r4, #16]
 8006c9e:	4616      	mov	r6, r2
 8006ca0:	e7bc      	b.n	8006c1c <_printf_i+0x148>
 8006ca2:	6833      	ldr	r3, [r6, #0]
 8006ca4:	1d1a      	adds	r2, r3, #4
 8006ca6:	6032      	str	r2, [r6, #0]
 8006ca8:	681e      	ldr	r6, [r3, #0]
 8006caa:	6862      	ldr	r2, [r4, #4]
 8006cac:	2100      	movs	r1, #0
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f7f9 fa9e 	bl	80001f0 <memchr>
 8006cb4:	b108      	cbz	r0, 8006cba <_printf_i+0x1e6>
 8006cb6:	1b80      	subs	r0, r0, r6
 8006cb8:	6060      	str	r0, [r4, #4]
 8006cba:	6863      	ldr	r3, [r4, #4]
 8006cbc:	6123      	str	r3, [r4, #16]
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc4:	e7aa      	b.n	8006c1c <_printf_i+0x148>
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	4632      	mov	r2, r6
 8006cca:	4649      	mov	r1, r9
 8006ccc:	4640      	mov	r0, r8
 8006cce:	47d0      	blx	sl
 8006cd0:	3001      	adds	r0, #1
 8006cd2:	d0ad      	beq.n	8006c30 <_printf_i+0x15c>
 8006cd4:	6823      	ldr	r3, [r4, #0]
 8006cd6:	079b      	lsls	r3, r3, #30
 8006cd8:	d413      	bmi.n	8006d02 <_printf_i+0x22e>
 8006cda:	68e0      	ldr	r0, [r4, #12]
 8006cdc:	9b03      	ldr	r3, [sp, #12]
 8006cde:	4298      	cmp	r0, r3
 8006ce0:	bfb8      	it	lt
 8006ce2:	4618      	movlt	r0, r3
 8006ce4:	e7a6      	b.n	8006c34 <_printf_i+0x160>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	4632      	mov	r2, r6
 8006cea:	4649      	mov	r1, r9
 8006cec:	4640      	mov	r0, r8
 8006cee:	47d0      	blx	sl
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d09d      	beq.n	8006c30 <_printf_i+0x15c>
 8006cf4:	3501      	adds	r5, #1
 8006cf6:	68e3      	ldr	r3, [r4, #12]
 8006cf8:	9903      	ldr	r1, [sp, #12]
 8006cfa:	1a5b      	subs	r3, r3, r1
 8006cfc:	42ab      	cmp	r3, r5
 8006cfe:	dcf2      	bgt.n	8006ce6 <_printf_i+0x212>
 8006d00:	e7eb      	b.n	8006cda <_printf_i+0x206>
 8006d02:	2500      	movs	r5, #0
 8006d04:	f104 0619 	add.w	r6, r4, #25
 8006d08:	e7f5      	b.n	8006cf6 <_printf_i+0x222>
 8006d0a:	bf00      	nop
 8006d0c:	0800acc2 	.word	0x0800acc2
 8006d10:	0800acd3 	.word	0x0800acd3

08006d14 <_scanf_float>:
 8006d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d18:	b087      	sub	sp, #28
 8006d1a:	4617      	mov	r7, r2
 8006d1c:	9303      	str	r3, [sp, #12]
 8006d1e:	688b      	ldr	r3, [r1, #8]
 8006d20:	1e5a      	subs	r2, r3, #1
 8006d22:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006d26:	bf81      	itttt	hi
 8006d28:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006d2c:	eb03 0b05 	addhi.w	fp, r3, r5
 8006d30:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006d34:	608b      	strhi	r3, [r1, #8]
 8006d36:	680b      	ldr	r3, [r1, #0]
 8006d38:	460a      	mov	r2, r1
 8006d3a:	f04f 0500 	mov.w	r5, #0
 8006d3e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006d42:	f842 3b1c 	str.w	r3, [r2], #28
 8006d46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006d4a:	4680      	mov	r8, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	bf98      	it	ls
 8006d50:	f04f 0b00 	movls.w	fp, #0
 8006d54:	9201      	str	r2, [sp, #4]
 8006d56:	4616      	mov	r6, r2
 8006d58:	46aa      	mov	sl, r5
 8006d5a:	46a9      	mov	r9, r5
 8006d5c:	9502      	str	r5, [sp, #8]
 8006d5e:	68a2      	ldr	r2, [r4, #8]
 8006d60:	b152      	cbz	r2, 8006d78 <_scanf_float+0x64>
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b4e      	cmp	r3, #78	@ 0x4e
 8006d68:	d864      	bhi.n	8006e34 <_scanf_float+0x120>
 8006d6a:	2b40      	cmp	r3, #64	@ 0x40
 8006d6c:	d83c      	bhi.n	8006de8 <_scanf_float+0xd4>
 8006d6e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006d72:	b2c8      	uxtb	r0, r1
 8006d74:	280e      	cmp	r0, #14
 8006d76:	d93a      	bls.n	8006dee <_scanf_float+0xda>
 8006d78:	f1b9 0f00 	cmp.w	r9, #0
 8006d7c:	d003      	beq.n	8006d86 <_scanf_float+0x72>
 8006d7e:	6823      	ldr	r3, [r4, #0]
 8006d80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d84:	6023      	str	r3, [r4, #0]
 8006d86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006d8a:	f1ba 0f01 	cmp.w	sl, #1
 8006d8e:	f200 8117 	bhi.w	8006fc0 <_scanf_float+0x2ac>
 8006d92:	9b01      	ldr	r3, [sp, #4]
 8006d94:	429e      	cmp	r6, r3
 8006d96:	f200 8108 	bhi.w	8006faa <_scanf_float+0x296>
 8006d9a:	2001      	movs	r0, #1
 8006d9c:	b007      	add	sp, #28
 8006d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006da2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006da6:	2a0d      	cmp	r2, #13
 8006da8:	d8e6      	bhi.n	8006d78 <_scanf_float+0x64>
 8006daa:	a101      	add	r1, pc, #4	@ (adr r1, 8006db0 <_scanf_float+0x9c>)
 8006dac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006db0:	08006ef7 	.word	0x08006ef7
 8006db4:	08006d79 	.word	0x08006d79
 8006db8:	08006d79 	.word	0x08006d79
 8006dbc:	08006d79 	.word	0x08006d79
 8006dc0:	08006f57 	.word	0x08006f57
 8006dc4:	08006f2f 	.word	0x08006f2f
 8006dc8:	08006d79 	.word	0x08006d79
 8006dcc:	08006d79 	.word	0x08006d79
 8006dd0:	08006f05 	.word	0x08006f05
 8006dd4:	08006d79 	.word	0x08006d79
 8006dd8:	08006d79 	.word	0x08006d79
 8006ddc:	08006d79 	.word	0x08006d79
 8006de0:	08006d79 	.word	0x08006d79
 8006de4:	08006ebd 	.word	0x08006ebd
 8006de8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006dec:	e7db      	b.n	8006da6 <_scanf_float+0x92>
 8006dee:	290e      	cmp	r1, #14
 8006df0:	d8c2      	bhi.n	8006d78 <_scanf_float+0x64>
 8006df2:	a001      	add	r0, pc, #4	@ (adr r0, 8006df8 <_scanf_float+0xe4>)
 8006df4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006df8:	08006ead 	.word	0x08006ead
 8006dfc:	08006d79 	.word	0x08006d79
 8006e00:	08006ead 	.word	0x08006ead
 8006e04:	08006f43 	.word	0x08006f43
 8006e08:	08006d79 	.word	0x08006d79
 8006e0c:	08006e55 	.word	0x08006e55
 8006e10:	08006e93 	.word	0x08006e93
 8006e14:	08006e93 	.word	0x08006e93
 8006e18:	08006e93 	.word	0x08006e93
 8006e1c:	08006e93 	.word	0x08006e93
 8006e20:	08006e93 	.word	0x08006e93
 8006e24:	08006e93 	.word	0x08006e93
 8006e28:	08006e93 	.word	0x08006e93
 8006e2c:	08006e93 	.word	0x08006e93
 8006e30:	08006e93 	.word	0x08006e93
 8006e34:	2b6e      	cmp	r3, #110	@ 0x6e
 8006e36:	d809      	bhi.n	8006e4c <_scanf_float+0x138>
 8006e38:	2b60      	cmp	r3, #96	@ 0x60
 8006e3a:	d8b2      	bhi.n	8006da2 <_scanf_float+0x8e>
 8006e3c:	2b54      	cmp	r3, #84	@ 0x54
 8006e3e:	d07b      	beq.n	8006f38 <_scanf_float+0x224>
 8006e40:	2b59      	cmp	r3, #89	@ 0x59
 8006e42:	d199      	bne.n	8006d78 <_scanf_float+0x64>
 8006e44:	2d07      	cmp	r5, #7
 8006e46:	d197      	bne.n	8006d78 <_scanf_float+0x64>
 8006e48:	2508      	movs	r5, #8
 8006e4a:	e02c      	b.n	8006ea6 <_scanf_float+0x192>
 8006e4c:	2b74      	cmp	r3, #116	@ 0x74
 8006e4e:	d073      	beq.n	8006f38 <_scanf_float+0x224>
 8006e50:	2b79      	cmp	r3, #121	@ 0x79
 8006e52:	e7f6      	b.n	8006e42 <_scanf_float+0x12e>
 8006e54:	6821      	ldr	r1, [r4, #0]
 8006e56:	05c8      	lsls	r0, r1, #23
 8006e58:	d51b      	bpl.n	8006e92 <_scanf_float+0x17e>
 8006e5a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006e5e:	6021      	str	r1, [r4, #0]
 8006e60:	f109 0901 	add.w	r9, r9, #1
 8006e64:	f1bb 0f00 	cmp.w	fp, #0
 8006e68:	d003      	beq.n	8006e72 <_scanf_float+0x15e>
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e70:	60a2      	str	r2, [r4, #8]
 8006e72:	68a3      	ldr	r3, [r4, #8]
 8006e74:	3b01      	subs	r3, #1
 8006e76:	60a3      	str	r3, [r4, #8]
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	6123      	str	r3, [r4, #16]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	607b      	str	r3, [r7, #4]
 8006e86:	f340 8087 	ble.w	8006f98 <_scanf_float+0x284>
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	3301      	adds	r3, #1
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	e765      	b.n	8006d5e <_scanf_float+0x4a>
 8006e92:	eb1a 0105 	adds.w	r1, sl, r5
 8006e96:	f47f af6f 	bne.w	8006d78 <_scanf_float+0x64>
 8006e9a:	6822      	ldr	r2, [r4, #0]
 8006e9c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006ea0:	6022      	str	r2, [r4, #0]
 8006ea2:	460d      	mov	r5, r1
 8006ea4:	468a      	mov	sl, r1
 8006ea6:	f806 3b01 	strb.w	r3, [r6], #1
 8006eaa:	e7e2      	b.n	8006e72 <_scanf_float+0x15e>
 8006eac:	6822      	ldr	r2, [r4, #0]
 8006eae:	0610      	lsls	r0, r2, #24
 8006eb0:	f57f af62 	bpl.w	8006d78 <_scanf_float+0x64>
 8006eb4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006eb8:	6022      	str	r2, [r4, #0]
 8006eba:	e7f4      	b.n	8006ea6 <_scanf_float+0x192>
 8006ebc:	f1ba 0f00 	cmp.w	sl, #0
 8006ec0:	d10e      	bne.n	8006ee0 <_scanf_float+0x1cc>
 8006ec2:	f1b9 0f00 	cmp.w	r9, #0
 8006ec6:	d10e      	bne.n	8006ee6 <_scanf_float+0x1d2>
 8006ec8:	6822      	ldr	r2, [r4, #0]
 8006eca:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006ece:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ed2:	d108      	bne.n	8006ee6 <_scanf_float+0x1d2>
 8006ed4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ed8:	6022      	str	r2, [r4, #0]
 8006eda:	f04f 0a01 	mov.w	sl, #1
 8006ede:	e7e2      	b.n	8006ea6 <_scanf_float+0x192>
 8006ee0:	f1ba 0f02 	cmp.w	sl, #2
 8006ee4:	d055      	beq.n	8006f92 <_scanf_float+0x27e>
 8006ee6:	2d01      	cmp	r5, #1
 8006ee8:	d002      	beq.n	8006ef0 <_scanf_float+0x1dc>
 8006eea:	2d04      	cmp	r5, #4
 8006eec:	f47f af44 	bne.w	8006d78 <_scanf_float+0x64>
 8006ef0:	3501      	adds	r5, #1
 8006ef2:	b2ed      	uxtb	r5, r5
 8006ef4:	e7d7      	b.n	8006ea6 <_scanf_float+0x192>
 8006ef6:	f1ba 0f01 	cmp.w	sl, #1
 8006efa:	f47f af3d 	bne.w	8006d78 <_scanf_float+0x64>
 8006efe:	f04f 0a02 	mov.w	sl, #2
 8006f02:	e7d0      	b.n	8006ea6 <_scanf_float+0x192>
 8006f04:	b97d      	cbnz	r5, 8006f26 <_scanf_float+0x212>
 8006f06:	f1b9 0f00 	cmp.w	r9, #0
 8006f0a:	f47f af38 	bne.w	8006d7e <_scanf_float+0x6a>
 8006f0e:	6822      	ldr	r2, [r4, #0]
 8006f10:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006f14:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006f18:	f040 8108 	bne.w	800712c <_scanf_float+0x418>
 8006f1c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f20:	6022      	str	r2, [r4, #0]
 8006f22:	2501      	movs	r5, #1
 8006f24:	e7bf      	b.n	8006ea6 <_scanf_float+0x192>
 8006f26:	2d03      	cmp	r5, #3
 8006f28:	d0e2      	beq.n	8006ef0 <_scanf_float+0x1dc>
 8006f2a:	2d05      	cmp	r5, #5
 8006f2c:	e7de      	b.n	8006eec <_scanf_float+0x1d8>
 8006f2e:	2d02      	cmp	r5, #2
 8006f30:	f47f af22 	bne.w	8006d78 <_scanf_float+0x64>
 8006f34:	2503      	movs	r5, #3
 8006f36:	e7b6      	b.n	8006ea6 <_scanf_float+0x192>
 8006f38:	2d06      	cmp	r5, #6
 8006f3a:	f47f af1d 	bne.w	8006d78 <_scanf_float+0x64>
 8006f3e:	2507      	movs	r5, #7
 8006f40:	e7b1      	b.n	8006ea6 <_scanf_float+0x192>
 8006f42:	6822      	ldr	r2, [r4, #0]
 8006f44:	0591      	lsls	r1, r2, #22
 8006f46:	f57f af17 	bpl.w	8006d78 <_scanf_float+0x64>
 8006f4a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	f8cd 9008 	str.w	r9, [sp, #8]
 8006f54:	e7a7      	b.n	8006ea6 <_scanf_float+0x192>
 8006f56:	6822      	ldr	r2, [r4, #0]
 8006f58:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006f5c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006f60:	d006      	beq.n	8006f70 <_scanf_float+0x25c>
 8006f62:	0550      	lsls	r0, r2, #21
 8006f64:	f57f af08 	bpl.w	8006d78 <_scanf_float+0x64>
 8006f68:	f1b9 0f00 	cmp.w	r9, #0
 8006f6c:	f000 80de 	beq.w	800712c <_scanf_float+0x418>
 8006f70:	0591      	lsls	r1, r2, #22
 8006f72:	bf58      	it	pl
 8006f74:	9902      	ldrpl	r1, [sp, #8]
 8006f76:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006f7a:	bf58      	it	pl
 8006f7c:	eba9 0101 	subpl.w	r1, r9, r1
 8006f80:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006f84:	bf58      	it	pl
 8006f86:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006f8a:	6022      	str	r2, [r4, #0]
 8006f8c:	f04f 0900 	mov.w	r9, #0
 8006f90:	e789      	b.n	8006ea6 <_scanf_float+0x192>
 8006f92:	f04f 0a03 	mov.w	sl, #3
 8006f96:	e786      	b.n	8006ea6 <_scanf_float+0x192>
 8006f98:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006f9c:	4639      	mov	r1, r7
 8006f9e:	4640      	mov	r0, r8
 8006fa0:	4798      	blx	r3
 8006fa2:	2800      	cmp	r0, #0
 8006fa4:	f43f aedb 	beq.w	8006d5e <_scanf_float+0x4a>
 8006fa8:	e6e6      	b.n	8006d78 <_scanf_float+0x64>
 8006faa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fb2:	463a      	mov	r2, r7
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	4798      	blx	r3
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	6123      	str	r3, [r4, #16]
 8006fbe:	e6e8      	b.n	8006d92 <_scanf_float+0x7e>
 8006fc0:	1e6b      	subs	r3, r5, #1
 8006fc2:	2b06      	cmp	r3, #6
 8006fc4:	d824      	bhi.n	8007010 <_scanf_float+0x2fc>
 8006fc6:	2d02      	cmp	r5, #2
 8006fc8:	d836      	bhi.n	8007038 <_scanf_float+0x324>
 8006fca:	9b01      	ldr	r3, [sp, #4]
 8006fcc:	429e      	cmp	r6, r3
 8006fce:	f67f aee4 	bls.w	8006d9a <_scanf_float+0x86>
 8006fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006fda:	463a      	mov	r2, r7
 8006fdc:	4640      	mov	r0, r8
 8006fde:	4798      	blx	r3
 8006fe0:	6923      	ldr	r3, [r4, #16]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	6123      	str	r3, [r4, #16]
 8006fe6:	e7f0      	b.n	8006fca <_scanf_float+0x2b6>
 8006fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006fec:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006ff0:	463a      	mov	r2, r7
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4798      	blx	r3
 8006ff6:	6923      	ldr	r3, [r4, #16]
 8006ff8:	3b01      	subs	r3, #1
 8006ffa:	6123      	str	r3, [r4, #16]
 8006ffc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007000:	fa5f fa8a 	uxtb.w	sl, sl
 8007004:	f1ba 0f02 	cmp.w	sl, #2
 8007008:	d1ee      	bne.n	8006fe8 <_scanf_float+0x2d4>
 800700a:	3d03      	subs	r5, #3
 800700c:	b2ed      	uxtb	r5, r5
 800700e:	1b76      	subs	r6, r6, r5
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	05da      	lsls	r2, r3, #23
 8007014:	d530      	bpl.n	8007078 <_scanf_float+0x364>
 8007016:	055b      	lsls	r3, r3, #21
 8007018:	d511      	bpl.n	800703e <_scanf_float+0x32a>
 800701a:	9b01      	ldr	r3, [sp, #4]
 800701c:	429e      	cmp	r6, r3
 800701e:	f67f aebc 	bls.w	8006d9a <_scanf_float+0x86>
 8007022:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007026:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800702a:	463a      	mov	r2, r7
 800702c:	4640      	mov	r0, r8
 800702e:	4798      	blx	r3
 8007030:	6923      	ldr	r3, [r4, #16]
 8007032:	3b01      	subs	r3, #1
 8007034:	6123      	str	r3, [r4, #16]
 8007036:	e7f0      	b.n	800701a <_scanf_float+0x306>
 8007038:	46aa      	mov	sl, r5
 800703a:	46b3      	mov	fp, r6
 800703c:	e7de      	b.n	8006ffc <_scanf_float+0x2e8>
 800703e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007042:	6923      	ldr	r3, [r4, #16]
 8007044:	2965      	cmp	r1, #101	@ 0x65
 8007046:	f103 33ff 	add.w	r3, r3, #4294967295
 800704a:	f106 35ff 	add.w	r5, r6, #4294967295
 800704e:	6123      	str	r3, [r4, #16]
 8007050:	d00c      	beq.n	800706c <_scanf_float+0x358>
 8007052:	2945      	cmp	r1, #69	@ 0x45
 8007054:	d00a      	beq.n	800706c <_scanf_float+0x358>
 8007056:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800705a:	463a      	mov	r2, r7
 800705c:	4640      	mov	r0, r8
 800705e:	4798      	blx	r3
 8007060:	6923      	ldr	r3, [r4, #16]
 8007062:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007066:	3b01      	subs	r3, #1
 8007068:	1eb5      	subs	r5, r6, #2
 800706a:	6123      	str	r3, [r4, #16]
 800706c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007070:	463a      	mov	r2, r7
 8007072:	4640      	mov	r0, r8
 8007074:	4798      	blx	r3
 8007076:	462e      	mov	r6, r5
 8007078:	6822      	ldr	r2, [r4, #0]
 800707a:	f012 0210 	ands.w	r2, r2, #16
 800707e:	d001      	beq.n	8007084 <_scanf_float+0x370>
 8007080:	2000      	movs	r0, #0
 8007082:	e68b      	b.n	8006d9c <_scanf_float+0x88>
 8007084:	7032      	strb	r2, [r6, #0]
 8007086:	6823      	ldr	r3, [r4, #0]
 8007088:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800708c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007090:	d11c      	bne.n	80070cc <_scanf_float+0x3b8>
 8007092:	9b02      	ldr	r3, [sp, #8]
 8007094:	454b      	cmp	r3, r9
 8007096:	eba3 0209 	sub.w	r2, r3, r9
 800709a:	d123      	bne.n	80070e4 <_scanf_float+0x3d0>
 800709c:	9901      	ldr	r1, [sp, #4]
 800709e:	2200      	movs	r2, #0
 80070a0:	4640      	mov	r0, r8
 80070a2:	f002 fbf9 	bl	8009898 <_strtod_r>
 80070a6:	9b03      	ldr	r3, [sp, #12]
 80070a8:	6821      	ldr	r1, [r4, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f011 0f02 	tst.w	r1, #2
 80070b0:	ec57 6b10 	vmov	r6, r7, d0
 80070b4:	f103 0204 	add.w	r2, r3, #4
 80070b8:	d01f      	beq.n	80070fa <_scanf_float+0x3e6>
 80070ba:	9903      	ldr	r1, [sp, #12]
 80070bc:	600a      	str	r2, [r1, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	e9c3 6700 	strd	r6, r7, [r3]
 80070c4:	68e3      	ldr	r3, [r4, #12]
 80070c6:	3301      	adds	r3, #1
 80070c8:	60e3      	str	r3, [r4, #12]
 80070ca:	e7d9      	b.n	8007080 <_scanf_float+0x36c>
 80070cc:	9b04      	ldr	r3, [sp, #16]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0e4      	beq.n	800709c <_scanf_float+0x388>
 80070d2:	9905      	ldr	r1, [sp, #20]
 80070d4:	230a      	movs	r3, #10
 80070d6:	3101      	adds	r1, #1
 80070d8:	4640      	mov	r0, r8
 80070da:	f002 fc5d 	bl	8009998 <_strtol_r>
 80070de:	9b04      	ldr	r3, [sp, #16]
 80070e0:	9e05      	ldr	r6, [sp, #20]
 80070e2:	1ac2      	subs	r2, r0, r3
 80070e4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80070e8:	429e      	cmp	r6, r3
 80070ea:	bf28      	it	cs
 80070ec:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80070f0:	4910      	ldr	r1, [pc, #64]	@ (8007134 <_scanf_float+0x420>)
 80070f2:	4630      	mov	r0, r6
 80070f4:	f000 f8e4 	bl	80072c0 <siprintf>
 80070f8:	e7d0      	b.n	800709c <_scanf_float+0x388>
 80070fa:	f011 0f04 	tst.w	r1, #4
 80070fe:	9903      	ldr	r1, [sp, #12]
 8007100:	600a      	str	r2, [r1, #0]
 8007102:	d1dc      	bne.n	80070be <_scanf_float+0x3aa>
 8007104:	681d      	ldr	r5, [r3, #0]
 8007106:	4632      	mov	r2, r6
 8007108:	463b      	mov	r3, r7
 800710a:	4630      	mov	r0, r6
 800710c:	4639      	mov	r1, r7
 800710e:	f7f9 fd1d 	bl	8000b4c <__aeabi_dcmpun>
 8007112:	b128      	cbz	r0, 8007120 <_scanf_float+0x40c>
 8007114:	4808      	ldr	r0, [pc, #32]	@ (8007138 <_scanf_float+0x424>)
 8007116:	f000 f9b7 	bl	8007488 <nanf>
 800711a:	ed85 0a00 	vstr	s0, [r5]
 800711e:	e7d1      	b.n	80070c4 <_scanf_float+0x3b0>
 8007120:	4630      	mov	r0, r6
 8007122:	4639      	mov	r1, r7
 8007124:	f7f9 fd70 	bl	8000c08 <__aeabi_d2f>
 8007128:	6028      	str	r0, [r5, #0]
 800712a:	e7cb      	b.n	80070c4 <_scanf_float+0x3b0>
 800712c:	f04f 0900 	mov.w	r9, #0
 8007130:	e629      	b.n	8006d86 <_scanf_float+0x72>
 8007132:	bf00      	nop
 8007134:	0800ace4 	.word	0x0800ace4
 8007138:	0800b07d 	.word	0x0800b07d

0800713c <std>:
 800713c:	2300      	movs	r3, #0
 800713e:	b510      	push	{r4, lr}
 8007140:	4604      	mov	r4, r0
 8007142:	e9c0 3300 	strd	r3, r3, [r0]
 8007146:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800714a:	6083      	str	r3, [r0, #8]
 800714c:	8181      	strh	r1, [r0, #12]
 800714e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007150:	81c2      	strh	r2, [r0, #14]
 8007152:	6183      	str	r3, [r0, #24]
 8007154:	4619      	mov	r1, r3
 8007156:	2208      	movs	r2, #8
 8007158:	305c      	adds	r0, #92	@ 0x5c
 800715a:	f000 f914 	bl	8007386 <memset>
 800715e:	4b0d      	ldr	r3, [pc, #52]	@ (8007194 <std+0x58>)
 8007160:	6263      	str	r3, [r4, #36]	@ 0x24
 8007162:	4b0d      	ldr	r3, [pc, #52]	@ (8007198 <std+0x5c>)
 8007164:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007166:	4b0d      	ldr	r3, [pc, #52]	@ (800719c <std+0x60>)
 8007168:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800716a:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <std+0x64>)
 800716c:	6323      	str	r3, [r4, #48]	@ 0x30
 800716e:	4b0d      	ldr	r3, [pc, #52]	@ (80071a4 <std+0x68>)
 8007170:	6224      	str	r4, [r4, #32]
 8007172:	429c      	cmp	r4, r3
 8007174:	d006      	beq.n	8007184 <std+0x48>
 8007176:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800717a:	4294      	cmp	r4, r2
 800717c:	d002      	beq.n	8007184 <std+0x48>
 800717e:	33d0      	adds	r3, #208	@ 0xd0
 8007180:	429c      	cmp	r4, r3
 8007182:	d105      	bne.n	8007190 <std+0x54>
 8007184:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800718c:	f000 b978 	b.w	8007480 <__retarget_lock_init_recursive>
 8007190:	bd10      	pop	{r4, pc}
 8007192:	bf00      	nop
 8007194:	08007301 	.word	0x08007301
 8007198:	08007323 	.word	0x08007323
 800719c:	0800735b 	.word	0x0800735b
 80071a0:	0800737f 	.word	0x0800737f
 80071a4:	20000aac 	.word	0x20000aac

080071a8 <stdio_exit_handler>:
 80071a8:	4a02      	ldr	r2, [pc, #8]	@ (80071b4 <stdio_exit_handler+0xc>)
 80071aa:	4903      	ldr	r1, [pc, #12]	@ (80071b8 <stdio_exit_handler+0x10>)
 80071ac:	4803      	ldr	r0, [pc, #12]	@ (80071bc <stdio_exit_handler+0x14>)
 80071ae:	f000 b869 	b.w	8007284 <_fwalk_sglue>
 80071b2:	bf00      	nop
 80071b4:	20000010 	.word	0x20000010
 80071b8:	08009d55 	.word	0x08009d55
 80071bc:	20000020 	.word	0x20000020

080071c0 <cleanup_stdio>:
 80071c0:	6841      	ldr	r1, [r0, #4]
 80071c2:	4b0c      	ldr	r3, [pc, #48]	@ (80071f4 <cleanup_stdio+0x34>)
 80071c4:	4299      	cmp	r1, r3
 80071c6:	b510      	push	{r4, lr}
 80071c8:	4604      	mov	r4, r0
 80071ca:	d001      	beq.n	80071d0 <cleanup_stdio+0x10>
 80071cc:	f002 fdc2 	bl	8009d54 <_fflush_r>
 80071d0:	68a1      	ldr	r1, [r4, #8]
 80071d2:	4b09      	ldr	r3, [pc, #36]	@ (80071f8 <cleanup_stdio+0x38>)
 80071d4:	4299      	cmp	r1, r3
 80071d6:	d002      	beq.n	80071de <cleanup_stdio+0x1e>
 80071d8:	4620      	mov	r0, r4
 80071da:	f002 fdbb 	bl	8009d54 <_fflush_r>
 80071de:	68e1      	ldr	r1, [r4, #12]
 80071e0:	4b06      	ldr	r3, [pc, #24]	@ (80071fc <cleanup_stdio+0x3c>)
 80071e2:	4299      	cmp	r1, r3
 80071e4:	d004      	beq.n	80071f0 <cleanup_stdio+0x30>
 80071e6:	4620      	mov	r0, r4
 80071e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ec:	f002 bdb2 	b.w	8009d54 <_fflush_r>
 80071f0:	bd10      	pop	{r4, pc}
 80071f2:	bf00      	nop
 80071f4:	20000aac 	.word	0x20000aac
 80071f8:	20000b14 	.word	0x20000b14
 80071fc:	20000b7c 	.word	0x20000b7c

08007200 <global_stdio_init.part.0>:
 8007200:	b510      	push	{r4, lr}
 8007202:	4b0b      	ldr	r3, [pc, #44]	@ (8007230 <global_stdio_init.part.0+0x30>)
 8007204:	4c0b      	ldr	r4, [pc, #44]	@ (8007234 <global_stdio_init.part.0+0x34>)
 8007206:	4a0c      	ldr	r2, [pc, #48]	@ (8007238 <global_stdio_init.part.0+0x38>)
 8007208:	601a      	str	r2, [r3, #0]
 800720a:	4620      	mov	r0, r4
 800720c:	2200      	movs	r2, #0
 800720e:	2104      	movs	r1, #4
 8007210:	f7ff ff94 	bl	800713c <std>
 8007214:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007218:	2201      	movs	r2, #1
 800721a:	2109      	movs	r1, #9
 800721c:	f7ff ff8e 	bl	800713c <std>
 8007220:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007224:	2202      	movs	r2, #2
 8007226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800722a:	2112      	movs	r1, #18
 800722c:	f7ff bf86 	b.w	800713c <std>
 8007230:	20000be4 	.word	0x20000be4
 8007234:	20000aac 	.word	0x20000aac
 8007238:	080071a9 	.word	0x080071a9

0800723c <__sfp_lock_acquire>:
 800723c:	4801      	ldr	r0, [pc, #4]	@ (8007244 <__sfp_lock_acquire+0x8>)
 800723e:	f000 b920 	b.w	8007482 <__retarget_lock_acquire_recursive>
 8007242:	bf00      	nop
 8007244:	20000bed 	.word	0x20000bed

08007248 <__sfp_lock_release>:
 8007248:	4801      	ldr	r0, [pc, #4]	@ (8007250 <__sfp_lock_release+0x8>)
 800724a:	f000 b91b 	b.w	8007484 <__retarget_lock_release_recursive>
 800724e:	bf00      	nop
 8007250:	20000bed 	.word	0x20000bed

08007254 <__sinit>:
 8007254:	b510      	push	{r4, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	f7ff fff0 	bl	800723c <__sfp_lock_acquire>
 800725c:	6a23      	ldr	r3, [r4, #32]
 800725e:	b11b      	cbz	r3, 8007268 <__sinit+0x14>
 8007260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007264:	f7ff bff0 	b.w	8007248 <__sfp_lock_release>
 8007268:	4b04      	ldr	r3, [pc, #16]	@ (800727c <__sinit+0x28>)
 800726a:	6223      	str	r3, [r4, #32]
 800726c:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <__sinit+0x2c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d1f5      	bne.n	8007260 <__sinit+0xc>
 8007274:	f7ff ffc4 	bl	8007200 <global_stdio_init.part.0>
 8007278:	e7f2      	b.n	8007260 <__sinit+0xc>
 800727a:	bf00      	nop
 800727c:	080071c1 	.word	0x080071c1
 8007280:	20000be4 	.word	0x20000be4

08007284 <_fwalk_sglue>:
 8007284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007288:	4607      	mov	r7, r0
 800728a:	4688      	mov	r8, r1
 800728c:	4614      	mov	r4, r2
 800728e:	2600      	movs	r6, #0
 8007290:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007294:	f1b9 0901 	subs.w	r9, r9, #1
 8007298:	d505      	bpl.n	80072a6 <_fwalk_sglue+0x22>
 800729a:	6824      	ldr	r4, [r4, #0]
 800729c:	2c00      	cmp	r4, #0
 800729e:	d1f7      	bne.n	8007290 <_fwalk_sglue+0xc>
 80072a0:	4630      	mov	r0, r6
 80072a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d907      	bls.n	80072bc <_fwalk_sglue+0x38>
 80072ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072b0:	3301      	adds	r3, #1
 80072b2:	d003      	beq.n	80072bc <_fwalk_sglue+0x38>
 80072b4:	4629      	mov	r1, r5
 80072b6:	4638      	mov	r0, r7
 80072b8:	47c0      	blx	r8
 80072ba:	4306      	orrs	r6, r0
 80072bc:	3568      	adds	r5, #104	@ 0x68
 80072be:	e7e9      	b.n	8007294 <_fwalk_sglue+0x10>

080072c0 <siprintf>:
 80072c0:	b40e      	push	{r1, r2, r3}
 80072c2:	b500      	push	{lr}
 80072c4:	b09c      	sub	sp, #112	@ 0x70
 80072c6:	ab1d      	add	r3, sp, #116	@ 0x74
 80072c8:	9002      	str	r0, [sp, #8]
 80072ca:	9006      	str	r0, [sp, #24]
 80072cc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80072d0:	4809      	ldr	r0, [pc, #36]	@ (80072f8 <siprintf+0x38>)
 80072d2:	9107      	str	r1, [sp, #28]
 80072d4:	9104      	str	r1, [sp, #16]
 80072d6:	4909      	ldr	r1, [pc, #36]	@ (80072fc <siprintf+0x3c>)
 80072d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072dc:	9105      	str	r1, [sp, #20]
 80072de:	6800      	ldr	r0, [r0, #0]
 80072e0:	9301      	str	r3, [sp, #4]
 80072e2:	a902      	add	r1, sp, #8
 80072e4:	f002 fbb6 	bl	8009a54 <_svfiprintf_r>
 80072e8:	9b02      	ldr	r3, [sp, #8]
 80072ea:	2200      	movs	r2, #0
 80072ec:	701a      	strb	r2, [r3, #0]
 80072ee:	b01c      	add	sp, #112	@ 0x70
 80072f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072f4:	b003      	add	sp, #12
 80072f6:	4770      	bx	lr
 80072f8:	2000001c 	.word	0x2000001c
 80072fc:	ffff0208 	.word	0xffff0208

08007300 <__sread>:
 8007300:	b510      	push	{r4, lr}
 8007302:	460c      	mov	r4, r1
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	f000 f86c 	bl	80073e4 <_read_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	bfab      	itete	ge
 8007310:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007312:	89a3      	ldrhlt	r3, [r4, #12]
 8007314:	181b      	addge	r3, r3, r0
 8007316:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800731a:	bfac      	ite	ge
 800731c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800731e:	81a3      	strhlt	r3, [r4, #12]
 8007320:	bd10      	pop	{r4, pc}

08007322 <__swrite>:
 8007322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	461f      	mov	r7, r3
 8007328:	898b      	ldrh	r3, [r1, #12]
 800732a:	05db      	lsls	r3, r3, #23
 800732c:	4605      	mov	r5, r0
 800732e:	460c      	mov	r4, r1
 8007330:	4616      	mov	r6, r2
 8007332:	d505      	bpl.n	8007340 <__swrite+0x1e>
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	2302      	movs	r3, #2
 800733a:	2200      	movs	r2, #0
 800733c:	f000 f840 	bl	80073c0 <_lseek_r>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007346:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800734a:	81a3      	strh	r3, [r4, #12]
 800734c:	4632      	mov	r2, r6
 800734e:	463b      	mov	r3, r7
 8007350:	4628      	mov	r0, r5
 8007352:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007356:	f000 b857 	b.w	8007408 <_write_r>

0800735a <__sseek>:
 800735a:	b510      	push	{r4, lr}
 800735c:	460c      	mov	r4, r1
 800735e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007362:	f000 f82d 	bl	80073c0 <_lseek_r>
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	bf15      	itete	ne
 800736c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800736e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007372:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007376:	81a3      	strheq	r3, [r4, #12]
 8007378:	bf18      	it	ne
 800737a:	81a3      	strhne	r3, [r4, #12]
 800737c:	bd10      	pop	{r4, pc}

0800737e <__sclose>:
 800737e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007382:	f000 b80d 	b.w	80073a0 <_close_r>

08007386 <memset>:
 8007386:	4402      	add	r2, r0
 8007388:	4603      	mov	r3, r0
 800738a:	4293      	cmp	r3, r2
 800738c:	d100      	bne.n	8007390 <memset+0xa>
 800738e:	4770      	bx	lr
 8007390:	f803 1b01 	strb.w	r1, [r3], #1
 8007394:	e7f9      	b.n	800738a <memset+0x4>
	...

08007398 <_localeconv_r>:
 8007398:	4800      	ldr	r0, [pc, #0]	@ (800739c <_localeconv_r+0x4>)
 800739a:	4770      	bx	lr
 800739c:	2000015c 	.word	0x2000015c

080073a0 <_close_r>:
 80073a0:	b538      	push	{r3, r4, r5, lr}
 80073a2:	4d06      	ldr	r5, [pc, #24]	@ (80073bc <_close_r+0x1c>)
 80073a4:	2300      	movs	r3, #0
 80073a6:	4604      	mov	r4, r0
 80073a8:	4608      	mov	r0, r1
 80073aa:	602b      	str	r3, [r5, #0]
 80073ac:	f7fb f82c 	bl	8002408 <_close>
 80073b0:	1c43      	adds	r3, r0, #1
 80073b2:	d102      	bne.n	80073ba <_close_r+0x1a>
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	b103      	cbz	r3, 80073ba <_close_r+0x1a>
 80073b8:	6023      	str	r3, [r4, #0]
 80073ba:	bd38      	pop	{r3, r4, r5, pc}
 80073bc:	20000be8 	.word	0x20000be8

080073c0 <_lseek_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d07      	ldr	r5, [pc, #28]	@ (80073e0 <_lseek_r+0x20>)
 80073c4:	4604      	mov	r4, r0
 80073c6:	4608      	mov	r0, r1
 80073c8:	4611      	mov	r1, r2
 80073ca:	2200      	movs	r2, #0
 80073cc:	602a      	str	r2, [r5, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7fb f841 	bl	8002456 <_lseek>
 80073d4:	1c43      	adds	r3, r0, #1
 80073d6:	d102      	bne.n	80073de <_lseek_r+0x1e>
 80073d8:	682b      	ldr	r3, [r5, #0]
 80073da:	b103      	cbz	r3, 80073de <_lseek_r+0x1e>
 80073dc:	6023      	str	r3, [r4, #0]
 80073de:	bd38      	pop	{r3, r4, r5, pc}
 80073e0:	20000be8 	.word	0x20000be8

080073e4 <_read_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4d07      	ldr	r5, [pc, #28]	@ (8007404 <_read_r+0x20>)
 80073e8:	4604      	mov	r4, r0
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	2200      	movs	r2, #0
 80073f0:	602a      	str	r2, [r5, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	f7fa ffcf 	bl	8002396 <_read>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d102      	bne.n	8007402 <_read_r+0x1e>
 80073fc:	682b      	ldr	r3, [r5, #0]
 80073fe:	b103      	cbz	r3, 8007402 <_read_r+0x1e>
 8007400:	6023      	str	r3, [r4, #0]
 8007402:	bd38      	pop	{r3, r4, r5, pc}
 8007404:	20000be8 	.word	0x20000be8

08007408 <_write_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d07      	ldr	r5, [pc, #28]	@ (8007428 <_write_r+0x20>)
 800740c:	4604      	mov	r4, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7fa ffda 	bl	80023d0 <_write>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_write_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_write_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20000be8 	.word	0x20000be8

0800742c <__errno>:
 800742c:	4b01      	ldr	r3, [pc, #4]	@ (8007434 <__errno+0x8>)
 800742e:	6818      	ldr	r0, [r3, #0]
 8007430:	4770      	bx	lr
 8007432:	bf00      	nop
 8007434:	2000001c 	.word	0x2000001c

08007438 <__libc_init_array>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	4d0d      	ldr	r5, [pc, #52]	@ (8007470 <__libc_init_array+0x38>)
 800743c:	4c0d      	ldr	r4, [pc, #52]	@ (8007474 <__libc_init_array+0x3c>)
 800743e:	1b64      	subs	r4, r4, r5
 8007440:	10a4      	asrs	r4, r4, #2
 8007442:	2600      	movs	r6, #0
 8007444:	42a6      	cmp	r6, r4
 8007446:	d109      	bne.n	800745c <__libc_init_array+0x24>
 8007448:	4d0b      	ldr	r5, [pc, #44]	@ (8007478 <__libc_init_array+0x40>)
 800744a:	4c0c      	ldr	r4, [pc, #48]	@ (800747c <__libc_init_array+0x44>)
 800744c:	f003 fb72 	bl	800ab34 <_init>
 8007450:	1b64      	subs	r4, r4, r5
 8007452:	10a4      	asrs	r4, r4, #2
 8007454:	2600      	movs	r6, #0
 8007456:	42a6      	cmp	r6, r4
 8007458:	d105      	bne.n	8007466 <__libc_init_array+0x2e>
 800745a:	bd70      	pop	{r4, r5, r6, pc}
 800745c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007460:	4798      	blx	r3
 8007462:	3601      	adds	r6, #1
 8007464:	e7ee      	b.n	8007444 <__libc_init_array+0xc>
 8007466:	f855 3b04 	ldr.w	r3, [r5], #4
 800746a:	4798      	blx	r3
 800746c:	3601      	adds	r6, #1
 800746e:	e7f2      	b.n	8007456 <__libc_init_array+0x1e>
 8007470:	0800b0e8 	.word	0x0800b0e8
 8007474:	0800b0e8 	.word	0x0800b0e8
 8007478:	0800b0e8 	.word	0x0800b0e8
 800747c:	0800b0ec 	.word	0x0800b0ec

08007480 <__retarget_lock_init_recursive>:
 8007480:	4770      	bx	lr

08007482 <__retarget_lock_acquire_recursive>:
 8007482:	4770      	bx	lr

08007484 <__retarget_lock_release_recursive>:
 8007484:	4770      	bx	lr
	...

08007488 <nanf>:
 8007488:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007490 <nanf+0x8>
 800748c:	4770      	bx	lr
 800748e:	bf00      	nop
 8007490:	7fc00000 	.word	0x7fc00000

08007494 <quorem>:
 8007494:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007498:	6903      	ldr	r3, [r0, #16]
 800749a:	690c      	ldr	r4, [r1, #16]
 800749c:	42a3      	cmp	r3, r4
 800749e:	4607      	mov	r7, r0
 80074a0:	db7e      	blt.n	80075a0 <quorem+0x10c>
 80074a2:	3c01      	subs	r4, #1
 80074a4:	f101 0814 	add.w	r8, r1, #20
 80074a8:	00a3      	lsls	r3, r4, #2
 80074aa:	f100 0514 	add.w	r5, r0, #20
 80074ae:	9300      	str	r3, [sp, #0]
 80074b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074b4:	9301      	str	r3, [sp, #4]
 80074b6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074be:	3301      	adds	r3, #1
 80074c0:	429a      	cmp	r2, r3
 80074c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074c6:	fbb2 f6f3 	udiv	r6, r2, r3
 80074ca:	d32e      	bcc.n	800752a <quorem+0x96>
 80074cc:	f04f 0a00 	mov.w	sl, #0
 80074d0:	46c4      	mov	ip, r8
 80074d2:	46ae      	mov	lr, r5
 80074d4:	46d3      	mov	fp, sl
 80074d6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80074da:	b298      	uxth	r0, r3
 80074dc:	fb06 a000 	mla	r0, r6, r0, sl
 80074e0:	0c02      	lsrs	r2, r0, #16
 80074e2:	0c1b      	lsrs	r3, r3, #16
 80074e4:	fb06 2303 	mla	r3, r6, r3, r2
 80074e8:	f8de 2000 	ldr.w	r2, [lr]
 80074ec:	b280      	uxth	r0, r0
 80074ee:	b292      	uxth	r2, r2
 80074f0:	1a12      	subs	r2, r2, r0
 80074f2:	445a      	add	r2, fp
 80074f4:	f8de 0000 	ldr.w	r0, [lr]
 80074f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007502:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007506:	b292      	uxth	r2, r2
 8007508:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800750c:	45e1      	cmp	r9, ip
 800750e:	f84e 2b04 	str.w	r2, [lr], #4
 8007512:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007516:	d2de      	bcs.n	80074d6 <quorem+0x42>
 8007518:	9b00      	ldr	r3, [sp, #0]
 800751a:	58eb      	ldr	r3, [r5, r3]
 800751c:	b92b      	cbnz	r3, 800752a <quorem+0x96>
 800751e:	9b01      	ldr	r3, [sp, #4]
 8007520:	3b04      	subs	r3, #4
 8007522:	429d      	cmp	r5, r3
 8007524:	461a      	mov	r2, r3
 8007526:	d32f      	bcc.n	8007588 <quorem+0xf4>
 8007528:	613c      	str	r4, [r7, #16]
 800752a:	4638      	mov	r0, r7
 800752c:	f001 f9c4 	bl	80088b8 <__mcmp>
 8007530:	2800      	cmp	r0, #0
 8007532:	db25      	blt.n	8007580 <quorem+0xec>
 8007534:	4629      	mov	r1, r5
 8007536:	2000      	movs	r0, #0
 8007538:	f858 2b04 	ldr.w	r2, [r8], #4
 800753c:	f8d1 c000 	ldr.w	ip, [r1]
 8007540:	fa1f fe82 	uxth.w	lr, r2
 8007544:	fa1f f38c 	uxth.w	r3, ip
 8007548:	eba3 030e 	sub.w	r3, r3, lr
 800754c:	4403      	add	r3, r0
 800754e:	0c12      	lsrs	r2, r2, #16
 8007550:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007554:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800755e:	45c1      	cmp	r9, r8
 8007560:	f841 3b04 	str.w	r3, [r1], #4
 8007564:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007568:	d2e6      	bcs.n	8007538 <quorem+0xa4>
 800756a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800756e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007572:	b922      	cbnz	r2, 800757e <quorem+0xea>
 8007574:	3b04      	subs	r3, #4
 8007576:	429d      	cmp	r5, r3
 8007578:	461a      	mov	r2, r3
 800757a:	d30b      	bcc.n	8007594 <quorem+0x100>
 800757c:	613c      	str	r4, [r7, #16]
 800757e:	3601      	adds	r6, #1
 8007580:	4630      	mov	r0, r6
 8007582:	b003      	add	sp, #12
 8007584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007588:	6812      	ldr	r2, [r2, #0]
 800758a:	3b04      	subs	r3, #4
 800758c:	2a00      	cmp	r2, #0
 800758e:	d1cb      	bne.n	8007528 <quorem+0x94>
 8007590:	3c01      	subs	r4, #1
 8007592:	e7c6      	b.n	8007522 <quorem+0x8e>
 8007594:	6812      	ldr	r2, [r2, #0]
 8007596:	3b04      	subs	r3, #4
 8007598:	2a00      	cmp	r2, #0
 800759a:	d1ef      	bne.n	800757c <quorem+0xe8>
 800759c:	3c01      	subs	r4, #1
 800759e:	e7ea      	b.n	8007576 <quorem+0xe2>
 80075a0:	2000      	movs	r0, #0
 80075a2:	e7ee      	b.n	8007582 <quorem+0xee>
 80075a4:	0000      	movs	r0, r0
	...

080075a8 <_dtoa_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	69c7      	ldr	r7, [r0, #28]
 80075ae:	b099      	sub	sp, #100	@ 0x64
 80075b0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075b4:	ec55 4b10 	vmov	r4, r5, d0
 80075b8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80075ba:	9109      	str	r1, [sp, #36]	@ 0x24
 80075bc:	4683      	mov	fp, r0
 80075be:	920e      	str	r2, [sp, #56]	@ 0x38
 80075c0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80075c2:	b97f      	cbnz	r7, 80075e4 <_dtoa_r+0x3c>
 80075c4:	2010      	movs	r0, #16
 80075c6:	f000 fdfd 	bl	80081c4 <malloc>
 80075ca:	4602      	mov	r2, r0
 80075cc:	f8cb 001c 	str.w	r0, [fp, #28]
 80075d0:	b920      	cbnz	r0, 80075dc <_dtoa_r+0x34>
 80075d2:	4ba7      	ldr	r3, [pc, #668]	@ (8007870 <_dtoa_r+0x2c8>)
 80075d4:	21ef      	movs	r1, #239	@ 0xef
 80075d6:	48a7      	ldr	r0, [pc, #668]	@ (8007874 <_dtoa_r+0x2cc>)
 80075d8:	f002 fc36 	bl	8009e48 <__assert_func>
 80075dc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80075e0:	6007      	str	r7, [r0, #0]
 80075e2:	60c7      	str	r7, [r0, #12]
 80075e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	b159      	cbz	r1, 8007604 <_dtoa_r+0x5c>
 80075ec:	685a      	ldr	r2, [r3, #4]
 80075ee:	604a      	str	r2, [r1, #4]
 80075f0:	2301      	movs	r3, #1
 80075f2:	4093      	lsls	r3, r2
 80075f4:	608b      	str	r3, [r1, #8]
 80075f6:	4658      	mov	r0, fp
 80075f8:	f000 feda 	bl	80083b0 <_Bfree>
 80075fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	1e2b      	subs	r3, r5, #0
 8007606:	bfb9      	ittee	lt
 8007608:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800760c:	9303      	strlt	r3, [sp, #12]
 800760e:	2300      	movge	r3, #0
 8007610:	6033      	strge	r3, [r6, #0]
 8007612:	9f03      	ldr	r7, [sp, #12]
 8007614:	4b98      	ldr	r3, [pc, #608]	@ (8007878 <_dtoa_r+0x2d0>)
 8007616:	bfbc      	itt	lt
 8007618:	2201      	movlt	r2, #1
 800761a:	6032      	strlt	r2, [r6, #0]
 800761c:	43bb      	bics	r3, r7
 800761e:	d112      	bne.n	8007646 <_dtoa_r+0x9e>
 8007620:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007622:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800762c:	4323      	orrs	r3, r4
 800762e:	f000 854d 	beq.w	80080cc <_dtoa_r+0xb24>
 8007632:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007634:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800788c <_dtoa_r+0x2e4>
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 854f 	beq.w	80080dc <_dtoa_r+0xb34>
 800763e:	f10a 0303 	add.w	r3, sl, #3
 8007642:	f000 bd49 	b.w	80080d8 <_dtoa_r+0xb30>
 8007646:	ed9d 7b02 	vldr	d7, [sp, #8]
 800764a:	2200      	movs	r2, #0
 800764c:	ec51 0b17 	vmov	r0, r1, d7
 8007650:	2300      	movs	r3, #0
 8007652:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007656:	f7f9 fa47 	bl	8000ae8 <__aeabi_dcmpeq>
 800765a:	4680      	mov	r8, r0
 800765c:	b158      	cbz	r0, 8007676 <_dtoa_r+0xce>
 800765e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007660:	2301      	movs	r3, #1
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007666:	b113      	cbz	r3, 800766e <_dtoa_r+0xc6>
 8007668:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800766a:	4b84      	ldr	r3, [pc, #528]	@ (800787c <_dtoa_r+0x2d4>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007890 <_dtoa_r+0x2e8>
 8007672:	f000 bd33 	b.w	80080dc <_dtoa_r+0xb34>
 8007676:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800767a:	aa16      	add	r2, sp, #88	@ 0x58
 800767c:	a917      	add	r1, sp, #92	@ 0x5c
 800767e:	4658      	mov	r0, fp
 8007680:	f001 fa3a 	bl	8008af8 <__d2b>
 8007684:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007688:	4681      	mov	r9, r0
 800768a:	2e00      	cmp	r6, #0
 800768c:	d077      	beq.n	800777e <_dtoa_r+0x1d6>
 800768e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007690:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8007694:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007698:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800769c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80076a0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80076a4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80076a8:	4619      	mov	r1, r3
 80076aa:	2200      	movs	r2, #0
 80076ac:	4b74      	ldr	r3, [pc, #464]	@ (8007880 <_dtoa_r+0x2d8>)
 80076ae:	f7f8 fdfb 	bl	80002a8 <__aeabi_dsub>
 80076b2:	a369      	add	r3, pc, #420	@ (adr r3, 8007858 <_dtoa_r+0x2b0>)
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	f7f8 ffae 	bl	8000618 <__aeabi_dmul>
 80076bc:	a368      	add	r3, pc, #416	@ (adr r3, 8007860 <_dtoa_r+0x2b8>)
 80076be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c2:	f7f8 fdf3 	bl	80002ac <__adddf3>
 80076c6:	4604      	mov	r4, r0
 80076c8:	4630      	mov	r0, r6
 80076ca:	460d      	mov	r5, r1
 80076cc:	f7f8 ff3a 	bl	8000544 <__aeabi_i2d>
 80076d0:	a365      	add	r3, pc, #404	@ (adr r3, 8007868 <_dtoa_r+0x2c0>)
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f7f8 ff9f 	bl	8000618 <__aeabi_dmul>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	f7f8 fde3 	bl	80002ac <__adddf3>
 80076e6:	4604      	mov	r4, r0
 80076e8:	460d      	mov	r5, r1
 80076ea:	f7f9 fa45 	bl	8000b78 <__aeabi_d2iz>
 80076ee:	2200      	movs	r2, #0
 80076f0:	4607      	mov	r7, r0
 80076f2:	2300      	movs	r3, #0
 80076f4:	4620      	mov	r0, r4
 80076f6:	4629      	mov	r1, r5
 80076f8:	f7f9 fa00 	bl	8000afc <__aeabi_dcmplt>
 80076fc:	b140      	cbz	r0, 8007710 <_dtoa_r+0x168>
 80076fe:	4638      	mov	r0, r7
 8007700:	f7f8 ff20 	bl	8000544 <__aeabi_i2d>
 8007704:	4622      	mov	r2, r4
 8007706:	462b      	mov	r3, r5
 8007708:	f7f9 f9ee 	bl	8000ae8 <__aeabi_dcmpeq>
 800770c:	b900      	cbnz	r0, 8007710 <_dtoa_r+0x168>
 800770e:	3f01      	subs	r7, #1
 8007710:	2f16      	cmp	r7, #22
 8007712:	d851      	bhi.n	80077b8 <_dtoa_r+0x210>
 8007714:	4b5b      	ldr	r3, [pc, #364]	@ (8007884 <_dtoa_r+0x2dc>)
 8007716:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007722:	f7f9 f9eb 	bl	8000afc <__aeabi_dcmplt>
 8007726:	2800      	cmp	r0, #0
 8007728:	d048      	beq.n	80077bc <_dtoa_r+0x214>
 800772a:	3f01      	subs	r7, #1
 800772c:	2300      	movs	r3, #0
 800772e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007730:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007732:	1b9b      	subs	r3, r3, r6
 8007734:	1e5a      	subs	r2, r3, #1
 8007736:	bf44      	itt	mi
 8007738:	f1c3 0801 	rsbmi	r8, r3, #1
 800773c:	2300      	movmi	r3, #0
 800773e:	9208      	str	r2, [sp, #32]
 8007740:	bf54      	ite	pl
 8007742:	f04f 0800 	movpl.w	r8, #0
 8007746:	9308      	strmi	r3, [sp, #32]
 8007748:	2f00      	cmp	r7, #0
 800774a:	db39      	blt.n	80077c0 <_dtoa_r+0x218>
 800774c:	9b08      	ldr	r3, [sp, #32]
 800774e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007750:	443b      	add	r3, r7
 8007752:	9308      	str	r3, [sp, #32]
 8007754:	2300      	movs	r3, #0
 8007756:	930a      	str	r3, [sp, #40]	@ 0x28
 8007758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775a:	2b09      	cmp	r3, #9
 800775c:	d864      	bhi.n	8007828 <_dtoa_r+0x280>
 800775e:	2b05      	cmp	r3, #5
 8007760:	bfc4      	itt	gt
 8007762:	3b04      	subgt	r3, #4
 8007764:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007766:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007768:	f1a3 0302 	sub.w	r3, r3, #2
 800776c:	bfcc      	ite	gt
 800776e:	2400      	movgt	r4, #0
 8007770:	2401      	movle	r4, #1
 8007772:	2b03      	cmp	r3, #3
 8007774:	d863      	bhi.n	800783e <_dtoa_r+0x296>
 8007776:	e8df f003 	tbb	[pc, r3]
 800777a:	372a      	.short	0x372a
 800777c:	5535      	.short	0x5535
 800777e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007782:	441e      	add	r6, r3
 8007784:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007788:	2b20      	cmp	r3, #32
 800778a:	bfc1      	itttt	gt
 800778c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007790:	409f      	lslgt	r7, r3
 8007792:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007796:	fa24 f303 	lsrgt.w	r3, r4, r3
 800779a:	bfd6      	itet	le
 800779c:	f1c3 0320 	rsble	r3, r3, #32
 80077a0:	ea47 0003 	orrgt.w	r0, r7, r3
 80077a4:	fa04 f003 	lslle.w	r0, r4, r3
 80077a8:	f7f8 febc 	bl	8000524 <__aeabi_ui2d>
 80077ac:	2201      	movs	r2, #1
 80077ae:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80077b2:	3e01      	subs	r6, #1
 80077b4:	9214      	str	r2, [sp, #80]	@ 0x50
 80077b6:	e777      	b.n	80076a8 <_dtoa_r+0x100>
 80077b8:	2301      	movs	r3, #1
 80077ba:	e7b8      	b.n	800772e <_dtoa_r+0x186>
 80077bc:	9012      	str	r0, [sp, #72]	@ 0x48
 80077be:	e7b7      	b.n	8007730 <_dtoa_r+0x188>
 80077c0:	427b      	negs	r3, r7
 80077c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077c4:	2300      	movs	r3, #0
 80077c6:	eba8 0807 	sub.w	r8, r8, r7
 80077ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 80077cc:	e7c4      	b.n	8007758 <_dtoa_r+0x1b0>
 80077ce:	2300      	movs	r3, #0
 80077d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077d2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dc35      	bgt.n	8007844 <_dtoa_r+0x29c>
 80077d8:	2301      	movs	r3, #1
 80077da:	9300      	str	r3, [sp, #0]
 80077dc:	9307      	str	r3, [sp, #28]
 80077de:	461a      	mov	r2, r3
 80077e0:	920e      	str	r2, [sp, #56]	@ 0x38
 80077e2:	e00b      	b.n	80077fc <_dtoa_r+0x254>
 80077e4:	2301      	movs	r3, #1
 80077e6:	e7f3      	b.n	80077d0 <_dtoa_r+0x228>
 80077e8:	2300      	movs	r3, #0
 80077ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80077ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077ee:	18fb      	adds	r3, r7, r3
 80077f0:	9300      	str	r3, [sp, #0]
 80077f2:	3301      	adds	r3, #1
 80077f4:	2b01      	cmp	r3, #1
 80077f6:	9307      	str	r3, [sp, #28]
 80077f8:	bfb8      	it	lt
 80077fa:	2301      	movlt	r3, #1
 80077fc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007800:	2100      	movs	r1, #0
 8007802:	2204      	movs	r2, #4
 8007804:	f102 0514 	add.w	r5, r2, #20
 8007808:	429d      	cmp	r5, r3
 800780a:	d91f      	bls.n	800784c <_dtoa_r+0x2a4>
 800780c:	6041      	str	r1, [r0, #4]
 800780e:	4658      	mov	r0, fp
 8007810:	f000 fd8e 	bl	8008330 <_Balloc>
 8007814:	4682      	mov	sl, r0
 8007816:	2800      	cmp	r0, #0
 8007818:	d13c      	bne.n	8007894 <_dtoa_r+0x2ec>
 800781a:	4b1b      	ldr	r3, [pc, #108]	@ (8007888 <_dtoa_r+0x2e0>)
 800781c:	4602      	mov	r2, r0
 800781e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007822:	e6d8      	b.n	80075d6 <_dtoa_r+0x2e>
 8007824:	2301      	movs	r3, #1
 8007826:	e7e0      	b.n	80077ea <_dtoa_r+0x242>
 8007828:	2401      	movs	r4, #1
 800782a:	2300      	movs	r3, #0
 800782c:	9309      	str	r3, [sp, #36]	@ 0x24
 800782e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007830:	f04f 33ff 	mov.w	r3, #4294967295
 8007834:	9300      	str	r3, [sp, #0]
 8007836:	9307      	str	r3, [sp, #28]
 8007838:	2200      	movs	r2, #0
 800783a:	2312      	movs	r3, #18
 800783c:	e7d0      	b.n	80077e0 <_dtoa_r+0x238>
 800783e:	2301      	movs	r3, #1
 8007840:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007842:	e7f5      	b.n	8007830 <_dtoa_r+0x288>
 8007844:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007846:	9300      	str	r3, [sp, #0]
 8007848:	9307      	str	r3, [sp, #28]
 800784a:	e7d7      	b.n	80077fc <_dtoa_r+0x254>
 800784c:	3101      	adds	r1, #1
 800784e:	0052      	lsls	r2, r2, #1
 8007850:	e7d8      	b.n	8007804 <_dtoa_r+0x25c>
 8007852:	bf00      	nop
 8007854:	f3af 8000 	nop.w
 8007858:	636f4361 	.word	0x636f4361
 800785c:	3fd287a7 	.word	0x3fd287a7
 8007860:	8b60c8b3 	.word	0x8b60c8b3
 8007864:	3fc68a28 	.word	0x3fc68a28
 8007868:	509f79fb 	.word	0x509f79fb
 800786c:	3fd34413 	.word	0x3fd34413
 8007870:	0800acf6 	.word	0x0800acf6
 8007874:	0800ad0d 	.word	0x0800ad0d
 8007878:	7ff00000 	.word	0x7ff00000
 800787c:	0800acc1 	.word	0x0800acc1
 8007880:	3ff80000 	.word	0x3ff80000
 8007884:	0800ae08 	.word	0x0800ae08
 8007888:	0800ad65 	.word	0x0800ad65
 800788c:	0800acf2 	.word	0x0800acf2
 8007890:	0800acc0 	.word	0x0800acc0
 8007894:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007898:	6018      	str	r0, [r3, #0]
 800789a:	9b07      	ldr	r3, [sp, #28]
 800789c:	2b0e      	cmp	r3, #14
 800789e:	f200 80a4 	bhi.w	80079ea <_dtoa_r+0x442>
 80078a2:	2c00      	cmp	r4, #0
 80078a4:	f000 80a1 	beq.w	80079ea <_dtoa_r+0x442>
 80078a8:	2f00      	cmp	r7, #0
 80078aa:	dd33      	ble.n	8007914 <_dtoa_r+0x36c>
 80078ac:	4bad      	ldr	r3, [pc, #692]	@ (8007b64 <_dtoa_r+0x5bc>)
 80078ae:	f007 020f 	and.w	r2, r7, #15
 80078b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078b6:	ed93 7b00 	vldr	d7, [r3]
 80078ba:	05f8      	lsls	r0, r7, #23
 80078bc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80078c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80078c4:	d516      	bpl.n	80078f4 <_dtoa_r+0x34c>
 80078c6:	4ba8      	ldr	r3, [pc, #672]	@ (8007b68 <_dtoa_r+0x5c0>)
 80078c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80078cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078d0:	f7f8 ffcc 	bl	800086c <__aeabi_ddiv>
 80078d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078d8:	f004 040f 	and.w	r4, r4, #15
 80078dc:	2603      	movs	r6, #3
 80078de:	4da2      	ldr	r5, [pc, #648]	@ (8007b68 <_dtoa_r+0x5c0>)
 80078e0:	b954      	cbnz	r4, 80078f8 <_dtoa_r+0x350>
 80078e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80078ea:	f7f8 ffbf 	bl	800086c <__aeabi_ddiv>
 80078ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80078f2:	e028      	b.n	8007946 <_dtoa_r+0x39e>
 80078f4:	2602      	movs	r6, #2
 80078f6:	e7f2      	b.n	80078de <_dtoa_r+0x336>
 80078f8:	07e1      	lsls	r1, r4, #31
 80078fa:	d508      	bpl.n	800790e <_dtoa_r+0x366>
 80078fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007900:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007904:	f7f8 fe88 	bl	8000618 <__aeabi_dmul>
 8007908:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800790c:	3601      	adds	r6, #1
 800790e:	1064      	asrs	r4, r4, #1
 8007910:	3508      	adds	r5, #8
 8007912:	e7e5      	b.n	80078e0 <_dtoa_r+0x338>
 8007914:	f000 80d2 	beq.w	8007abc <_dtoa_r+0x514>
 8007918:	427c      	negs	r4, r7
 800791a:	4b92      	ldr	r3, [pc, #584]	@ (8007b64 <_dtoa_r+0x5bc>)
 800791c:	4d92      	ldr	r5, [pc, #584]	@ (8007b68 <_dtoa_r+0x5c0>)
 800791e:	f004 020f 	and.w	r2, r4, #15
 8007922:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800792e:	f7f8 fe73 	bl	8000618 <__aeabi_dmul>
 8007932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007936:	1124      	asrs	r4, r4, #4
 8007938:	2300      	movs	r3, #0
 800793a:	2602      	movs	r6, #2
 800793c:	2c00      	cmp	r4, #0
 800793e:	f040 80b2 	bne.w	8007aa6 <_dtoa_r+0x4fe>
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1d3      	bne.n	80078ee <_dtoa_r+0x346>
 8007946:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007948:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 80b7 	beq.w	8007ac0 <_dtoa_r+0x518>
 8007952:	4b86      	ldr	r3, [pc, #536]	@ (8007b6c <_dtoa_r+0x5c4>)
 8007954:	2200      	movs	r2, #0
 8007956:	4620      	mov	r0, r4
 8007958:	4629      	mov	r1, r5
 800795a:	f7f9 f8cf 	bl	8000afc <__aeabi_dcmplt>
 800795e:	2800      	cmp	r0, #0
 8007960:	f000 80ae 	beq.w	8007ac0 <_dtoa_r+0x518>
 8007964:	9b07      	ldr	r3, [sp, #28]
 8007966:	2b00      	cmp	r3, #0
 8007968:	f000 80aa 	beq.w	8007ac0 <_dtoa_r+0x518>
 800796c:	9b00      	ldr	r3, [sp, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	dd37      	ble.n	80079e2 <_dtoa_r+0x43a>
 8007972:	1e7b      	subs	r3, r7, #1
 8007974:	9304      	str	r3, [sp, #16]
 8007976:	4620      	mov	r0, r4
 8007978:	4b7d      	ldr	r3, [pc, #500]	@ (8007b70 <_dtoa_r+0x5c8>)
 800797a:	2200      	movs	r2, #0
 800797c:	4629      	mov	r1, r5
 800797e:	f7f8 fe4b 	bl	8000618 <__aeabi_dmul>
 8007982:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007986:	9c00      	ldr	r4, [sp, #0]
 8007988:	3601      	adds	r6, #1
 800798a:	4630      	mov	r0, r6
 800798c:	f7f8 fdda 	bl	8000544 <__aeabi_i2d>
 8007990:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007994:	f7f8 fe40 	bl	8000618 <__aeabi_dmul>
 8007998:	4b76      	ldr	r3, [pc, #472]	@ (8007b74 <_dtoa_r+0x5cc>)
 800799a:	2200      	movs	r2, #0
 800799c:	f7f8 fc86 	bl	80002ac <__adddf3>
 80079a0:	4605      	mov	r5, r0
 80079a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80079a6:	2c00      	cmp	r4, #0
 80079a8:	f040 808d 	bne.w	8007ac6 <_dtoa_r+0x51e>
 80079ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079b0:	4b71      	ldr	r3, [pc, #452]	@ (8007b78 <_dtoa_r+0x5d0>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f7f8 fc78 	bl	80002a8 <__aeabi_dsub>
 80079b8:	4602      	mov	r2, r0
 80079ba:	460b      	mov	r3, r1
 80079bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80079c0:	462a      	mov	r2, r5
 80079c2:	4633      	mov	r3, r6
 80079c4:	f7f9 f8b8 	bl	8000b38 <__aeabi_dcmpgt>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f040 828b 	bne.w	8007ee4 <_dtoa_r+0x93c>
 80079ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d2:	462a      	mov	r2, r5
 80079d4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80079d8:	f7f9 f890 	bl	8000afc <__aeabi_dcmplt>
 80079dc:	2800      	cmp	r0, #0
 80079de:	f040 8128 	bne.w	8007c32 <_dtoa_r+0x68a>
 80079e2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80079e6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80079ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	f2c0 815a 	blt.w	8007ca6 <_dtoa_r+0x6fe>
 80079f2:	2f0e      	cmp	r7, #14
 80079f4:	f300 8157 	bgt.w	8007ca6 <_dtoa_r+0x6fe>
 80079f8:	4b5a      	ldr	r3, [pc, #360]	@ (8007b64 <_dtoa_r+0x5bc>)
 80079fa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80079fe:	ed93 7b00 	vldr	d7, [r3]
 8007a02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	ed8d 7b00 	vstr	d7, [sp]
 8007a0a:	da03      	bge.n	8007a14 <_dtoa_r+0x46c>
 8007a0c:	9b07      	ldr	r3, [sp, #28]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	f340 8101 	ble.w	8007c16 <_dtoa_r+0x66e>
 8007a14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007a18:	4656      	mov	r6, sl
 8007a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 ff23 	bl	800086c <__aeabi_ddiv>
 8007a26:	f7f9 f8a7 	bl	8000b78 <__aeabi_d2iz>
 8007a2a:	4680      	mov	r8, r0
 8007a2c:	f7f8 fd8a 	bl	8000544 <__aeabi_i2d>
 8007a30:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a34:	f7f8 fdf0 	bl	8000618 <__aeabi_dmul>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	460b      	mov	r3, r1
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	4629      	mov	r1, r5
 8007a40:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007a44:	f7f8 fc30 	bl	80002a8 <__aeabi_dsub>
 8007a48:	f806 4b01 	strb.w	r4, [r6], #1
 8007a4c:	9d07      	ldr	r5, [sp, #28]
 8007a4e:	eba6 040a 	sub.w	r4, r6, sl
 8007a52:	42a5      	cmp	r5, r4
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	f040 8117 	bne.w	8007c8a <_dtoa_r+0x6e2>
 8007a5c:	f7f8 fc26 	bl	80002ac <__adddf3>
 8007a60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a64:	4604      	mov	r4, r0
 8007a66:	460d      	mov	r5, r1
 8007a68:	f7f9 f866 	bl	8000b38 <__aeabi_dcmpgt>
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f040 80f9 	bne.w	8007c64 <_dtoa_r+0x6bc>
 8007a72:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a76:	4620      	mov	r0, r4
 8007a78:	4629      	mov	r1, r5
 8007a7a:	f7f9 f835 	bl	8000ae8 <__aeabi_dcmpeq>
 8007a7e:	b118      	cbz	r0, 8007a88 <_dtoa_r+0x4e0>
 8007a80:	f018 0f01 	tst.w	r8, #1
 8007a84:	f040 80ee 	bne.w	8007c64 <_dtoa_r+0x6bc>
 8007a88:	4649      	mov	r1, r9
 8007a8a:	4658      	mov	r0, fp
 8007a8c:	f000 fc90 	bl	80083b0 <_Bfree>
 8007a90:	2300      	movs	r3, #0
 8007a92:	7033      	strb	r3, [r6, #0]
 8007a94:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007a96:	3701      	adds	r7, #1
 8007a98:	601f      	str	r7, [r3, #0]
 8007a9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 831d 	beq.w	80080dc <_dtoa_r+0xb34>
 8007aa2:	601e      	str	r6, [r3, #0]
 8007aa4:	e31a      	b.n	80080dc <_dtoa_r+0xb34>
 8007aa6:	07e2      	lsls	r2, r4, #31
 8007aa8:	d505      	bpl.n	8007ab6 <_dtoa_r+0x50e>
 8007aaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007aae:	f7f8 fdb3 	bl	8000618 <__aeabi_dmul>
 8007ab2:	3601      	adds	r6, #1
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	1064      	asrs	r4, r4, #1
 8007ab8:	3508      	adds	r5, #8
 8007aba:	e73f      	b.n	800793c <_dtoa_r+0x394>
 8007abc:	2602      	movs	r6, #2
 8007abe:	e742      	b.n	8007946 <_dtoa_r+0x39e>
 8007ac0:	9c07      	ldr	r4, [sp, #28]
 8007ac2:	9704      	str	r7, [sp, #16]
 8007ac4:	e761      	b.n	800798a <_dtoa_r+0x3e2>
 8007ac6:	4b27      	ldr	r3, [pc, #156]	@ (8007b64 <_dtoa_r+0x5bc>)
 8007ac8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007aca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007ace:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ad2:	4454      	add	r4, sl
 8007ad4:	2900      	cmp	r1, #0
 8007ad6:	d053      	beq.n	8007b80 <_dtoa_r+0x5d8>
 8007ad8:	4928      	ldr	r1, [pc, #160]	@ (8007b7c <_dtoa_r+0x5d4>)
 8007ada:	2000      	movs	r0, #0
 8007adc:	f7f8 fec6 	bl	800086c <__aeabi_ddiv>
 8007ae0:	4633      	mov	r3, r6
 8007ae2:	462a      	mov	r2, r5
 8007ae4:	f7f8 fbe0 	bl	80002a8 <__aeabi_dsub>
 8007ae8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007aec:	4656      	mov	r6, sl
 8007aee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007af2:	f7f9 f841 	bl	8000b78 <__aeabi_d2iz>
 8007af6:	4605      	mov	r5, r0
 8007af8:	f7f8 fd24 	bl	8000544 <__aeabi_i2d>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b04:	f7f8 fbd0 	bl	80002a8 <__aeabi_dsub>
 8007b08:	3530      	adds	r5, #48	@ 0x30
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	460b      	mov	r3, r1
 8007b0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b12:	f806 5b01 	strb.w	r5, [r6], #1
 8007b16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b1a:	f7f8 ffef 	bl	8000afc <__aeabi_dcmplt>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d171      	bne.n	8007c06 <_dtoa_r+0x65e>
 8007b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b26:	4911      	ldr	r1, [pc, #68]	@ (8007b6c <_dtoa_r+0x5c4>)
 8007b28:	2000      	movs	r0, #0
 8007b2a:	f7f8 fbbd 	bl	80002a8 <__aeabi_dsub>
 8007b2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007b32:	f7f8 ffe3 	bl	8000afc <__aeabi_dcmplt>
 8007b36:	2800      	cmp	r0, #0
 8007b38:	f040 8095 	bne.w	8007c66 <_dtoa_r+0x6be>
 8007b3c:	42a6      	cmp	r6, r4
 8007b3e:	f43f af50 	beq.w	80079e2 <_dtoa_r+0x43a>
 8007b42:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007b46:	4b0a      	ldr	r3, [pc, #40]	@ (8007b70 <_dtoa_r+0x5c8>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f7f8 fd65 	bl	8000618 <__aeabi_dmul>
 8007b4e:	4b08      	ldr	r3, [pc, #32]	@ (8007b70 <_dtoa_r+0x5c8>)
 8007b50:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b54:	2200      	movs	r2, #0
 8007b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b5a:	f7f8 fd5d 	bl	8000618 <__aeabi_dmul>
 8007b5e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b62:	e7c4      	b.n	8007aee <_dtoa_r+0x546>
 8007b64:	0800ae08 	.word	0x0800ae08
 8007b68:	0800ade0 	.word	0x0800ade0
 8007b6c:	3ff00000 	.word	0x3ff00000
 8007b70:	40240000 	.word	0x40240000
 8007b74:	401c0000 	.word	0x401c0000
 8007b78:	40140000 	.word	0x40140000
 8007b7c:	3fe00000 	.word	0x3fe00000
 8007b80:	4631      	mov	r1, r6
 8007b82:	4628      	mov	r0, r5
 8007b84:	f7f8 fd48 	bl	8000618 <__aeabi_dmul>
 8007b88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007b8c:	9415      	str	r4, [sp, #84]	@ 0x54
 8007b8e:	4656      	mov	r6, sl
 8007b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b94:	f7f8 fff0 	bl	8000b78 <__aeabi_d2iz>
 8007b98:	4605      	mov	r5, r0
 8007b9a:	f7f8 fcd3 	bl	8000544 <__aeabi_i2d>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	460b      	mov	r3, r1
 8007ba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ba6:	f7f8 fb7f 	bl	80002a8 <__aeabi_dsub>
 8007baa:	3530      	adds	r5, #48	@ 0x30
 8007bac:	f806 5b01 	strb.w	r5, [r6], #1
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	42a6      	cmp	r6, r4
 8007bb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007bba:	f04f 0200 	mov.w	r2, #0
 8007bbe:	d124      	bne.n	8007c0a <_dtoa_r+0x662>
 8007bc0:	4bac      	ldr	r3, [pc, #688]	@ (8007e74 <_dtoa_r+0x8cc>)
 8007bc2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007bc6:	f7f8 fb71 	bl	80002ac <__adddf3>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	460b      	mov	r3, r1
 8007bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bd2:	f7f8 ffb1 	bl	8000b38 <__aeabi_dcmpgt>
 8007bd6:	2800      	cmp	r0, #0
 8007bd8:	d145      	bne.n	8007c66 <_dtoa_r+0x6be>
 8007bda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007bde:	49a5      	ldr	r1, [pc, #660]	@ (8007e74 <_dtoa_r+0x8cc>)
 8007be0:	2000      	movs	r0, #0
 8007be2:	f7f8 fb61 	bl	80002a8 <__aeabi_dsub>
 8007be6:	4602      	mov	r2, r0
 8007be8:	460b      	mov	r3, r1
 8007bea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bee:	f7f8 ff85 	bl	8000afc <__aeabi_dcmplt>
 8007bf2:	2800      	cmp	r0, #0
 8007bf4:	f43f aef5 	beq.w	80079e2 <_dtoa_r+0x43a>
 8007bf8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007bfa:	1e73      	subs	r3, r6, #1
 8007bfc:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bfe:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c02:	2b30      	cmp	r3, #48	@ 0x30
 8007c04:	d0f8      	beq.n	8007bf8 <_dtoa_r+0x650>
 8007c06:	9f04      	ldr	r7, [sp, #16]
 8007c08:	e73e      	b.n	8007a88 <_dtoa_r+0x4e0>
 8007c0a:	4b9b      	ldr	r3, [pc, #620]	@ (8007e78 <_dtoa_r+0x8d0>)
 8007c0c:	f7f8 fd04 	bl	8000618 <__aeabi_dmul>
 8007c10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c14:	e7bc      	b.n	8007b90 <_dtoa_r+0x5e8>
 8007c16:	d10c      	bne.n	8007c32 <_dtoa_r+0x68a>
 8007c18:	4b98      	ldr	r3, [pc, #608]	@ (8007e7c <_dtoa_r+0x8d4>)
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c20:	f7f8 fcfa 	bl	8000618 <__aeabi_dmul>
 8007c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c28:	f7f8 ff7c 	bl	8000b24 <__aeabi_dcmpge>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	f000 8157 	beq.w	8007ee0 <_dtoa_r+0x938>
 8007c32:	2400      	movs	r4, #0
 8007c34:	4625      	mov	r5, r4
 8007c36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007c38:	43db      	mvns	r3, r3
 8007c3a:	9304      	str	r3, [sp, #16]
 8007c3c:	4656      	mov	r6, sl
 8007c3e:	2700      	movs	r7, #0
 8007c40:	4621      	mov	r1, r4
 8007c42:	4658      	mov	r0, fp
 8007c44:	f000 fbb4 	bl	80083b0 <_Bfree>
 8007c48:	2d00      	cmp	r5, #0
 8007c4a:	d0dc      	beq.n	8007c06 <_dtoa_r+0x65e>
 8007c4c:	b12f      	cbz	r7, 8007c5a <_dtoa_r+0x6b2>
 8007c4e:	42af      	cmp	r7, r5
 8007c50:	d003      	beq.n	8007c5a <_dtoa_r+0x6b2>
 8007c52:	4639      	mov	r1, r7
 8007c54:	4658      	mov	r0, fp
 8007c56:	f000 fbab 	bl	80083b0 <_Bfree>
 8007c5a:	4629      	mov	r1, r5
 8007c5c:	4658      	mov	r0, fp
 8007c5e:	f000 fba7 	bl	80083b0 <_Bfree>
 8007c62:	e7d0      	b.n	8007c06 <_dtoa_r+0x65e>
 8007c64:	9704      	str	r7, [sp, #16]
 8007c66:	4633      	mov	r3, r6
 8007c68:	461e      	mov	r6, r3
 8007c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c6e:	2a39      	cmp	r2, #57	@ 0x39
 8007c70:	d107      	bne.n	8007c82 <_dtoa_r+0x6da>
 8007c72:	459a      	cmp	sl, r3
 8007c74:	d1f8      	bne.n	8007c68 <_dtoa_r+0x6c0>
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	3201      	adds	r2, #1
 8007c7a:	9204      	str	r2, [sp, #16]
 8007c7c:	2230      	movs	r2, #48	@ 0x30
 8007c7e:	f88a 2000 	strb.w	r2, [sl]
 8007c82:	781a      	ldrb	r2, [r3, #0]
 8007c84:	3201      	adds	r2, #1
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e7bd      	b.n	8007c06 <_dtoa_r+0x65e>
 8007c8a:	4b7b      	ldr	r3, [pc, #492]	@ (8007e78 <_dtoa_r+0x8d0>)
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	f7f8 fcc3 	bl	8000618 <__aeabi_dmul>
 8007c92:	2200      	movs	r2, #0
 8007c94:	2300      	movs	r3, #0
 8007c96:	4604      	mov	r4, r0
 8007c98:	460d      	mov	r5, r1
 8007c9a:	f7f8 ff25 	bl	8000ae8 <__aeabi_dcmpeq>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f43f aebb 	beq.w	8007a1a <_dtoa_r+0x472>
 8007ca4:	e6f0      	b.n	8007a88 <_dtoa_r+0x4e0>
 8007ca6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ca8:	2a00      	cmp	r2, #0
 8007caa:	f000 80db 	beq.w	8007e64 <_dtoa_r+0x8bc>
 8007cae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cb0:	2a01      	cmp	r2, #1
 8007cb2:	f300 80bf 	bgt.w	8007e34 <_dtoa_r+0x88c>
 8007cb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	f000 80b7 	beq.w	8007e2c <_dtoa_r+0x884>
 8007cbe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007cc2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007cc4:	4646      	mov	r6, r8
 8007cc6:	9a08      	ldr	r2, [sp, #32]
 8007cc8:	2101      	movs	r1, #1
 8007cca:	441a      	add	r2, r3
 8007ccc:	4658      	mov	r0, fp
 8007cce:	4498      	add	r8, r3
 8007cd0:	9208      	str	r2, [sp, #32]
 8007cd2:	f000 fc6b 	bl	80085ac <__i2b>
 8007cd6:	4605      	mov	r5, r0
 8007cd8:	b15e      	cbz	r6, 8007cf2 <_dtoa_r+0x74a>
 8007cda:	9b08      	ldr	r3, [sp, #32]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	dd08      	ble.n	8007cf2 <_dtoa_r+0x74a>
 8007ce0:	42b3      	cmp	r3, r6
 8007ce2:	9a08      	ldr	r2, [sp, #32]
 8007ce4:	bfa8      	it	ge
 8007ce6:	4633      	movge	r3, r6
 8007ce8:	eba8 0803 	sub.w	r8, r8, r3
 8007cec:	1af6      	subs	r6, r6, r3
 8007cee:	1ad3      	subs	r3, r2, r3
 8007cf0:	9308      	str	r3, [sp, #32]
 8007cf2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cf4:	b1f3      	cbz	r3, 8007d34 <_dtoa_r+0x78c>
 8007cf6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f000 80b7 	beq.w	8007e6c <_dtoa_r+0x8c4>
 8007cfe:	b18c      	cbz	r4, 8007d24 <_dtoa_r+0x77c>
 8007d00:	4629      	mov	r1, r5
 8007d02:	4622      	mov	r2, r4
 8007d04:	4658      	mov	r0, fp
 8007d06:	f000 fd11 	bl	800872c <__pow5mult>
 8007d0a:	464a      	mov	r2, r9
 8007d0c:	4601      	mov	r1, r0
 8007d0e:	4605      	mov	r5, r0
 8007d10:	4658      	mov	r0, fp
 8007d12:	f000 fc61 	bl	80085d8 <__multiply>
 8007d16:	4649      	mov	r1, r9
 8007d18:	9004      	str	r0, [sp, #16]
 8007d1a:	4658      	mov	r0, fp
 8007d1c:	f000 fb48 	bl	80083b0 <_Bfree>
 8007d20:	9b04      	ldr	r3, [sp, #16]
 8007d22:	4699      	mov	r9, r3
 8007d24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d26:	1b1a      	subs	r2, r3, r4
 8007d28:	d004      	beq.n	8007d34 <_dtoa_r+0x78c>
 8007d2a:	4649      	mov	r1, r9
 8007d2c:	4658      	mov	r0, fp
 8007d2e:	f000 fcfd 	bl	800872c <__pow5mult>
 8007d32:	4681      	mov	r9, r0
 8007d34:	2101      	movs	r1, #1
 8007d36:	4658      	mov	r0, fp
 8007d38:	f000 fc38 	bl	80085ac <__i2b>
 8007d3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d3e:	4604      	mov	r4, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 81cf 	beq.w	80080e4 <_dtoa_r+0xb3c>
 8007d46:	461a      	mov	r2, r3
 8007d48:	4601      	mov	r1, r0
 8007d4a:	4658      	mov	r0, fp
 8007d4c:	f000 fcee 	bl	800872c <__pow5mult>
 8007d50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	4604      	mov	r4, r0
 8007d56:	f300 8095 	bgt.w	8007e84 <_dtoa_r+0x8dc>
 8007d5a:	9b02      	ldr	r3, [sp, #8]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	f040 8087 	bne.w	8007e70 <_dtoa_r+0x8c8>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f040 8089 	bne.w	8007e80 <_dtoa_r+0x8d8>
 8007d6e:	9b03      	ldr	r3, [sp, #12]
 8007d70:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d74:	0d1b      	lsrs	r3, r3, #20
 8007d76:	051b      	lsls	r3, r3, #20
 8007d78:	b12b      	cbz	r3, 8007d86 <_dtoa_r+0x7de>
 8007d7a:	9b08      	ldr	r3, [sp, #32]
 8007d7c:	3301      	adds	r3, #1
 8007d7e:	9308      	str	r3, [sp, #32]
 8007d80:	f108 0801 	add.w	r8, r8, #1
 8007d84:	2301      	movs	r3, #1
 8007d86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 81b0 	beq.w	80080f0 <_dtoa_r+0xb48>
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007d96:	6918      	ldr	r0, [r3, #16]
 8007d98:	f000 fbbc 	bl	8008514 <__hi0bits>
 8007d9c:	f1c0 0020 	rsb	r0, r0, #32
 8007da0:	9b08      	ldr	r3, [sp, #32]
 8007da2:	4418      	add	r0, r3
 8007da4:	f010 001f 	ands.w	r0, r0, #31
 8007da8:	d077      	beq.n	8007e9a <_dtoa_r+0x8f2>
 8007daa:	f1c0 0320 	rsb	r3, r0, #32
 8007dae:	2b04      	cmp	r3, #4
 8007db0:	dd6b      	ble.n	8007e8a <_dtoa_r+0x8e2>
 8007db2:	9b08      	ldr	r3, [sp, #32]
 8007db4:	f1c0 001c 	rsb	r0, r0, #28
 8007db8:	4403      	add	r3, r0
 8007dba:	4480      	add	r8, r0
 8007dbc:	4406      	add	r6, r0
 8007dbe:	9308      	str	r3, [sp, #32]
 8007dc0:	f1b8 0f00 	cmp.w	r8, #0
 8007dc4:	dd05      	ble.n	8007dd2 <_dtoa_r+0x82a>
 8007dc6:	4649      	mov	r1, r9
 8007dc8:	4642      	mov	r2, r8
 8007dca:	4658      	mov	r0, fp
 8007dcc:	f000 fd08 	bl	80087e0 <__lshift>
 8007dd0:	4681      	mov	r9, r0
 8007dd2:	9b08      	ldr	r3, [sp, #32]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	dd05      	ble.n	8007de4 <_dtoa_r+0x83c>
 8007dd8:	4621      	mov	r1, r4
 8007dda:	461a      	mov	r2, r3
 8007ddc:	4658      	mov	r0, fp
 8007dde:	f000 fcff 	bl	80087e0 <__lshift>
 8007de2:	4604      	mov	r4, r0
 8007de4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d059      	beq.n	8007e9e <_dtoa_r+0x8f6>
 8007dea:	4621      	mov	r1, r4
 8007dec:	4648      	mov	r0, r9
 8007dee:	f000 fd63 	bl	80088b8 <__mcmp>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	da53      	bge.n	8007e9e <_dtoa_r+0x8f6>
 8007df6:	1e7b      	subs	r3, r7, #1
 8007df8:	9304      	str	r3, [sp, #16]
 8007dfa:	4649      	mov	r1, r9
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	220a      	movs	r2, #10
 8007e00:	4658      	mov	r0, fp
 8007e02:	f000 faf7 	bl	80083f4 <__multadd>
 8007e06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e08:	4681      	mov	r9, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 8172 	beq.w	80080f4 <_dtoa_r+0xb4c>
 8007e10:	2300      	movs	r3, #0
 8007e12:	4629      	mov	r1, r5
 8007e14:	220a      	movs	r2, #10
 8007e16:	4658      	mov	r0, fp
 8007e18:	f000 faec 	bl	80083f4 <__multadd>
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	4605      	mov	r5, r0
 8007e22:	dc67      	bgt.n	8007ef4 <_dtoa_r+0x94c>
 8007e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	dc41      	bgt.n	8007eae <_dtoa_r+0x906>
 8007e2a:	e063      	b.n	8007ef4 <_dtoa_r+0x94c>
 8007e2c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007e2e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007e32:	e746      	b.n	8007cc2 <_dtoa_r+0x71a>
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	1e5c      	subs	r4, r3, #1
 8007e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e3a:	42a3      	cmp	r3, r4
 8007e3c:	bfbf      	itttt	lt
 8007e3e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e40:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007e42:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007e44:	1ae3      	sublt	r3, r4, r3
 8007e46:	bfb4      	ite	lt
 8007e48:	18d2      	addlt	r2, r2, r3
 8007e4a:	1b1c      	subge	r4, r3, r4
 8007e4c:	9b07      	ldr	r3, [sp, #28]
 8007e4e:	bfbc      	itt	lt
 8007e50:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007e52:	2400      	movlt	r4, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bfb5      	itete	lt
 8007e58:	eba8 0603 	sublt.w	r6, r8, r3
 8007e5c:	9b07      	ldrge	r3, [sp, #28]
 8007e5e:	2300      	movlt	r3, #0
 8007e60:	4646      	movge	r6, r8
 8007e62:	e730      	b.n	8007cc6 <_dtoa_r+0x71e>
 8007e64:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e66:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007e68:	4646      	mov	r6, r8
 8007e6a:	e735      	b.n	8007cd8 <_dtoa_r+0x730>
 8007e6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007e6e:	e75c      	b.n	8007d2a <_dtoa_r+0x782>
 8007e70:	2300      	movs	r3, #0
 8007e72:	e788      	b.n	8007d86 <_dtoa_r+0x7de>
 8007e74:	3fe00000 	.word	0x3fe00000
 8007e78:	40240000 	.word	0x40240000
 8007e7c:	40140000 	.word	0x40140000
 8007e80:	9b02      	ldr	r3, [sp, #8]
 8007e82:	e780      	b.n	8007d86 <_dtoa_r+0x7de>
 8007e84:	2300      	movs	r3, #0
 8007e86:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e88:	e782      	b.n	8007d90 <_dtoa_r+0x7e8>
 8007e8a:	d099      	beq.n	8007dc0 <_dtoa_r+0x818>
 8007e8c:	9a08      	ldr	r2, [sp, #32]
 8007e8e:	331c      	adds	r3, #28
 8007e90:	441a      	add	r2, r3
 8007e92:	4498      	add	r8, r3
 8007e94:	441e      	add	r6, r3
 8007e96:	9208      	str	r2, [sp, #32]
 8007e98:	e792      	b.n	8007dc0 <_dtoa_r+0x818>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	e7f6      	b.n	8007e8c <_dtoa_r+0x8e4>
 8007e9e:	9b07      	ldr	r3, [sp, #28]
 8007ea0:	9704      	str	r7, [sp, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	dc20      	bgt.n	8007ee8 <_dtoa_r+0x940>
 8007ea6:	9300      	str	r3, [sp, #0]
 8007ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eaa:	2b02      	cmp	r3, #2
 8007eac:	dd1e      	ble.n	8007eec <_dtoa_r+0x944>
 8007eae:	9b00      	ldr	r3, [sp, #0]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	f47f aec0 	bne.w	8007c36 <_dtoa_r+0x68e>
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	2205      	movs	r2, #5
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 fa9a 	bl	80083f4 <__multadd>
 8007ec0:	4601      	mov	r1, r0
 8007ec2:	4604      	mov	r4, r0
 8007ec4:	4648      	mov	r0, r9
 8007ec6:	f000 fcf7 	bl	80088b8 <__mcmp>
 8007eca:	2800      	cmp	r0, #0
 8007ecc:	f77f aeb3 	ble.w	8007c36 <_dtoa_r+0x68e>
 8007ed0:	4656      	mov	r6, sl
 8007ed2:	2331      	movs	r3, #49	@ 0x31
 8007ed4:	f806 3b01 	strb.w	r3, [r6], #1
 8007ed8:	9b04      	ldr	r3, [sp, #16]
 8007eda:	3301      	adds	r3, #1
 8007edc:	9304      	str	r3, [sp, #16]
 8007ede:	e6ae      	b.n	8007c3e <_dtoa_r+0x696>
 8007ee0:	9c07      	ldr	r4, [sp, #28]
 8007ee2:	9704      	str	r7, [sp, #16]
 8007ee4:	4625      	mov	r5, r4
 8007ee6:	e7f3      	b.n	8007ed0 <_dtoa_r+0x928>
 8007ee8:	9b07      	ldr	r3, [sp, #28]
 8007eea:	9300      	str	r3, [sp, #0]
 8007eec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 8104 	beq.w	80080fc <_dtoa_r+0xb54>
 8007ef4:	2e00      	cmp	r6, #0
 8007ef6:	dd05      	ble.n	8007f04 <_dtoa_r+0x95c>
 8007ef8:	4629      	mov	r1, r5
 8007efa:	4632      	mov	r2, r6
 8007efc:	4658      	mov	r0, fp
 8007efe:	f000 fc6f 	bl	80087e0 <__lshift>
 8007f02:	4605      	mov	r5, r0
 8007f04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d05a      	beq.n	8007fc0 <_dtoa_r+0xa18>
 8007f0a:	6869      	ldr	r1, [r5, #4]
 8007f0c:	4658      	mov	r0, fp
 8007f0e:	f000 fa0f 	bl	8008330 <_Balloc>
 8007f12:	4606      	mov	r6, r0
 8007f14:	b928      	cbnz	r0, 8007f22 <_dtoa_r+0x97a>
 8007f16:	4b84      	ldr	r3, [pc, #528]	@ (8008128 <_dtoa_r+0xb80>)
 8007f18:	4602      	mov	r2, r0
 8007f1a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f1e:	f7ff bb5a 	b.w	80075d6 <_dtoa_r+0x2e>
 8007f22:	692a      	ldr	r2, [r5, #16]
 8007f24:	3202      	adds	r2, #2
 8007f26:	0092      	lsls	r2, r2, #2
 8007f28:	f105 010c 	add.w	r1, r5, #12
 8007f2c:	300c      	adds	r0, #12
 8007f2e:	f001 ff75 	bl	8009e1c <memcpy>
 8007f32:	2201      	movs	r2, #1
 8007f34:	4631      	mov	r1, r6
 8007f36:	4658      	mov	r0, fp
 8007f38:	f000 fc52 	bl	80087e0 <__lshift>
 8007f3c:	f10a 0301 	add.w	r3, sl, #1
 8007f40:	9307      	str	r3, [sp, #28]
 8007f42:	9b00      	ldr	r3, [sp, #0]
 8007f44:	4453      	add	r3, sl
 8007f46:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007f48:	9b02      	ldr	r3, [sp, #8]
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	462f      	mov	r7, r5
 8007f50:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f52:	4605      	mov	r5, r0
 8007f54:	9b07      	ldr	r3, [sp, #28]
 8007f56:	4621      	mov	r1, r4
 8007f58:	3b01      	subs	r3, #1
 8007f5a:	4648      	mov	r0, r9
 8007f5c:	9300      	str	r3, [sp, #0]
 8007f5e:	f7ff fa99 	bl	8007494 <quorem>
 8007f62:	4639      	mov	r1, r7
 8007f64:	9002      	str	r0, [sp, #8]
 8007f66:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f6a:	4648      	mov	r0, r9
 8007f6c:	f000 fca4 	bl	80088b8 <__mcmp>
 8007f70:	462a      	mov	r2, r5
 8007f72:	9008      	str	r0, [sp, #32]
 8007f74:	4621      	mov	r1, r4
 8007f76:	4658      	mov	r0, fp
 8007f78:	f000 fcba 	bl	80088f0 <__mdiff>
 8007f7c:	68c2      	ldr	r2, [r0, #12]
 8007f7e:	4606      	mov	r6, r0
 8007f80:	bb02      	cbnz	r2, 8007fc4 <_dtoa_r+0xa1c>
 8007f82:	4601      	mov	r1, r0
 8007f84:	4648      	mov	r0, r9
 8007f86:	f000 fc97 	bl	80088b8 <__mcmp>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	4631      	mov	r1, r6
 8007f8e:	4658      	mov	r0, fp
 8007f90:	920e      	str	r2, [sp, #56]	@ 0x38
 8007f92:	f000 fa0d 	bl	80083b0 <_Bfree>
 8007f96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f9a:	9e07      	ldr	r6, [sp, #28]
 8007f9c:	ea43 0102 	orr.w	r1, r3, r2
 8007fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fa2:	4319      	orrs	r1, r3
 8007fa4:	d110      	bne.n	8007fc8 <_dtoa_r+0xa20>
 8007fa6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007faa:	d029      	beq.n	8008000 <_dtoa_r+0xa58>
 8007fac:	9b08      	ldr	r3, [sp, #32]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	dd02      	ble.n	8007fb8 <_dtoa_r+0xa10>
 8007fb2:	9b02      	ldr	r3, [sp, #8]
 8007fb4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007fb8:	9b00      	ldr	r3, [sp, #0]
 8007fba:	f883 8000 	strb.w	r8, [r3]
 8007fbe:	e63f      	b.n	8007c40 <_dtoa_r+0x698>
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	e7bb      	b.n	8007f3c <_dtoa_r+0x994>
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	e7e1      	b.n	8007f8c <_dtoa_r+0x9e4>
 8007fc8:	9b08      	ldr	r3, [sp, #32]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	db04      	blt.n	8007fd8 <_dtoa_r+0xa30>
 8007fce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007fd0:	430b      	orrs	r3, r1
 8007fd2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	d120      	bne.n	800801a <_dtoa_r+0xa72>
 8007fd8:	2a00      	cmp	r2, #0
 8007fda:	dded      	ble.n	8007fb8 <_dtoa_r+0xa10>
 8007fdc:	4649      	mov	r1, r9
 8007fde:	2201      	movs	r2, #1
 8007fe0:	4658      	mov	r0, fp
 8007fe2:	f000 fbfd 	bl	80087e0 <__lshift>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4681      	mov	r9, r0
 8007fea:	f000 fc65 	bl	80088b8 <__mcmp>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	dc03      	bgt.n	8007ffa <_dtoa_r+0xa52>
 8007ff2:	d1e1      	bne.n	8007fb8 <_dtoa_r+0xa10>
 8007ff4:	f018 0f01 	tst.w	r8, #1
 8007ff8:	d0de      	beq.n	8007fb8 <_dtoa_r+0xa10>
 8007ffa:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007ffe:	d1d8      	bne.n	8007fb2 <_dtoa_r+0xa0a>
 8008000:	9a00      	ldr	r2, [sp, #0]
 8008002:	2339      	movs	r3, #57	@ 0x39
 8008004:	7013      	strb	r3, [r2, #0]
 8008006:	4633      	mov	r3, r6
 8008008:	461e      	mov	r6, r3
 800800a:	3b01      	subs	r3, #1
 800800c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008010:	2a39      	cmp	r2, #57	@ 0x39
 8008012:	d052      	beq.n	80080ba <_dtoa_r+0xb12>
 8008014:	3201      	adds	r2, #1
 8008016:	701a      	strb	r2, [r3, #0]
 8008018:	e612      	b.n	8007c40 <_dtoa_r+0x698>
 800801a:	2a00      	cmp	r2, #0
 800801c:	dd07      	ble.n	800802e <_dtoa_r+0xa86>
 800801e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008022:	d0ed      	beq.n	8008000 <_dtoa_r+0xa58>
 8008024:	9a00      	ldr	r2, [sp, #0]
 8008026:	f108 0301 	add.w	r3, r8, #1
 800802a:	7013      	strb	r3, [r2, #0]
 800802c:	e608      	b.n	8007c40 <_dtoa_r+0x698>
 800802e:	9b07      	ldr	r3, [sp, #28]
 8008030:	9a07      	ldr	r2, [sp, #28]
 8008032:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008038:	4293      	cmp	r3, r2
 800803a:	d028      	beq.n	800808e <_dtoa_r+0xae6>
 800803c:	4649      	mov	r1, r9
 800803e:	2300      	movs	r3, #0
 8008040:	220a      	movs	r2, #10
 8008042:	4658      	mov	r0, fp
 8008044:	f000 f9d6 	bl	80083f4 <__multadd>
 8008048:	42af      	cmp	r7, r5
 800804a:	4681      	mov	r9, r0
 800804c:	f04f 0300 	mov.w	r3, #0
 8008050:	f04f 020a 	mov.w	r2, #10
 8008054:	4639      	mov	r1, r7
 8008056:	4658      	mov	r0, fp
 8008058:	d107      	bne.n	800806a <_dtoa_r+0xac2>
 800805a:	f000 f9cb 	bl	80083f4 <__multadd>
 800805e:	4607      	mov	r7, r0
 8008060:	4605      	mov	r5, r0
 8008062:	9b07      	ldr	r3, [sp, #28]
 8008064:	3301      	adds	r3, #1
 8008066:	9307      	str	r3, [sp, #28]
 8008068:	e774      	b.n	8007f54 <_dtoa_r+0x9ac>
 800806a:	f000 f9c3 	bl	80083f4 <__multadd>
 800806e:	4629      	mov	r1, r5
 8008070:	4607      	mov	r7, r0
 8008072:	2300      	movs	r3, #0
 8008074:	220a      	movs	r2, #10
 8008076:	4658      	mov	r0, fp
 8008078:	f000 f9bc 	bl	80083f4 <__multadd>
 800807c:	4605      	mov	r5, r0
 800807e:	e7f0      	b.n	8008062 <_dtoa_r+0xaba>
 8008080:	9b00      	ldr	r3, [sp, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	bfcc      	ite	gt
 8008086:	461e      	movgt	r6, r3
 8008088:	2601      	movle	r6, #1
 800808a:	4456      	add	r6, sl
 800808c:	2700      	movs	r7, #0
 800808e:	4649      	mov	r1, r9
 8008090:	2201      	movs	r2, #1
 8008092:	4658      	mov	r0, fp
 8008094:	f000 fba4 	bl	80087e0 <__lshift>
 8008098:	4621      	mov	r1, r4
 800809a:	4681      	mov	r9, r0
 800809c:	f000 fc0c 	bl	80088b8 <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	dcb0      	bgt.n	8008006 <_dtoa_r+0xa5e>
 80080a4:	d102      	bne.n	80080ac <_dtoa_r+0xb04>
 80080a6:	f018 0f01 	tst.w	r8, #1
 80080aa:	d1ac      	bne.n	8008006 <_dtoa_r+0xa5e>
 80080ac:	4633      	mov	r3, r6
 80080ae:	461e      	mov	r6, r3
 80080b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080b4:	2a30      	cmp	r2, #48	@ 0x30
 80080b6:	d0fa      	beq.n	80080ae <_dtoa_r+0xb06>
 80080b8:	e5c2      	b.n	8007c40 <_dtoa_r+0x698>
 80080ba:	459a      	cmp	sl, r3
 80080bc:	d1a4      	bne.n	8008008 <_dtoa_r+0xa60>
 80080be:	9b04      	ldr	r3, [sp, #16]
 80080c0:	3301      	adds	r3, #1
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	2331      	movs	r3, #49	@ 0x31
 80080c6:	f88a 3000 	strb.w	r3, [sl]
 80080ca:	e5b9      	b.n	8007c40 <_dtoa_r+0x698>
 80080cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80080ce:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800812c <_dtoa_r+0xb84>
 80080d2:	b11b      	cbz	r3, 80080dc <_dtoa_r+0xb34>
 80080d4:	f10a 0308 	add.w	r3, sl, #8
 80080d8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4650      	mov	r0, sl
 80080de:	b019      	add	sp, #100	@ 0x64
 80080e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	f77f ae37 	ble.w	8007d5a <_dtoa_r+0x7b2>
 80080ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80080f0:	2001      	movs	r0, #1
 80080f2:	e655      	b.n	8007da0 <_dtoa_r+0x7f8>
 80080f4:	9b00      	ldr	r3, [sp, #0]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f77f aed6 	ble.w	8007ea8 <_dtoa_r+0x900>
 80080fc:	4656      	mov	r6, sl
 80080fe:	4621      	mov	r1, r4
 8008100:	4648      	mov	r0, r9
 8008102:	f7ff f9c7 	bl	8007494 <quorem>
 8008106:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800810a:	f806 8b01 	strb.w	r8, [r6], #1
 800810e:	9b00      	ldr	r3, [sp, #0]
 8008110:	eba6 020a 	sub.w	r2, r6, sl
 8008114:	4293      	cmp	r3, r2
 8008116:	ddb3      	ble.n	8008080 <_dtoa_r+0xad8>
 8008118:	4649      	mov	r1, r9
 800811a:	2300      	movs	r3, #0
 800811c:	220a      	movs	r2, #10
 800811e:	4658      	mov	r0, fp
 8008120:	f000 f968 	bl	80083f4 <__multadd>
 8008124:	4681      	mov	r9, r0
 8008126:	e7ea      	b.n	80080fe <_dtoa_r+0xb56>
 8008128:	0800ad65 	.word	0x0800ad65
 800812c:	0800ace9 	.word	0x0800ace9

08008130 <_free_r>:
 8008130:	b538      	push	{r3, r4, r5, lr}
 8008132:	4605      	mov	r5, r0
 8008134:	2900      	cmp	r1, #0
 8008136:	d041      	beq.n	80081bc <_free_r+0x8c>
 8008138:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800813c:	1f0c      	subs	r4, r1, #4
 800813e:	2b00      	cmp	r3, #0
 8008140:	bfb8      	it	lt
 8008142:	18e4      	addlt	r4, r4, r3
 8008144:	f000 f8e8 	bl	8008318 <__malloc_lock>
 8008148:	4a1d      	ldr	r2, [pc, #116]	@ (80081c0 <_free_r+0x90>)
 800814a:	6813      	ldr	r3, [r2, #0]
 800814c:	b933      	cbnz	r3, 800815c <_free_r+0x2c>
 800814e:	6063      	str	r3, [r4, #4]
 8008150:	6014      	str	r4, [r2, #0]
 8008152:	4628      	mov	r0, r5
 8008154:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008158:	f000 b8e4 	b.w	8008324 <__malloc_unlock>
 800815c:	42a3      	cmp	r3, r4
 800815e:	d908      	bls.n	8008172 <_free_r+0x42>
 8008160:	6820      	ldr	r0, [r4, #0]
 8008162:	1821      	adds	r1, r4, r0
 8008164:	428b      	cmp	r3, r1
 8008166:	bf01      	itttt	eq
 8008168:	6819      	ldreq	r1, [r3, #0]
 800816a:	685b      	ldreq	r3, [r3, #4]
 800816c:	1809      	addeq	r1, r1, r0
 800816e:	6021      	streq	r1, [r4, #0]
 8008170:	e7ed      	b.n	800814e <_free_r+0x1e>
 8008172:	461a      	mov	r2, r3
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	b10b      	cbz	r3, 800817c <_free_r+0x4c>
 8008178:	42a3      	cmp	r3, r4
 800817a:	d9fa      	bls.n	8008172 <_free_r+0x42>
 800817c:	6811      	ldr	r1, [r2, #0]
 800817e:	1850      	adds	r0, r2, r1
 8008180:	42a0      	cmp	r0, r4
 8008182:	d10b      	bne.n	800819c <_free_r+0x6c>
 8008184:	6820      	ldr	r0, [r4, #0]
 8008186:	4401      	add	r1, r0
 8008188:	1850      	adds	r0, r2, r1
 800818a:	4283      	cmp	r3, r0
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	d1e0      	bne.n	8008152 <_free_r+0x22>
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	6053      	str	r3, [r2, #4]
 8008196:	4408      	add	r0, r1
 8008198:	6010      	str	r0, [r2, #0]
 800819a:	e7da      	b.n	8008152 <_free_r+0x22>
 800819c:	d902      	bls.n	80081a4 <_free_r+0x74>
 800819e:	230c      	movs	r3, #12
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	e7d6      	b.n	8008152 <_free_r+0x22>
 80081a4:	6820      	ldr	r0, [r4, #0]
 80081a6:	1821      	adds	r1, r4, r0
 80081a8:	428b      	cmp	r3, r1
 80081aa:	bf04      	itt	eq
 80081ac:	6819      	ldreq	r1, [r3, #0]
 80081ae:	685b      	ldreq	r3, [r3, #4]
 80081b0:	6063      	str	r3, [r4, #4]
 80081b2:	bf04      	itt	eq
 80081b4:	1809      	addeq	r1, r1, r0
 80081b6:	6021      	streq	r1, [r4, #0]
 80081b8:	6054      	str	r4, [r2, #4]
 80081ba:	e7ca      	b.n	8008152 <_free_r+0x22>
 80081bc:	bd38      	pop	{r3, r4, r5, pc}
 80081be:	bf00      	nop
 80081c0:	20000bf4 	.word	0x20000bf4

080081c4 <malloc>:
 80081c4:	4b02      	ldr	r3, [pc, #8]	@ (80081d0 <malloc+0xc>)
 80081c6:	4601      	mov	r1, r0
 80081c8:	6818      	ldr	r0, [r3, #0]
 80081ca:	f000 b825 	b.w	8008218 <_malloc_r>
 80081ce:	bf00      	nop
 80081d0:	2000001c 	.word	0x2000001c

080081d4 <sbrk_aligned>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4e0f      	ldr	r6, [pc, #60]	@ (8008214 <sbrk_aligned+0x40>)
 80081d8:	460c      	mov	r4, r1
 80081da:	6831      	ldr	r1, [r6, #0]
 80081dc:	4605      	mov	r5, r0
 80081de:	b911      	cbnz	r1, 80081e6 <sbrk_aligned+0x12>
 80081e0:	f001 fe0c 	bl	8009dfc <_sbrk_r>
 80081e4:	6030      	str	r0, [r6, #0]
 80081e6:	4621      	mov	r1, r4
 80081e8:	4628      	mov	r0, r5
 80081ea:	f001 fe07 	bl	8009dfc <_sbrk_r>
 80081ee:	1c43      	adds	r3, r0, #1
 80081f0:	d103      	bne.n	80081fa <sbrk_aligned+0x26>
 80081f2:	f04f 34ff 	mov.w	r4, #4294967295
 80081f6:	4620      	mov	r0, r4
 80081f8:	bd70      	pop	{r4, r5, r6, pc}
 80081fa:	1cc4      	adds	r4, r0, #3
 80081fc:	f024 0403 	bic.w	r4, r4, #3
 8008200:	42a0      	cmp	r0, r4
 8008202:	d0f8      	beq.n	80081f6 <sbrk_aligned+0x22>
 8008204:	1a21      	subs	r1, r4, r0
 8008206:	4628      	mov	r0, r5
 8008208:	f001 fdf8 	bl	8009dfc <_sbrk_r>
 800820c:	3001      	adds	r0, #1
 800820e:	d1f2      	bne.n	80081f6 <sbrk_aligned+0x22>
 8008210:	e7ef      	b.n	80081f2 <sbrk_aligned+0x1e>
 8008212:	bf00      	nop
 8008214:	20000bf0 	.word	0x20000bf0

08008218 <_malloc_r>:
 8008218:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800821c:	1ccd      	adds	r5, r1, #3
 800821e:	f025 0503 	bic.w	r5, r5, #3
 8008222:	3508      	adds	r5, #8
 8008224:	2d0c      	cmp	r5, #12
 8008226:	bf38      	it	cc
 8008228:	250c      	movcc	r5, #12
 800822a:	2d00      	cmp	r5, #0
 800822c:	4606      	mov	r6, r0
 800822e:	db01      	blt.n	8008234 <_malloc_r+0x1c>
 8008230:	42a9      	cmp	r1, r5
 8008232:	d904      	bls.n	800823e <_malloc_r+0x26>
 8008234:	230c      	movs	r3, #12
 8008236:	6033      	str	r3, [r6, #0]
 8008238:	2000      	movs	r0, #0
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008314 <_malloc_r+0xfc>
 8008242:	f000 f869 	bl	8008318 <__malloc_lock>
 8008246:	f8d8 3000 	ldr.w	r3, [r8]
 800824a:	461c      	mov	r4, r3
 800824c:	bb44      	cbnz	r4, 80082a0 <_malloc_r+0x88>
 800824e:	4629      	mov	r1, r5
 8008250:	4630      	mov	r0, r6
 8008252:	f7ff ffbf 	bl	80081d4 <sbrk_aligned>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	4604      	mov	r4, r0
 800825a:	d158      	bne.n	800830e <_malloc_r+0xf6>
 800825c:	f8d8 4000 	ldr.w	r4, [r8]
 8008260:	4627      	mov	r7, r4
 8008262:	2f00      	cmp	r7, #0
 8008264:	d143      	bne.n	80082ee <_malloc_r+0xd6>
 8008266:	2c00      	cmp	r4, #0
 8008268:	d04b      	beq.n	8008302 <_malloc_r+0xea>
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	4639      	mov	r1, r7
 800826e:	4630      	mov	r0, r6
 8008270:	eb04 0903 	add.w	r9, r4, r3
 8008274:	f001 fdc2 	bl	8009dfc <_sbrk_r>
 8008278:	4581      	cmp	r9, r0
 800827a:	d142      	bne.n	8008302 <_malloc_r+0xea>
 800827c:	6821      	ldr	r1, [r4, #0]
 800827e:	1a6d      	subs	r5, r5, r1
 8008280:	4629      	mov	r1, r5
 8008282:	4630      	mov	r0, r6
 8008284:	f7ff ffa6 	bl	80081d4 <sbrk_aligned>
 8008288:	3001      	adds	r0, #1
 800828a:	d03a      	beq.n	8008302 <_malloc_r+0xea>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	442b      	add	r3, r5
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	f8d8 3000 	ldr.w	r3, [r8]
 8008296:	685a      	ldr	r2, [r3, #4]
 8008298:	bb62      	cbnz	r2, 80082f4 <_malloc_r+0xdc>
 800829a:	f8c8 7000 	str.w	r7, [r8]
 800829e:	e00f      	b.n	80082c0 <_malloc_r+0xa8>
 80082a0:	6822      	ldr	r2, [r4, #0]
 80082a2:	1b52      	subs	r2, r2, r5
 80082a4:	d420      	bmi.n	80082e8 <_malloc_r+0xd0>
 80082a6:	2a0b      	cmp	r2, #11
 80082a8:	d917      	bls.n	80082da <_malloc_r+0xc2>
 80082aa:	1961      	adds	r1, r4, r5
 80082ac:	42a3      	cmp	r3, r4
 80082ae:	6025      	str	r5, [r4, #0]
 80082b0:	bf18      	it	ne
 80082b2:	6059      	strne	r1, [r3, #4]
 80082b4:	6863      	ldr	r3, [r4, #4]
 80082b6:	bf08      	it	eq
 80082b8:	f8c8 1000 	streq.w	r1, [r8]
 80082bc:	5162      	str	r2, [r4, r5]
 80082be:	604b      	str	r3, [r1, #4]
 80082c0:	4630      	mov	r0, r6
 80082c2:	f000 f82f 	bl	8008324 <__malloc_unlock>
 80082c6:	f104 000b 	add.w	r0, r4, #11
 80082ca:	1d23      	adds	r3, r4, #4
 80082cc:	f020 0007 	bic.w	r0, r0, #7
 80082d0:	1ac2      	subs	r2, r0, r3
 80082d2:	bf1c      	itt	ne
 80082d4:	1a1b      	subne	r3, r3, r0
 80082d6:	50a3      	strne	r3, [r4, r2]
 80082d8:	e7af      	b.n	800823a <_malloc_r+0x22>
 80082da:	6862      	ldr	r2, [r4, #4]
 80082dc:	42a3      	cmp	r3, r4
 80082de:	bf0c      	ite	eq
 80082e0:	f8c8 2000 	streq.w	r2, [r8]
 80082e4:	605a      	strne	r2, [r3, #4]
 80082e6:	e7eb      	b.n	80082c0 <_malloc_r+0xa8>
 80082e8:	4623      	mov	r3, r4
 80082ea:	6864      	ldr	r4, [r4, #4]
 80082ec:	e7ae      	b.n	800824c <_malloc_r+0x34>
 80082ee:	463c      	mov	r4, r7
 80082f0:	687f      	ldr	r7, [r7, #4]
 80082f2:	e7b6      	b.n	8008262 <_malloc_r+0x4a>
 80082f4:	461a      	mov	r2, r3
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d1fb      	bne.n	80082f4 <_malloc_r+0xdc>
 80082fc:	2300      	movs	r3, #0
 80082fe:	6053      	str	r3, [r2, #4]
 8008300:	e7de      	b.n	80082c0 <_malloc_r+0xa8>
 8008302:	230c      	movs	r3, #12
 8008304:	6033      	str	r3, [r6, #0]
 8008306:	4630      	mov	r0, r6
 8008308:	f000 f80c 	bl	8008324 <__malloc_unlock>
 800830c:	e794      	b.n	8008238 <_malloc_r+0x20>
 800830e:	6005      	str	r5, [r0, #0]
 8008310:	e7d6      	b.n	80082c0 <_malloc_r+0xa8>
 8008312:	bf00      	nop
 8008314:	20000bf4 	.word	0x20000bf4

08008318 <__malloc_lock>:
 8008318:	4801      	ldr	r0, [pc, #4]	@ (8008320 <__malloc_lock+0x8>)
 800831a:	f7ff b8b2 	b.w	8007482 <__retarget_lock_acquire_recursive>
 800831e:	bf00      	nop
 8008320:	20000bec 	.word	0x20000bec

08008324 <__malloc_unlock>:
 8008324:	4801      	ldr	r0, [pc, #4]	@ (800832c <__malloc_unlock+0x8>)
 8008326:	f7ff b8ad 	b.w	8007484 <__retarget_lock_release_recursive>
 800832a:	bf00      	nop
 800832c:	20000bec 	.word	0x20000bec

08008330 <_Balloc>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	69c6      	ldr	r6, [r0, #28]
 8008334:	4604      	mov	r4, r0
 8008336:	460d      	mov	r5, r1
 8008338:	b976      	cbnz	r6, 8008358 <_Balloc+0x28>
 800833a:	2010      	movs	r0, #16
 800833c:	f7ff ff42 	bl	80081c4 <malloc>
 8008340:	4602      	mov	r2, r0
 8008342:	61e0      	str	r0, [r4, #28]
 8008344:	b920      	cbnz	r0, 8008350 <_Balloc+0x20>
 8008346:	4b18      	ldr	r3, [pc, #96]	@ (80083a8 <_Balloc+0x78>)
 8008348:	4818      	ldr	r0, [pc, #96]	@ (80083ac <_Balloc+0x7c>)
 800834a:	216b      	movs	r1, #107	@ 0x6b
 800834c:	f001 fd7c 	bl	8009e48 <__assert_func>
 8008350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008354:	6006      	str	r6, [r0, #0]
 8008356:	60c6      	str	r6, [r0, #12]
 8008358:	69e6      	ldr	r6, [r4, #28]
 800835a:	68f3      	ldr	r3, [r6, #12]
 800835c:	b183      	cbz	r3, 8008380 <_Balloc+0x50>
 800835e:	69e3      	ldr	r3, [r4, #28]
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008366:	b9b8      	cbnz	r0, 8008398 <_Balloc+0x68>
 8008368:	2101      	movs	r1, #1
 800836a:	fa01 f605 	lsl.w	r6, r1, r5
 800836e:	1d72      	adds	r2, r6, #5
 8008370:	0092      	lsls	r2, r2, #2
 8008372:	4620      	mov	r0, r4
 8008374:	f001 fd86 	bl	8009e84 <_calloc_r>
 8008378:	b160      	cbz	r0, 8008394 <_Balloc+0x64>
 800837a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800837e:	e00e      	b.n	800839e <_Balloc+0x6e>
 8008380:	2221      	movs	r2, #33	@ 0x21
 8008382:	2104      	movs	r1, #4
 8008384:	4620      	mov	r0, r4
 8008386:	f001 fd7d 	bl	8009e84 <_calloc_r>
 800838a:	69e3      	ldr	r3, [r4, #28]
 800838c:	60f0      	str	r0, [r6, #12]
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d1e4      	bne.n	800835e <_Balloc+0x2e>
 8008394:	2000      	movs	r0, #0
 8008396:	bd70      	pop	{r4, r5, r6, pc}
 8008398:	6802      	ldr	r2, [r0, #0]
 800839a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800839e:	2300      	movs	r3, #0
 80083a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a4:	e7f7      	b.n	8008396 <_Balloc+0x66>
 80083a6:	bf00      	nop
 80083a8:	0800acf6 	.word	0x0800acf6
 80083ac:	0800ad76 	.word	0x0800ad76

080083b0 <_Bfree>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	69c6      	ldr	r6, [r0, #28]
 80083b4:	4605      	mov	r5, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	b976      	cbnz	r6, 80083d8 <_Bfree+0x28>
 80083ba:	2010      	movs	r0, #16
 80083bc:	f7ff ff02 	bl	80081c4 <malloc>
 80083c0:	4602      	mov	r2, r0
 80083c2:	61e8      	str	r0, [r5, #28]
 80083c4:	b920      	cbnz	r0, 80083d0 <_Bfree+0x20>
 80083c6:	4b09      	ldr	r3, [pc, #36]	@ (80083ec <_Bfree+0x3c>)
 80083c8:	4809      	ldr	r0, [pc, #36]	@ (80083f0 <_Bfree+0x40>)
 80083ca:	218f      	movs	r1, #143	@ 0x8f
 80083cc:	f001 fd3c 	bl	8009e48 <__assert_func>
 80083d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d4:	6006      	str	r6, [r0, #0]
 80083d6:	60c6      	str	r6, [r0, #12]
 80083d8:	b13c      	cbz	r4, 80083ea <_Bfree+0x3a>
 80083da:	69eb      	ldr	r3, [r5, #28]
 80083dc:	6862      	ldr	r2, [r4, #4]
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083e4:	6021      	str	r1, [r4, #0]
 80083e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	0800acf6 	.word	0x0800acf6
 80083f0:	0800ad76 	.word	0x0800ad76

080083f4 <__multadd>:
 80083f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f8:	690d      	ldr	r5, [r1, #16]
 80083fa:	4607      	mov	r7, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	461e      	mov	r6, r3
 8008400:	f101 0c14 	add.w	ip, r1, #20
 8008404:	2000      	movs	r0, #0
 8008406:	f8dc 3000 	ldr.w	r3, [ip]
 800840a:	b299      	uxth	r1, r3
 800840c:	fb02 6101 	mla	r1, r2, r1, r6
 8008410:	0c1e      	lsrs	r6, r3, #16
 8008412:	0c0b      	lsrs	r3, r1, #16
 8008414:	fb02 3306 	mla	r3, r2, r6, r3
 8008418:	b289      	uxth	r1, r1
 800841a:	3001      	adds	r0, #1
 800841c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008420:	4285      	cmp	r5, r0
 8008422:	f84c 1b04 	str.w	r1, [ip], #4
 8008426:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800842a:	dcec      	bgt.n	8008406 <__multadd+0x12>
 800842c:	b30e      	cbz	r6, 8008472 <__multadd+0x7e>
 800842e:	68a3      	ldr	r3, [r4, #8]
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc19      	bgt.n	8008468 <__multadd+0x74>
 8008434:	6861      	ldr	r1, [r4, #4]
 8008436:	4638      	mov	r0, r7
 8008438:	3101      	adds	r1, #1
 800843a:	f7ff ff79 	bl	8008330 <_Balloc>
 800843e:	4680      	mov	r8, r0
 8008440:	b928      	cbnz	r0, 800844e <__multadd+0x5a>
 8008442:	4602      	mov	r2, r0
 8008444:	4b0c      	ldr	r3, [pc, #48]	@ (8008478 <__multadd+0x84>)
 8008446:	480d      	ldr	r0, [pc, #52]	@ (800847c <__multadd+0x88>)
 8008448:	21ba      	movs	r1, #186	@ 0xba
 800844a:	f001 fcfd 	bl	8009e48 <__assert_func>
 800844e:	6922      	ldr	r2, [r4, #16]
 8008450:	3202      	adds	r2, #2
 8008452:	f104 010c 	add.w	r1, r4, #12
 8008456:	0092      	lsls	r2, r2, #2
 8008458:	300c      	adds	r0, #12
 800845a:	f001 fcdf 	bl	8009e1c <memcpy>
 800845e:	4621      	mov	r1, r4
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff ffa5 	bl	80083b0 <_Bfree>
 8008466:	4644      	mov	r4, r8
 8008468:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800846c:	3501      	adds	r5, #1
 800846e:	615e      	str	r6, [r3, #20]
 8008470:	6125      	str	r5, [r4, #16]
 8008472:	4620      	mov	r0, r4
 8008474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008478:	0800ad65 	.word	0x0800ad65
 800847c:	0800ad76 	.word	0x0800ad76

08008480 <__s2b>:
 8008480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008484:	460c      	mov	r4, r1
 8008486:	4615      	mov	r5, r2
 8008488:	461f      	mov	r7, r3
 800848a:	2209      	movs	r2, #9
 800848c:	3308      	adds	r3, #8
 800848e:	4606      	mov	r6, r0
 8008490:	fb93 f3f2 	sdiv	r3, r3, r2
 8008494:	2100      	movs	r1, #0
 8008496:	2201      	movs	r2, #1
 8008498:	429a      	cmp	r2, r3
 800849a:	db09      	blt.n	80084b0 <__s2b+0x30>
 800849c:	4630      	mov	r0, r6
 800849e:	f7ff ff47 	bl	8008330 <_Balloc>
 80084a2:	b940      	cbnz	r0, 80084b6 <__s2b+0x36>
 80084a4:	4602      	mov	r2, r0
 80084a6:	4b19      	ldr	r3, [pc, #100]	@ (800850c <__s2b+0x8c>)
 80084a8:	4819      	ldr	r0, [pc, #100]	@ (8008510 <__s2b+0x90>)
 80084aa:	21d3      	movs	r1, #211	@ 0xd3
 80084ac:	f001 fccc 	bl	8009e48 <__assert_func>
 80084b0:	0052      	lsls	r2, r2, #1
 80084b2:	3101      	adds	r1, #1
 80084b4:	e7f0      	b.n	8008498 <__s2b+0x18>
 80084b6:	9b08      	ldr	r3, [sp, #32]
 80084b8:	6143      	str	r3, [r0, #20]
 80084ba:	2d09      	cmp	r5, #9
 80084bc:	f04f 0301 	mov.w	r3, #1
 80084c0:	6103      	str	r3, [r0, #16]
 80084c2:	dd16      	ble.n	80084f2 <__s2b+0x72>
 80084c4:	f104 0909 	add.w	r9, r4, #9
 80084c8:	46c8      	mov	r8, r9
 80084ca:	442c      	add	r4, r5
 80084cc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084d0:	4601      	mov	r1, r0
 80084d2:	3b30      	subs	r3, #48	@ 0x30
 80084d4:	220a      	movs	r2, #10
 80084d6:	4630      	mov	r0, r6
 80084d8:	f7ff ff8c 	bl	80083f4 <__multadd>
 80084dc:	45a0      	cmp	r8, r4
 80084de:	d1f5      	bne.n	80084cc <__s2b+0x4c>
 80084e0:	f1a5 0408 	sub.w	r4, r5, #8
 80084e4:	444c      	add	r4, r9
 80084e6:	1b2d      	subs	r5, r5, r4
 80084e8:	1963      	adds	r3, r4, r5
 80084ea:	42bb      	cmp	r3, r7
 80084ec:	db04      	blt.n	80084f8 <__s2b+0x78>
 80084ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f2:	340a      	adds	r4, #10
 80084f4:	2509      	movs	r5, #9
 80084f6:	e7f6      	b.n	80084e6 <__s2b+0x66>
 80084f8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80084fc:	4601      	mov	r1, r0
 80084fe:	3b30      	subs	r3, #48	@ 0x30
 8008500:	220a      	movs	r2, #10
 8008502:	4630      	mov	r0, r6
 8008504:	f7ff ff76 	bl	80083f4 <__multadd>
 8008508:	e7ee      	b.n	80084e8 <__s2b+0x68>
 800850a:	bf00      	nop
 800850c:	0800ad65 	.word	0x0800ad65
 8008510:	0800ad76 	.word	0x0800ad76

08008514 <__hi0bits>:
 8008514:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008518:	4603      	mov	r3, r0
 800851a:	bf36      	itet	cc
 800851c:	0403      	lslcc	r3, r0, #16
 800851e:	2000      	movcs	r0, #0
 8008520:	2010      	movcc	r0, #16
 8008522:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008526:	bf3c      	itt	cc
 8008528:	021b      	lslcc	r3, r3, #8
 800852a:	3008      	addcc	r0, #8
 800852c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008530:	bf3c      	itt	cc
 8008532:	011b      	lslcc	r3, r3, #4
 8008534:	3004      	addcc	r0, #4
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	bf3c      	itt	cc
 800853c:	009b      	lslcc	r3, r3, #2
 800853e:	3002      	addcc	r0, #2
 8008540:	2b00      	cmp	r3, #0
 8008542:	db05      	blt.n	8008550 <__hi0bits+0x3c>
 8008544:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008548:	f100 0001 	add.w	r0, r0, #1
 800854c:	bf08      	it	eq
 800854e:	2020      	moveq	r0, #32
 8008550:	4770      	bx	lr

08008552 <__lo0bits>:
 8008552:	6803      	ldr	r3, [r0, #0]
 8008554:	4602      	mov	r2, r0
 8008556:	f013 0007 	ands.w	r0, r3, #7
 800855a:	d00b      	beq.n	8008574 <__lo0bits+0x22>
 800855c:	07d9      	lsls	r1, r3, #31
 800855e:	d421      	bmi.n	80085a4 <__lo0bits+0x52>
 8008560:	0798      	lsls	r0, r3, #30
 8008562:	bf49      	itett	mi
 8008564:	085b      	lsrmi	r3, r3, #1
 8008566:	089b      	lsrpl	r3, r3, #2
 8008568:	2001      	movmi	r0, #1
 800856a:	6013      	strmi	r3, [r2, #0]
 800856c:	bf5c      	itt	pl
 800856e:	6013      	strpl	r3, [r2, #0]
 8008570:	2002      	movpl	r0, #2
 8008572:	4770      	bx	lr
 8008574:	b299      	uxth	r1, r3
 8008576:	b909      	cbnz	r1, 800857c <__lo0bits+0x2a>
 8008578:	0c1b      	lsrs	r3, r3, #16
 800857a:	2010      	movs	r0, #16
 800857c:	b2d9      	uxtb	r1, r3
 800857e:	b909      	cbnz	r1, 8008584 <__lo0bits+0x32>
 8008580:	3008      	adds	r0, #8
 8008582:	0a1b      	lsrs	r3, r3, #8
 8008584:	0719      	lsls	r1, r3, #28
 8008586:	bf04      	itt	eq
 8008588:	091b      	lsreq	r3, r3, #4
 800858a:	3004      	addeq	r0, #4
 800858c:	0799      	lsls	r1, r3, #30
 800858e:	bf04      	itt	eq
 8008590:	089b      	lsreq	r3, r3, #2
 8008592:	3002      	addeq	r0, #2
 8008594:	07d9      	lsls	r1, r3, #31
 8008596:	d403      	bmi.n	80085a0 <__lo0bits+0x4e>
 8008598:	085b      	lsrs	r3, r3, #1
 800859a:	f100 0001 	add.w	r0, r0, #1
 800859e:	d003      	beq.n	80085a8 <__lo0bits+0x56>
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	4770      	bx	lr
 80085a4:	2000      	movs	r0, #0
 80085a6:	4770      	bx	lr
 80085a8:	2020      	movs	r0, #32
 80085aa:	4770      	bx	lr

080085ac <__i2b>:
 80085ac:	b510      	push	{r4, lr}
 80085ae:	460c      	mov	r4, r1
 80085b0:	2101      	movs	r1, #1
 80085b2:	f7ff febd 	bl	8008330 <_Balloc>
 80085b6:	4602      	mov	r2, r0
 80085b8:	b928      	cbnz	r0, 80085c6 <__i2b+0x1a>
 80085ba:	4b05      	ldr	r3, [pc, #20]	@ (80085d0 <__i2b+0x24>)
 80085bc:	4805      	ldr	r0, [pc, #20]	@ (80085d4 <__i2b+0x28>)
 80085be:	f240 1145 	movw	r1, #325	@ 0x145
 80085c2:	f001 fc41 	bl	8009e48 <__assert_func>
 80085c6:	2301      	movs	r3, #1
 80085c8:	6144      	str	r4, [r0, #20]
 80085ca:	6103      	str	r3, [r0, #16]
 80085cc:	bd10      	pop	{r4, pc}
 80085ce:	bf00      	nop
 80085d0:	0800ad65 	.word	0x0800ad65
 80085d4:	0800ad76 	.word	0x0800ad76

080085d8 <__multiply>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	4614      	mov	r4, r2
 80085de:	690a      	ldr	r2, [r1, #16]
 80085e0:	6923      	ldr	r3, [r4, #16]
 80085e2:	429a      	cmp	r2, r3
 80085e4:	bfa8      	it	ge
 80085e6:	4623      	movge	r3, r4
 80085e8:	460f      	mov	r7, r1
 80085ea:	bfa4      	itt	ge
 80085ec:	460c      	movge	r4, r1
 80085ee:	461f      	movge	r7, r3
 80085f0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085f4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085f8:	68a3      	ldr	r3, [r4, #8]
 80085fa:	6861      	ldr	r1, [r4, #4]
 80085fc:	eb0a 0609 	add.w	r6, sl, r9
 8008600:	42b3      	cmp	r3, r6
 8008602:	b085      	sub	sp, #20
 8008604:	bfb8      	it	lt
 8008606:	3101      	addlt	r1, #1
 8008608:	f7ff fe92 	bl	8008330 <_Balloc>
 800860c:	b930      	cbnz	r0, 800861c <__multiply+0x44>
 800860e:	4602      	mov	r2, r0
 8008610:	4b44      	ldr	r3, [pc, #272]	@ (8008724 <__multiply+0x14c>)
 8008612:	4845      	ldr	r0, [pc, #276]	@ (8008728 <__multiply+0x150>)
 8008614:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008618:	f001 fc16 	bl	8009e48 <__assert_func>
 800861c:	f100 0514 	add.w	r5, r0, #20
 8008620:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008624:	462b      	mov	r3, r5
 8008626:	2200      	movs	r2, #0
 8008628:	4543      	cmp	r3, r8
 800862a:	d321      	bcc.n	8008670 <__multiply+0x98>
 800862c:	f107 0114 	add.w	r1, r7, #20
 8008630:	f104 0214 	add.w	r2, r4, #20
 8008634:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008638:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800863c:	9302      	str	r3, [sp, #8]
 800863e:	1b13      	subs	r3, r2, r4
 8008640:	3b15      	subs	r3, #21
 8008642:	f023 0303 	bic.w	r3, r3, #3
 8008646:	3304      	adds	r3, #4
 8008648:	f104 0715 	add.w	r7, r4, #21
 800864c:	42ba      	cmp	r2, r7
 800864e:	bf38      	it	cc
 8008650:	2304      	movcc	r3, #4
 8008652:	9301      	str	r3, [sp, #4]
 8008654:	9b02      	ldr	r3, [sp, #8]
 8008656:	9103      	str	r1, [sp, #12]
 8008658:	428b      	cmp	r3, r1
 800865a:	d80c      	bhi.n	8008676 <__multiply+0x9e>
 800865c:	2e00      	cmp	r6, #0
 800865e:	dd03      	ble.n	8008668 <__multiply+0x90>
 8008660:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008664:	2b00      	cmp	r3, #0
 8008666:	d05b      	beq.n	8008720 <__multiply+0x148>
 8008668:	6106      	str	r6, [r0, #16]
 800866a:	b005      	add	sp, #20
 800866c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008670:	f843 2b04 	str.w	r2, [r3], #4
 8008674:	e7d8      	b.n	8008628 <__multiply+0x50>
 8008676:	f8b1 a000 	ldrh.w	sl, [r1]
 800867a:	f1ba 0f00 	cmp.w	sl, #0
 800867e:	d024      	beq.n	80086ca <__multiply+0xf2>
 8008680:	f104 0e14 	add.w	lr, r4, #20
 8008684:	46a9      	mov	r9, r5
 8008686:	f04f 0c00 	mov.w	ip, #0
 800868a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800868e:	f8d9 3000 	ldr.w	r3, [r9]
 8008692:	fa1f fb87 	uxth.w	fp, r7
 8008696:	b29b      	uxth	r3, r3
 8008698:	fb0a 330b 	mla	r3, sl, fp, r3
 800869c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80086a0:	f8d9 7000 	ldr.w	r7, [r9]
 80086a4:	4463      	add	r3, ip
 80086a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086aa:	fb0a c70b 	mla	r7, sl, fp, ip
 80086ae:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80086b2:	b29b      	uxth	r3, r3
 80086b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086b8:	4572      	cmp	r2, lr
 80086ba:	f849 3b04 	str.w	r3, [r9], #4
 80086be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086c2:	d8e2      	bhi.n	800868a <__multiply+0xb2>
 80086c4:	9b01      	ldr	r3, [sp, #4]
 80086c6:	f845 c003 	str.w	ip, [r5, r3]
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086d0:	3104      	adds	r1, #4
 80086d2:	f1b9 0f00 	cmp.w	r9, #0
 80086d6:	d021      	beq.n	800871c <__multiply+0x144>
 80086d8:	682b      	ldr	r3, [r5, #0]
 80086da:	f104 0c14 	add.w	ip, r4, #20
 80086de:	46ae      	mov	lr, r5
 80086e0:	f04f 0a00 	mov.w	sl, #0
 80086e4:	f8bc b000 	ldrh.w	fp, [ip]
 80086e8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086ec:	fb09 770b 	mla	r7, r9, fp, r7
 80086f0:	4457      	add	r7, sl
 80086f2:	b29b      	uxth	r3, r3
 80086f4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086f8:	f84e 3b04 	str.w	r3, [lr], #4
 80086fc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008700:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008704:	f8be 3000 	ldrh.w	r3, [lr]
 8008708:	fb09 330a 	mla	r3, r9, sl, r3
 800870c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008710:	4562      	cmp	r2, ip
 8008712:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008716:	d8e5      	bhi.n	80086e4 <__multiply+0x10c>
 8008718:	9f01      	ldr	r7, [sp, #4]
 800871a:	51eb      	str	r3, [r5, r7]
 800871c:	3504      	adds	r5, #4
 800871e:	e799      	b.n	8008654 <__multiply+0x7c>
 8008720:	3e01      	subs	r6, #1
 8008722:	e79b      	b.n	800865c <__multiply+0x84>
 8008724:	0800ad65 	.word	0x0800ad65
 8008728:	0800ad76 	.word	0x0800ad76

0800872c <__pow5mult>:
 800872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008730:	4615      	mov	r5, r2
 8008732:	f012 0203 	ands.w	r2, r2, #3
 8008736:	4607      	mov	r7, r0
 8008738:	460e      	mov	r6, r1
 800873a:	d007      	beq.n	800874c <__pow5mult+0x20>
 800873c:	4c25      	ldr	r4, [pc, #148]	@ (80087d4 <__pow5mult+0xa8>)
 800873e:	3a01      	subs	r2, #1
 8008740:	2300      	movs	r3, #0
 8008742:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008746:	f7ff fe55 	bl	80083f4 <__multadd>
 800874a:	4606      	mov	r6, r0
 800874c:	10ad      	asrs	r5, r5, #2
 800874e:	d03d      	beq.n	80087cc <__pow5mult+0xa0>
 8008750:	69fc      	ldr	r4, [r7, #28]
 8008752:	b97c      	cbnz	r4, 8008774 <__pow5mult+0x48>
 8008754:	2010      	movs	r0, #16
 8008756:	f7ff fd35 	bl	80081c4 <malloc>
 800875a:	4602      	mov	r2, r0
 800875c:	61f8      	str	r0, [r7, #28]
 800875e:	b928      	cbnz	r0, 800876c <__pow5mult+0x40>
 8008760:	4b1d      	ldr	r3, [pc, #116]	@ (80087d8 <__pow5mult+0xac>)
 8008762:	481e      	ldr	r0, [pc, #120]	@ (80087dc <__pow5mult+0xb0>)
 8008764:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008768:	f001 fb6e 	bl	8009e48 <__assert_func>
 800876c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008770:	6004      	str	r4, [r0, #0]
 8008772:	60c4      	str	r4, [r0, #12]
 8008774:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008778:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800877c:	b94c      	cbnz	r4, 8008792 <__pow5mult+0x66>
 800877e:	f240 2171 	movw	r1, #625	@ 0x271
 8008782:	4638      	mov	r0, r7
 8008784:	f7ff ff12 	bl	80085ac <__i2b>
 8008788:	2300      	movs	r3, #0
 800878a:	f8c8 0008 	str.w	r0, [r8, #8]
 800878e:	4604      	mov	r4, r0
 8008790:	6003      	str	r3, [r0, #0]
 8008792:	f04f 0900 	mov.w	r9, #0
 8008796:	07eb      	lsls	r3, r5, #31
 8008798:	d50a      	bpl.n	80087b0 <__pow5mult+0x84>
 800879a:	4631      	mov	r1, r6
 800879c:	4622      	mov	r2, r4
 800879e:	4638      	mov	r0, r7
 80087a0:	f7ff ff1a 	bl	80085d8 <__multiply>
 80087a4:	4631      	mov	r1, r6
 80087a6:	4680      	mov	r8, r0
 80087a8:	4638      	mov	r0, r7
 80087aa:	f7ff fe01 	bl	80083b0 <_Bfree>
 80087ae:	4646      	mov	r6, r8
 80087b0:	106d      	asrs	r5, r5, #1
 80087b2:	d00b      	beq.n	80087cc <__pow5mult+0xa0>
 80087b4:	6820      	ldr	r0, [r4, #0]
 80087b6:	b938      	cbnz	r0, 80087c8 <__pow5mult+0x9c>
 80087b8:	4622      	mov	r2, r4
 80087ba:	4621      	mov	r1, r4
 80087bc:	4638      	mov	r0, r7
 80087be:	f7ff ff0b 	bl	80085d8 <__multiply>
 80087c2:	6020      	str	r0, [r4, #0]
 80087c4:	f8c0 9000 	str.w	r9, [r0]
 80087c8:	4604      	mov	r4, r0
 80087ca:	e7e4      	b.n	8008796 <__pow5mult+0x6a>
 80087cc:	4630      	mov	r0, r6
 80087ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d2:	bf00      	nop
 80087d4:	0800add0 	.word	0x0800add0
 80087d8:	0800acf6 	.word	0x0800acf6
 80087dc:	0800ad76 	.word	0x0800ad76

080087e0 <__lshift>:
 80087e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e4:	460c      	mov	r4, r1
 80087e6:	6849      	ldr	r1, [r1, #4]
 80087e8:	6923      	ldr	r3, [r4, #16]
 80087ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087ee:	68a3      	ldr	r3, [r4, #8]
 80087f0:	4607      	mov	r7, r0
 80087f2:	4691      	mov	r9, r2
 80087f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087f8:	f108 0601 	add.w	r6, r8, #1
 80087fc:	42b3      	cmp	r3, r6
 80087fe:	db0b      	blt.n	8008818 <__lshift+0x38>
 8008800:	4638      	mov	r0, r7
 8008802:	f7ff fd95 	bl	8008330 <_Balloc>
 8008806:	4605      	mov	r5, r0
 8008808:	b948      	cbnz	r0, 800881e <__lshift+0x3e>
 800880a:	4602      	mov	r2, r0
 800880c:	4b28      	ldr	r3, [pc, #160]	@ (80088b0 <__lshift+0xd0>)
 800880e:	4829      	ldr	r0, [pc, #164]	@ (80088b4 <__lshift+0xd4>)
 8008810:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008814:	f001 fb18 	bl	8009e48 <__assert_func>
 8008818:	3101      	adds	r1, #1
 800881a:	005b      	lsls	r3, r3, #1
 800881c:	e7ee      	b.n	80087fc <__lshift+0x1c>
 800881e:	2300      	movs	r3, #0
 8008820:	f100 0114 	add.w	r1, r0, #20
 8008824:	f100 0210 	add.w	r2, r0, #16
 8008828:	4618      	mov	r0, r3
 800882a:	4553      	cmp	r3, sl
 800882c:	db33      	blt.n	8008896 <__lshift+0xb6>
 800882e:	6920      	ldr	r0, [r4, #16]
 8008830:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008834:	f104 0314 	add.w	r3, r4, #20
 8008838:	f019 091f 	ands.w	r9, r9, #31
 800883c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008840:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008844:	d02b      	beq.n	800889e <__lshift+0xbe>
 8008846:	f1c9 0e20 	rsb	lr, r9, #32
 800884a:	468a      	mov	sl, r1
 800884c:	2200      	movs	r2, #0
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	fa00 f009 	lsl.w	r0, r0, r9
 8008854:	4310      	orrs	r0, r2
 8008856:	f84a 0b04 	str.w	r0, [sl], #4
 800885a:	f853 2b04 	ldr.w	r2, [r3], #4
 800885e:	459c      	cmp	ip, r3
 8008860:	fa22 f20e 	lsr.w	r2, r2, lr
 8008864:	d8f3      	bhi.n	800884e <__lshift+0x6e>
 8008866:	ebac 0304 	sub.w	r3, ip, r4
 800886a:	3b15      	subs	r3, #21
 800886c:	f023 0303 	bic.w	r3, r3, #3
 8008870:	3304      	adds	r3, #4
 8008872:	f104 0015 	add.w	r0, r4, #21
 8008876:	4584      	cmp	ip, r0
 8008878:	bf38      	it	cc
 800887a:	2304      	movcc	r3, #4
 800887c:	50ca      	str	r2, [r1, r3]
 800887e:	b10a      	cbz	r2, 8008884 <__lshift+0xa4>
 8008880:	f108 0602 	add.w	r6, r8, #2
 8008884:	3e01      	subs	r6, #1
 8008886:	4638      	mov	r0, r7
 8008888:	612e      	str	r6, [r5, #16]
 800888a:	4621      	mov	r1, r4
 800888c:	f7ff fd90 	bl	80083b0 <_Bfree>
 8008890:	4628      	mov	r0, r5
 8008892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008896:	f842 0f04 	str.w	r0, [r2, #4]!
 800889a:	3301      	adds	r3, #1
 800889c:	e7c5      	b.n	800882a <__lshift+0x4a>
 800889e:	3904      	subs	r1, #4
 80088a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a4:	f841 2f04 	str.w	r2, [r1, #4]!
 80088a8:	459c      	cmp	ip, r3
 80088aa:	d8f9      	bhi.n	80088a0 <__lshift+0xc0>
 80088ac:	e7ea      	b.n	8008884 <__lshift+0xa4>
 80088ae:	bf00      	nop
 80088b0:	0800ad65 	.word	0x0800ad65
 80088b4:	0800ad76 	.word	0x0800ad76

080088b8 <__mcmp>:
 80088b8:	690a      	ldr	r2, [r1, #16]
 80088ba:	4603      	mov	r3, r0
 80088bc:	6900      	ldr	r0, [r0, #16]
 80088be:	1a80      	subs	r0, r0, r2
 80088c0:	b530      	push	{r4, r5, lr}
 80088c2:	d10e      	bne.n	80088e2 <__mcmp+0x2a>
 80088c4:	3314      	adds	r3, #20
 80088c6:	3114      	adds	r1, #20
 80088c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088d8:	4295      	cmp	r5, r2
 80088da:	d003      	beq.n	80088e4 <__mcmp+0x2c>
 80088dc:	d205      	bcs.n	80088ea <__mcmp+0x32>
 80088de:	f04f 30ff 	mov.w	r0, #4294967295
 80088e2:	bd30      	pop	{r4, r5, pc}
 80088e4:	42a3      	cmp	r3, r4
 80088e6:	d3f3      	bcc.n	80088d0 <__mcmp+0x18>
 80088e8:	e7fb      	b.n	80088e2 <__mcmp+0x2a>
 80088ea:	2001      	movs	r0, #1
 80088ec:	e7f9      	b.n	80088e2 <__mcmp+0x2a>
	...

080088f0 <__mdiff>:
 80088f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f4:	4689      	mov	r9, r1
 80088f6:	4606      	mov	r6, r0
 80088f8:	4611      	mov	r1, r2
 80088fa:	4648      	mov	r0, r9
 80088fc:	4614      	mov	r4, r2
 80088fe:	f7ff ffdb 	bl	80088b8 <__mcmp>
 8008902:	1e05      	subs	r5, r0, #0
 8008904:	d112      	bne.n	800892c <__mdiff+0x3c>
 8008906:	4629      	mov	r1, r5
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff fd11 	bl	8008330 <_Balloc>
 800890e:	4602      	mov	r2, r0
 8008910:	b928      	cbnz	r0, 800891e <__mdiff+0x2e>
 8008912:	4b3f      	ldr	r3, [pc, #252]	@ (8008a10 <__mdiff+0x120>)
 8008914:	f240 2137 	movw	r1, #567	@ 0x237
 8008918:	483e      	ldr	r0, [pc, #248]	@ (8008a14 <__mdiff+0x124>)
 800891a:	f001 fa95 	bl	8009e48 <__assert_func>
 800891e:	2301      	movs	r3, #1
 8008920:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008924:	4610      	mov	r0, r2
 8008926:	b003      	add	sp, #12
 8008928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800892c:	bfbc      	itt	lt
 800892e:	464b      	movlt	r3, r9
 8008930:	46a1      	movlt	r9, r4
 8008932:	4630      	mov	r0, r6
 8008934:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008938:	bfba      	itte	lt
 800893a:	461c      	movlt	r4, r3
 800893c:	2501      	movlt	r5, #1
 800893e:	2500      	movge	r5, #0
 8008940:	f7ff fcf6 	bl	8008330 <_Balloc>
 8008944:	4602      	mov	r2, r0
 8008946:	b918      	cbnz	r0, 8008950 <__mdiff+0x60>
 8008948:	4b31      	ldr	r3, [pc, #196]	@ (8008a10 <__mdiff+0x120>)
 800894a:	f240 2145 	movw	r1, #581	@ 0x245
 800894e:	e7e3      	b.n	8008918 <__mdiff+0x28>
 8008950:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008954:	6926      	ldr	r6, [r4, #16]
 8008956:	60c5      	str	r5, [r0, #12]
 8008958:	f109 0310 	add.w	r3, r9, #16
 800895c:	f109 0514 	add.w	r5, r9, #20
 8008960:	f104 0e14 	add.w	lr, r4, #20
 8008964:	f100 0b14 	add.w	fp, r0, #20
 8008968:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800896c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	46d9      	mov	r9, fp
 8008974:	f04f 0c00 	mov.w	ip, #0
 8008978:	9b01      	ldr	r3, [sp, #4]
 800897a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800897e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008982:	9301      	str	r3, [sp, #4]
 8008984:	fa1f f38a 	uxth.w	r3, sl
 8008988:	4619      	mov	r1, r3
 800898a:	b283      	uxth	r3, r0
 800898c:	1acb      	subs	r3, r1, r3
 800898e:	0c00      	lsrs	r0, r0, #16
 8008990:	4463      	add	r3, ip
 8008992:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008996:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800899a:	b29b      	uxth	r3, r3
 800899c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089a0:	4576      	cmp	r6, lr
 80089a2:	f849 3b04 	str.w	r3, [r9], #4
 80089a6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089aa:	d8e5      	bhi.n	8008978 <__mdiff+0x88>
 80089ac:	1b33      	subs	r3, r6, r4
 80089ae:	3b15      	subs	r3, #21
 80089b0:	f023 0303 	bic.w	r3, r3, #3
 80089b4:	3415      	adds	r4, #21
 80089b6:	3304      	adds	r3, #4
 80089b8:	42a6      	cmp	r6, r4
 80089ba:	bf38      	it	cc
 80089bc:	2304      	movcc	r3, #4
 80089be:	441d      	add	r5, r3
 80089c0:	445b      	add	r3, fp
 80089c2:	461e      	mov	r6, r3
 80089c4:	462c      	mov	r4, r5
 80089c6:	4544      	cmp	r4, r8
 80089c8:	d30e      	bcc.n	80089e8 <__mdiff+0xf8>
 80089ca:	f108 0103 	add.w	r1, r8, #3
 80089ce:	1b49      	subs	r1, r1, r5
 80089d0:	f021 0103 	bic.w	r1, r1, #3
 80089d4:	3d03      	subs	r5, #3
 80089d6:	45a8      	cmp	r8, r5
 80089d8:	bf38      	it	cc
 80089da:	2100      	movcc	r1, #0
 80089dc:	440b      	add	r3, r1
 80089de:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089e2:	b191      	cbz	r1, 8008a0a <__mdiff+0x11a>
 80089e4:	6117      	str	r7, [r2, #16]
 80089e6:	e79d      	b.n	8008924 <__mdiff+0x34>
 80089e8:	f854 1b04 	ldr.w	r1, [r4], #4
 80089ec:	46e6      	mov	lr, ip
 80089ee:	0c08      	lsrs	r0, r1, #16
 80089f0:	fa1c fc81 	uxtah	ip, ip, r1
 80089f4:	4471      	add	r1, lr
 80089f6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089fa:	b289      	uxth	r1, r1
 80089fc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a00:	f846 1b04 	str.w	r1, [r6], #4
 8008a04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a08:	e7dd      	b.n	80089c6 <__mdiff+0xd6>
 8008a0a:	3f01      	subs	r7, #1
 8008a0c:	e7e7      	b.n	80089de <__mdiff+0xee>
 8008a0e:	bf00      	nop
 8008a10:	0800ad65 	.word	0x0800ad65
 8008a14:	0800ad76 	.word	0x0800ad76

08008a18 <__ulp>:
 8008a18:	b082      	sub	sp, #8
 8008a1a:	ed8d 0b00 	vstr	d0, [sp]
 8008a1e:	9a01      	ldr	r2, [sp, #4]
 8008a20:	4b0f      	ldr	r3, [pc, #60]	@ (8008a60 <__ulp+0x48>)
 8008a22:	4013      	ands	r3, r2
 8008a24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	dc08      	bgt.n	8008a3e <__ulp+0x26>
 8008a2c:	425b      	negs	r3, r3
 8008a2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a36:	da04      	bge.n	8008a42 <__ulp+0x2a>
 8008a38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a3c:	4113      	asrs	r3, r2
 8008a3e:	2200      	movs	r2, #0
 8008a40:	e008      	b.n	8008a54 <__ulp+0x3c>
 8008a42:	f1a2 0314 	sub.w	r3, r2, #20
 8008a46:	2b1e      	cmp	r3, #30
 8008a48:	bfda      	itte	le
 8008a4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008a4e:	40da      	lsrle	r2, r3
 8008a50:	2201      	movgt	r2, #1
 8008a52:	2300      	movs	r3, #0
 8008a54:	4619      	mov	r1, r3
 8008a56:	4610      	mov	r0, r2
 8008a58:	ec41 0b10 	vmov	d0, r0, r1
 8008a5c:	b002      	add	sp, #8
 8008a5e:	4770      	bx	lr
 8008a60:	7ff00000 	.word	0x7ff00000

08008a64 <__b2d>:
 8008a64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a68:	6906      	ldr	r6, [r0, #16]
 8008a6a:	f100 0814 	add.w	r8, r0, #20
 8008a6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008a72:	1f37      	subs	r7, r6, #4
 8008a74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a78:	4610      	mov	r0, r2
 8008a7a:	f7ff fd4b 	bl	8008514 <__hi0bits>
 8008a7e:	f1c0 0320 	rsb	r3, r0, #32
 8008a82:	280a      	cmp	r0, #10
 8008a84:	600b      	str	r3, [r1, #0]
 8008a86:	491b      	ldr	r1, [pc, #108]	@ (8008af4 <__b2d+0x90>)
 8008a88:	dc15      	bgt.n	8008ab6 <__b2d+0x52>
 8008a8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008a92:	45b8      	cmp	r8, r7
 8008a94:	ea43 0501 	orr.w	r5, r3, r1
 8008a98:	bf34      	ite	cc
 8008a9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008a9e:	2300      	movcs	r3, #0
 8008aa0:	3015      	adds	r0, #21
 8008aa2:	fa02 f000 	lsl.w	r0, r2, r0
 8008aa6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008aaa:	4303      	orrs	r3, r0
 8008aac:	461c      	mov	r4, r3
 8008aae:	ec45 4b10 	vmov	d0, r4, r5
 8008ab2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ab6:	45b8      	cmp	r8, r7
 8008ab8:	bf3a      	itte	cc
 8008aba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008abe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ac2:	2300      	movcs	r3, #0
 8008ac4:	380b      	subs	r0, #11
 8008ac6:	d012      	beq.n	8008aee <__b2d+0x8a>
 8008ac8:	f1c0 0120 	rsb	r1, r0, #32
 8008acc:	fa23 f401 	lsr.w	r4, r3, r1
 8008ad0:	4082      	lsls	r2, r0
 8008ad2:	4322      	orrs	r2, r4
 8008ad4:	4547      	cmp	r7, r8
 8008ad6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008ada:	bf8c      	ite	hi
 8008adc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ae0:	2200      	movls	r2, #0
 8008ae2:	4083      	lsls	r3, r0
 8008ae4:	40ca      	lsrs	r2, r1
 8008ae6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008aea:	4313      	orrs	r3, r2
 8008aec:	e7de      	b.n	8008aac <__b2d+0x48>
 8008aee:	ea42 0501 	orr.w	r5, r2, r1
 8008af2:	e7db      	b.n	8008aac <__b2d+0x48>
 8008af4:	3ff00000 	.word	0x3ff00000

08008af8 <__d2b>:
 8008af8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008afc:	460f      	mov	r7, r1
 8008afe:	2101      	movs	r1, #1
 8008b00:	ec59 8b10 	vmov	r8, r9, d0
 8008b04:	4616      	mov	r6, r2
 8008b06:	f7ff fc13 	bl	8008330 <_Balloc>
 8008b0a:	4604      	mov	r4, r0
 8008b0c:	b930      	cbnz	r0, 8008b1c <__d2b+0x24>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	4b23      	ldr	r3, [pc, #140]	@ (8008ba0 <__d2b+0xa8>)
 8008b12:	4824      	ldr	r0, [pc, #144]	@ (8008ba4 <__d2b+0xac>)
 8008b14:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b18:	f001 f996 	bl	8009e48 <__assert_func>
 8008b1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b24:	b10d      	cbz	r5, 8008b2a <__d2b+0x32>
 8008b26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008b30:	d023      	beq.n	8008b7a <__d2b+0x82>
 8008b32:	4668      	mov	r0, sp
 8008b34:	9300      	str	r3, [sp, #0]
 8008b36:	f7ff fd0c 	bl	8008552 <__lo0bits>
 8008b3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b3e:	b1d0      	cbz	r0, 8008b76 <__d2b+0x7e>
 8008b40:	f1c0 0320 	rsb	r3, r0, #32
 8008b44:	fa02 f303 	lsl.w	r3, r2, r3
 8008b48:	430b      	orrs	r3, r1
 8008b4a:	40c2      	lsrs	r2, r0
 8008b4c:	6163      	str	r3, [r4, #20]
 8008b4e:	9201      	str	r2, [sp, #4]
 8008b50:	9b01      	ldr	r3, [sp, #4]
 8008b52:	61a3      	str	r3, [r4, #24]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bf0c      	ite	eq
 8008b58:	2201      	moveq	r2, #1
 8008b5a:	2202      	movne	r2, #2
 8008b5c:	6122      	str	r2, [r4, #16]
 8008b5e:	b1a5      	cbz	r5, 8008b8a <__d2b+0x92>
 8008b60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b64:	4405      	add	r5, r0
 8008b66:	603d      	str	r5, [r7, #0]
 8008b68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b6c:	6030      	str	r0, [r6, #0]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	b003      	add	sp, #12
 8008b72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b76:	6161      	str	r1, [r4, #20]
 8008b78:	e7ea      	b.n	8008b50 <__d2b+0x58>
 8008b7a:	a801      	add	r0, sp, #4
 8008b7c:	f7ff fce9 	bl	8008552 <__lo0bits>
 8008b80:	9b01      	ldr	r3, [sp, #4]
 8008b82:	6163      	str	r3, [r4, #20]
 8008b84:	3020      	adds	r0, #32
 8008b86:	2201      	movs	r2, #1
 8008b88:	e7e8      	b.n	8008b5c <__d2b+0x64>
 8008b8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b92:	6038      	str	r0, [r7, #0]
 8008b94:	6918      	ldr	r0, [r3, #16]
 8008b96:	f7ff fcbd 	bl	8008514 <__hi0bits>
 8008b9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008b9e:	e7e5      	b.n	8008b6c <__d2b+0x74>
 8008ba0:	0800ad65 	.word	0x0800ad65
 8008ba4:	0800ad76 	.word	0x0800ad76

08008ba8 <__ratio>:
 8008ba8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bac:	b085      	sub	sp, #20
 8008bae:	e9cd 1000 	strd	r1, r0, [sp]
 8008bb2:	a902      	add	r1, sp, #8
 8008bb4:	f7ff ff56 	bl	8008a64 <__b2d>
 8008bb8:	9800      	ldr	r0, [sp, #0]
 8008bba:	a903      	add	r1, sp, #12
 8008bbc:	ec55 4b10 	vmov	r4, r5, d0
 8008bc0:	f7ff ff50 	bl	8008a64 <__b2d>
 8008bc4:	9b01      	ldr	r3, [sp, #4]
 8008bc6:	6919      	ldr	r1, [r3, #16]
 8008bc8:	9b00      	ldr	r3, [sp, #0]
 8008bca:	691b      	ldr	r3, [r3, #16]
 8008bcc:	1ac9      	subs	r1, r1, r3
 8008bce:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	ec5b ab10 	vmov	sl, fp, d0
 8008bd8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfce      	itee	gt
 8008be0:	462a      	movgt	r2, r5
 8008be2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008be6:	465a      	movle	r2, fp
 8008be8:	462f      	mov	r7, r5
 8008bea:	46d9      	mov	r9, fp
 8008bec:	bfcc      	ite	gt
 8008bee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008bf2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008bf6:	464b      	mov	r3, r9
 8008bf8:	4652      	mov	r2, sl
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fe35 	bl	800086c <__aeabi_ddiv>
 8008c02:	ec41 0b10 	vmov	d0, r0, r1
 8008c06:	b005      	add	sp, #20
 8008c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c0c <__copybits>:
 8008c0c:	3901      	subs	r1, #1
 8008c0e:	b570      	push	{r4, r5, r6, lr}
 8008c10:	1149      	asrs	r1, r1, #5
 8008c12:	6914      	ldr	r4, [r2, #16]
 8008c14:	3101      	adds	r1, #1
 8008c16:	f102 0314 	add.w	r3, r2, #20
 8008c1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c22:	1f05      	subs	r5, r0, #4
 8008c24:	42a3      	cmp	r3, r4
 8008c26:	d30c      	bcc.n	8008c42 <__copybits+0x36>
 8008c28:	1aa3      	subs	r3, r4, r2
 8008c2a:	3b11      	subs	r3, #17
 8008c2c:	f023 0303 	bic.w	r3, r3, #3
 8008c30:	3211      	adds	r2, #17
 8008c32:	42a2      	cmp	r2, r4
 8008c34:	bf88      	it	hi
 8008c36:	2300      	movhi	r3, #0
 8008c38:	4418      	add	r0, r3
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	4288      	cmp	r0, r1
 8008c3e:	d305      	bcc.n	8008c4c <__copybits+0x40>
 8008c40:	bd70      	pop	{r4, r5, r6, pc}
 8008c42:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c46:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c4a:	e7eb      	b.n	8008c24 <__copybits+0x18>
 8008c4c:	f840 3b04 	str.w	r3, [r0], #4
 8008c50:	e7f4      	b.n	8008c3c <__copybits+0x30>

08008c52 <__any_on>:
 8008c52:	f100 0214 	add.w	r2, r0, #20
 8008c56:	6900      	ldr	r0, [r0, #16]
 8008c58:	114b      	asrs	r3, r1, #5
 8008c5a:	4298      	cmp	r0, r3
 8008c5c:	b510      	push	{r4, lr}
 8008c5e:	db11      	blt.n	8008c84 <__any_on+0x32>
 8008c60:	dd0a      	ble.n	8008c78 <__any_on+0x26>
 8008c62:	f011 011f 	ands.w	r1, r1, #31
 8008c66:	d007      	beq.n	8008c78 <__any_on+0x26>
 8008c68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c6c:	fa24 f001 	lsr.w	r0, r4, r1
 8008c70:	fa00 f101 	lsl.w	r1, r0, r1
 8008c74:	428c      	cmp	r4, r1
 8008c76:	d10b      	bne.n	8008c90 <__any_on+0x3e>
 8008c78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d803      	bhi.n	8008c88 <__any_on+0x36>
 8008c80:	2000      	movs	r0, #0
 8008c82:	bd10      	pop	{r4, pc}
 8008c84:	4603      	mov	r3, r0
 8008c86:	e7f7      	b.n	8008c78 <__any_on+0x26>
 8008c88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c8c:	2900      	cmp	r1, #0
 8008c8e:	d0f5      	beq.n	8008c7c <__any_on+0x2a>
 8008c90:	2001      	movs	r0, #1
 8008c92:	e7f6      	b.n	8008c82 <__any_on+0x30>

08008c94 <sulp>:
 8008c94:	b570      	push	{r4, r5, r6, lr}
 8008c96:	4604      	mov	r4, r0
 8008c98:	460d      	mov	r5, r1
 8008c9a:	ec45 4b10 	vmov	d0, r4, r5
 8008c9e:	4616      	mov	r6, r2
 8008ca0:	f7ff feba 	bl	8008a18 <__ulp>
 8008ca4:	ec51 0b10 	vmov	r0, r1, d0
 8008ca8:	b17e      	cbz	r6, 8008cca <sulp+0x36>
 8008caa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008cae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	dd09      	ble.n	8008cca <sulp+0x36>
 8008cb6:	051b      	lsls	r3, r3, #20
 8008cb8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008cbc:	2400      	movs	r4, #0
 8008cbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008cc2:	4622      	mov	r2, r4
 8008cc4:	462b      	mov	r3, r5
 8008cc6:	f7f7 fca7 	bl	8000618 <__aeabi_dmul>
 8008cca:	ec41 0b10 	vmov	d0, r0, r1
 8008cce:	bd70      	pop	{r4, r5, r6, pc}

08008cd0 <_strtod_l>:
 8008cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd4:	b09f      	sub	sp, #124	@ 0x7c
 8008cd6:	460c      	mov	r4, r1
 8008cd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008cda:	2200      	movs	r2, #0
 8008cdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008cde:	9005      	str	r0, [sp, #20]
 8008ce0:	f04f 0a00 	mov.w	sl, #0
 8008ce4:	f04f 0b00 	mov.w	fp, #0
 8008ce8:	460a      	mov	r2, r1
 8008cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008cec:	7811      	ldrb	r1, [r2, #0]
 8008cee:	292b      	cmp	r1, #43	@ 0x2b
 8008cf0:	d04a      	beq.n	8008d88 <_strtod_l+0xb8>
 8008cf2:	d838      	bhi.n	8008d66 <_strtod_l+0x96>
 8008cf4:	290d      	cmp	r1, #13
 8008cf6:	d832      	bhi.n	8008d5e <_strtod_l+0x8e>
 8008cf8:	2908      	cmp	r1, #8
 8008cfa:	d832      	bhi.n	8008d62 <_strtod_l+0x92>
 8008cfc:	2900      	cmp	r1, #0
 8008cfe:	d03b      	beq.n	8008d78 <_strtod_l+0xa8>
 8008d00:	2200      	movs	r2, #0
 8008d02:	920b      	str	r2, [sp, #44]	@ 0x2c
 8008d04:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008d06:	782a      	ldrb	r2, [r5, #0]
 8008d08:	2a30      	cmp	r2, #48	@ 0x30
 8008d0a:	f040 80b3 	bne.w	8008e74 <_strtod_l+0x1a4>
 8008d0e:	786a      	ldrb	r2, [r5, #1]
 8008d10:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d14:	2a58      	cmp	r2, #88	@ 0x58
 8008d16:	d16e      	bne.n	8008df6 <_strtod_l+0x126>
 8008d18:	9302      	str	r3, [sp, #8]
 8008d1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d1c:	9301      	str	r3, [sp, #4]
 8008d1e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008d20:	9300      	str	r3, [sp, #0]
 8008d22:	4a8e      	ldr	r2, [pc, #568]	@ (8008f5c <_strtod_l+0x28c>)
 8008d24:	9805      	ldr	r0, [sp, #20]
 8008d26:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008d28:	a919      	add	r1, sp, #100	@ 0x64
 8008d2a:	f001 f927 	bl	8009f7c <__gethex>
 8008d2e:	f010 060f 	ands.w	r6, r0, #15
 8008d32:	4604      	mov	r4, r0
 8008d34:	d005      	beq.n	8008d42 <_strtod_l+0x72>
 8008d36:	2e06      	cmp	r6, #6
 8008d38:	d128      	bne.n	8008d8c <_strtod_l+0xbc>
 8008d3a:	3501      	adds	r5, #1
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008d40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008d42:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 858e 	bne.w	8009866 <_strtod_l+0xb96>
 8008d4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d4c:	b1cb      	cbz	r3, 8008d82 <_strtod_l+0xb2>
 8008d4e:	4652      	mov	r2, sl
 8008d50:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008d54:	ec43 2b10 	vmov	d0, r2, r3
 8008d58:	b01f      	add	sp, #124	@ 0x7c
 8008d5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5e:	2920      	cmp	r1, #32
 8008d60:	d1ce      	bne.n	8008d00 <_strtod_l+0x30>
 8008d62:	3201      	adds	r2, #1
 8008d64:	e7c1      	b.n	8008cea <_strtod_l+0x1a>
 8008d66:	292d      	cmp	r1, #45	@ 0x2d
 8008d68:	d1ca      	bne.n	8008d00 <_strtod_l+0x30>
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008d6e:	1c51      	adds	r1, r2, #1
 8008d70:	9119      	str	r1, [sp, #100]	@ 0x64
 8008d72:	7852      	ldrb	r2, [r2, #1]
 8008d74:	2a00      	cmp	r2, #0
 8008d76:	d1c5      	bne.n	8008d04 <_strtod_l+0x34>
 8008d78:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008d7a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 8570 	bne.w	8009862 <_strtod_l+0xb92>
 8008d82:	4652      	mov	r2, sl
 8008d84:	465b      	mov	r3, fp
 8008d86:	e7e5      	b.n	8008d54 <_strtod_l+0x84>
 8008d88:	2100      	movs	r1, #0
 8008d8a:	e7ef      	b.n	8008d6c <_strtod_l+0x9c>
 8008d8c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008d8e:	b13a      	cbz	r2, 8008da0 <_strtod_l+0xd0>
 8008d90:	2135      	movs	r1, #53	@ 0x35
 8008d92:	a81c      	add	r0, sp, #112	@ 0x70
 8008d94:	f7ff ff3a 	bl	8008c0c <__copybits>
 8008d98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008d9a:	9805      	ldr	r0, [sp, #20]
 8008d9c:	f7ff fb08 	bl	80083b0 <_Bfree>
 8008da0:	3e01      	subs	r6, #1
 8008da2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008da4:	2e04      	cmp	r6, #4
 8008da6:	d806      	bhi.n	8008db6 <_strtod_l+0xe6>
 8008da8:	e8df f006 	tbb	[pc, r6]
 8008dac:	201d0314 	.word	0x201d0314
 8008db0:	14          	.byte	0x14
 8008db1:	00          	.byte	0x00
 8008db2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008db6:	05e1      	lsls	r1, r4, #23
 8008db8:	bf48      	it	mi
 8008dba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008dc2:	0d1b      	lsrs	r3, r3, #20
 8008dc4:	051b      	lsls	r3, r3, #20
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1bb      	bne.n	8008d42 <_strtod_l+0x72>
 8008dca:	f7fe fb2f 	bl	800742c <__errno>
 8008dce:	2322      	movs	r3, #34	@ 0x22
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	e7b6      	b.n	8008d42 <_strtod_l+0x72>
 8008dd4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008dd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ddc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008de0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008de4:	e7e7      	b.n	8008db6 <_strtod_l+0xe6>
 8008de6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8008f64 <_strtod_l+0x294>
 8008dea:	e7e4      	b.n	8008db6 <_strtod_l+0xe6>
 8008dec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008df0:	f04f 3aff 	mov.w	sl, #4294967295
 8008df4:	e7df      	b.n	8008db6 <_strtod_l+0xe6>
 8008df6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	9219      	str	r2, [sp, #100]	@ 0x64
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b30      	cmp	r3, #48	@ 0x30
 8008e00:	d0f9      	beq.n	8008df6 <_strtod_l+0x126>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d09d      	beq.n	8008d42 <_strtod_l+0x72>
 8008e06:	2301      	movs	r3, #1
 8008e08:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e0c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008e0e:	2300      	movs	r3, #0
 8008e10:	9308      	str	r3, [sp, #32]
 8008e12:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e14:	461f      	mov	r7, r3
 8008e16:	220a      	movs	r2, #10
 8008e18:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008e1a:	7805      	ldrb	r5, [r0, #0]
 8008e1c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008e20:	b2d9      	uxtb	r1, r3
 8008e22:	2909      	cmp	r1, #9
 8008e24:	d928      	bls.n	8008e78 <_strtod_l+0x1a8>
 8008e26:	494e      	ldr	r1, [pc, #312]	@ (8008f60 <_strtod_l+0x290>)
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f000 ffd5 	bl	8009dd8 <strncmp>
 8008e2e:	2800      	cmp	r0, #0
 8008e30:	d032      	beq.n	8008e98 <_strtod_l+0x1c8>
 8008e32:	2000      	movs	r0, #0
 8008e34:	462a      	mov	r2, r5
 8008e36:	4681      	mov	r9, r0
 8008e38:	463d      	mov	r5, r7
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2a65      	cmp	r2, #101	@ 0x65
 8008e3e:	d001      	beq.n	8008e44 <_strtod_l+0x174>
 8008e40:	2a45      	cmp	r2, #69	@ 0x45
 8008e42:	d114      	bne.n	8008e6e <_strtod_l+0x19e>
 8008e44:	b91d      	cbnz	r5, 8008e4e <_strtod_l+0x17e>
 8008e46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e48:	4302      	orrs	r2, r0
 8008e4a:	d095      	beq.n	8008d78 <_strtod_l+0xa8>
 8008e4c:	2500      	movs	r5, #0
 8008e4e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008e50:	1c62      	adds	r2, r4, #1
 8008e52:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e54:	7862      	ldrb	r2, [r4, #1]
 8008e56:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e58:	d077      	beq.n	8008f4a <_strtod_l+0x27a>
 8008e5a:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e5c:	d07b      	beq.n	8008f56 <_strtod_l+0x286>
 8008e5e:	f04f 0c00 	mov.w	ip, #0
 8008e62:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008e66:	2909      	cmp	r1, #9
 8008e68:	f240 8082 	bls.w	8008f70 <_strtod_l+0x2a0>
 8008e6c:	9419      	str	r4, [sp, #100]	@ 0x64
 8008e6e:	f04f 0800 	mov.w	r8, #0
 8008e72:	e0a2      	b.n	8008fba <_strtod_l+0x2ea>
 8008e74:	2300      	movs	r3, #0
 8008e76:	e7c7      	b.n	8008e08 <_strtod_l+0x138>
 8008e78:	2f08      	cmp	r7, #8
 8008e7a:	bfd5      	itete	le
 8008e7c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008e7e:	9908      	ldrgt	r1, [sp, #32]
 8008e80:	fb02 3301 	mlale	r3, r2, r1, r3
 8008e84:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008e88:	f100 0001 	add.w	r0, r0, #1
 8008e8c:	bfd4      	ite	le
 8008e8e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008e90:	9308      	strgt	r3, [sp, #32]
 8008e92:	3701      	adds	r7, #1
 8008e94:	9019      	str	r0, [sp, #100]	@ 0x64
 8008e96:	e7bf      	b.n	8008e18 <_strtod_l+0x148>
 8008e98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008e9a:	1c5a      	adds	r2, r3, #1
 8008e9c:	9219      	str	r2, [sp, #100]	@ 0x64
 8008e9e:	785a      	ldrb	r2, [r3, #1]
 8008ea0:	b37f      	cbz	r7, 8008f02 <_strtod_l+0x232>
 8008ea2:	4681      	mov	r9, r0
 8008ea4:	463d      	mov	r5, r7
 8008ea6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008eaa:	2b09      	cmp	r3, #9
 8008eac:	d912      	bls.n	8008ed4 <_strtod_l+0x204>
 8008eae:	2301      	movs	r3, #1
 8008eb0:	e7c4      	b.n	8008e3c <_strtod_l+0x16c>
 8008eb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008eb4:	1c5a      	adds	r2, r3, #1
 8008eb6:	9219      	str	r2, [sp, #100]	@ 0x64
 8008eb8:	785a      	ldrb	r2, [r3, #1]
 8008eba:	3001      	adds	r0, #1
 8008ebc:	2a30      	cmp	r2, #48	@ 0x30
 8008ebe:	d0f8      	beq.n	8008eb2 <_strtod_l+0x1e2>
 8008ec0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ec4:	2b08      	cmp	r3, #8
 8008ec6:	f200 84d3 	bhi.w	8009870 <_strtod_l+0xba0>
 8008eca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ecc:	930c      	str	r3, [sp, #48]	@ 0x30
 8008ece:	4681      	mov	r9, r0
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	4605      	mov	r5, r0
 8008ed4:	3a30      	subs	r2, #48	@ 0x30
 8008ed6:	f100 0301 	add.w	r3, r0, #1
 8008eda:	d02a      	beq.n	8008f32 <_strtod_l+0x262>
 8008edc:	4499      	add	r9, r3
 8008ede:	eb00 0c05 	add.w	ip, r0, r5
 8008ee2:	462b      	mov	r3, r5
 8008ee4:	210a      	movs	r1, #10
 8008ee6:	4563      	cmp	r3, ip
 8008ee8:	d10d      	bne.n	8008f06 <_strtod_l+0x236>
 8008eea:	1c69      	adds	r1, r5, #1
 8008eec:	4401      	add	r1, r0
 8008eee:	4428      	add	r0, r5
 8008ef0:	2808      	cmp	r0, #8
 8008ef2:	dc16      	bgt.n	8008f22 <_strtod_l+0x252>
 8008ef4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ef6:	230a      	movs	r3, #10
 8008ef8:	fb03 2300 	mla	r3, r3, r0, r2
 8008efc:	930a      	str	r3, [sp, #40]	@ 0x28
 8008efe:	2300      	movs	r3, #0
 8008f00:	e018      	b.n	8008f34 <_strtod_l+0x264>
 8008f02:	4638      	mov	r0, r7
 8008f04:	e7da      	b.n	8008ebc <_strtod_l+0x1ec>
 8008f06:	2b08      	cmp	r3, #8
 8008f08:	f103 0301 	add.w	r3, r3, #1
 8008f0c:	dc03      	bgt.n	8008f16 <_strtod_l+0x246>
 8008f0e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8008f10:	434e      	muls	r6, r1
 8008f12:	960a      	str	r6, [sp, #40]	@ 0x28
 8008f14:	e7e7      	b.n	8008ee6 <_strtod_l+0x216>
 8008f16:	2b10      	cmp	r3, #16
 8008f18:	bfde      	ittt	le
 8008f1a:	9e08      	ldrle	r6, [sp, #32]
 8008f1c:	434e      	mulle	r6, r1
 8008f1e:	9608      	strle	r6, [sp, #32]
 8008f20:	e7e1      	b.n	8008ee6 <_strtod_l+0x216>
 8008f22:	280f      	cmp	r0, #15
 8008f24:	dceb      	bgt.n	8008efe <_strtod_l+0x22e>
 8008f26:	9808      	ldr	r0, [sp, #32]
 8008f28:	230a      	movs	r3, #10
 8008f2a:	fb03 2300 	mla	r3, r3, r0, r2
 8008f2e:	9308      	str	r3, [sp, #32]
 8008f30:	e7e5      	b.n	8008efe <_strtod_l+0x22e>
 8008f32:	4629      	mov	r1, r5
 8008f34:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f36:	1c50      	adds	r0, r2, #1
 8008f38:	9019      	str	r0, [sp, #100]	@ 0x64
 8008f3a:	7852      	ldrb	r2, [r2, #1]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	460d      	mov	r5, r1
 8008f40:	e7b1      	b.n	8008ea6 <_strtod_l+0x1d6>
 8008f42:	f04f 0900 	mov.w	r9, #0
 8008f46:	2301      	movs	r3, #1
 8008f48:	e77d      	b.n	8008e46 <_strtod_l+0x176>
 8008f4a:	f04f 0c00 	mov.w	ip, #0
 8008f4e:	1ca2      	adds	r2, r4, #2
 8008f50:	9219      	str	r2, [sp, #100]	@ 0x64
 8008f52:	78a2      	ldrb	r2, [r4, #2]
 8008f54:	e785      	b.n	8008e62 <_strtod_l+0x192>
 8008f56:	f04f 0c01 	mov.w	ip, #1
 8008f5a:	e7f8      	b.n	8008f4e <_strtod_l+0x27e>
 8008f5c:	0800aee8 	.word	0x0800aee8
 8008f60:	0800aed0 	.word	0x0800aed0
 8008f64:	7ff00000 	.word	0x7ff00000
 8008f68:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f6a:	1c51      	adds	r1, r2, #1
 8008f6c:	9119      	str	r1, [sp, #100]	@ 0x64
 8008f6e:	7852      	ldrb	r2, [r2, #1]
 8008f70:	2a30      	cmp	r2, #48	@ 0x30
 8008f72:	d0f9      	beq.n	8008f68 <_strtod_l+0x298>
 8008f74:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008f78:	2908      	cmp	r1, #8
 8008f7a:	f63f af78 	bhi.w	8008e6e <_strtod_l+0x19e>
 8008f7e:	3a30      	subs	r2, #48	@ 0x30
 8008f80:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f84:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008f86:	f04f 080a 	mov.w	r8, #10
 8008f8a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008f8c:	1c56      	adds	r6, r2, #1
 8008f8e:	9619      	str	r6, [sp, #100]	@ 0x64
 8008f90:	7852      	ldrb	r2, [r2, #1]
 8008f92:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008f96:	f1be 0f09 	cmp.w	lr, #9
 8008f9a:	d939      	bls.n	8009010 <_strtod_l+0x340>
 8008f9c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008f9e:	1a76      	subs	r6, r6, r1
 8008fa0:	2e08      	cmp	r6, #8
 8008fa2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008fa6:	dc03      	bgt.n	8008fb0 <_strtod_l+0x2e0>
 8008fa8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008faa:	4588      	cmp	r8, r1
 8008fac:	bfa8      	it	ge
 8008fae:	4688      	movge	r8, r1
 8008fb0:	f1bc 0f00 	cmp.w	ip, #0
 8008fb4:	d001      	beq.n	8008fba <_strtod_l+0x2ea>
 8008fb6:	f1c8 0800 	rsb	r8, r8, #0
 8008fba:	2d00      	cmp	r5, #0
 8008fbc:	d14e      	bne.n	800905c <_strtod_l+0x38c>
 8008fbe:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fc0:	4308      	orrs	r0, r1
 8008fc2:	f47f aebe 	bne.w	8008d42 <_strtod_l+0x72>
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	f47f aed6 	bne.w	8008d78 <_strtod_l+0xa8>
 8008fcc:	2a69      	cmp	r2, #105	@ 0x69
 8008fce:	d028      	beq.n	8009022 <_strtod_l+0x352>
 8008fd0:	dc25      	bgt.n	800901e <_strtod_l+0x34e>
 8008fd2:	2a49      	cmp	r2, #73	@ 0x49
 8008fd4:	d025      	beq.n	8009022 <_strtod_l+0x352>
 8008fd6:	2a4e      	cmp	r2, #78	@ 0x4e
 8008fd8:	f47f aece 	bne.w	8008d78 <_strtod_l+0xa8>
 8008fdc:	499b      	ldr	r1, [pc, #620]	@ (800924c <_strtod_l+0x57c>)
 8008fde:	a819      	add	r0, sp, #100	@ 0x64
 8008fe0:	f001 f9ee 	bl	800a3c0 <__match>
 8008fe4:	2800      	cmp	r0, #0
 8008fe6:	f43f aec7 	beq.w	8008d78 <_strtod_l+0xa8>
 8008fea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008fec:	781b      	ldrb	r3, [r3, #0]
 8008fee:	2b28      	cmp	r3, #40	@ 0x28
 8008ff0:	d12e      	bne.n	8009050 <_strtod_l+0x380>
 8008ff2:	4997      	ldr	r1, [pc, #604]	@ (8009250 <_strtod_l+0x580>)
 8008ff4:	aa1c      	add	r2, sp, #112	@ 0x70
 8008ff6:	a819      	add	r0, sp, #100	@ 0x64
 8008ff8:	f001 f9f6 	bl	800a3e8 <__hexnan>
 8008ffc:	2805      	cmp	r0, #5
 8008ffe:	d127      	bne.n	8009050 <_strtod_l+0x380>
 8009000:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009002:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009006:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800900a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800900e:	e698      	b.n	8008d42 <_strtod_l+0x72>
 8009010:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009012:	fb08 2101 	mla	r1, r8, r1, r2
 8009016:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800901a:	920e      	str	r2, [sp, #56]	@ 0x38
 800901c:	e7b5      	b.n	8008f8a <_strtod_l+0x2ba>
 800901e:	2a6e      	cmp	r2, #110	@ 0x6e
 8009020:	e7da      	b.n	8008fd8 <_strtod_l+0x308>
 8009022:	498c      	ldr	r1, [pc, #560]	@ (8009254 <_strtod_l+0x584>)
 8009024:	a819      	add	r0, sp, #100	@ 0x64
 8009026:	f001 f9cb 	bl	800a3c0 <__match>
 800902a:	2800      	cmp	r0, #0
 800902c:	f43f aea4 	beq.w	8008d78 <_strtod_l+0xa8>
 8009030:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009032:	4989      	ldr	r1, [pc, #548]	@ (8009258 <_strtod_l+0x588>)
 8009034:	3b01      	subs	r3, #1
 8009036:	a819      	add	r0, sp, #100	@ 0x64
 8009038:	9319      	str	r3, [sp, #100]	@ 0x64
 800903a:	f001 f9c1 	bl	800a3c0 <__match>
 800903e:	b910      	cbnz	r0, 8009046 <_strtod_l+0x376>
 8009040:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009042:	3301      	adds	r3, #1
 8009044:	9319      	str	r3, [sp, #100]	@ 0x64
 8009046:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8009268 <_strtod_l+0x598>
 800904a:	f04f 0a00 	mov.w	sl, #0
 800904e:	e678      	b.n	8008d42 <_strtod_l+0x72>
 8009050:	4882      	ldr	r0, [pc, #520]	@ (800925c <_strtod_l+0x58c>)
 8009052:	f000 fef1 	bl	8009e38 <nan>
 8009056:	ec5b ab10 	vmov	sl, fp, d0
 800905a:	e672      	b.n	8008d42 <_strtod_l+0x72>
 800905c:	eba8 0309 	sub.w	r3, r8, r9
 8009060:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009062:	9309      	str	r3, [sp, #36]	@ 0x24
 8009064:	2f00      	cmp	r7, #0
 8009066:	bf08      	it	eq
 8009068:	462f      	moveq	r7, r5
 800906a:	2d10      	cmp	r5, #16
 800906c:	462c      	mov	r4, r5
 800906e:	bfa8      	it	ge
 8009070:	2410      	movge	r4, #16
 8009072:	f7f7 fa57 	bl	8000524 <__aeabi_ui2d>
 8009076:	2d09      	cmp	r5, #9
 8009078:	4682      	mov	sl, r0
 800907a:	468b      	mov	fp, r1
 800907c:	dc13      	bgt.n	80090a6 <_strtod_l+0x3d6>
 800907e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	f43f ae5e 	beq.w	8008d42 <_strtod_l+0x72>
 8009086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009088:	dd78      	ble.n	800917c <_strtod_l+0x4ac>
 800908a:	2b16      	cmp	r3, #22
 800908c:	dc5f      	bgt.n	800914e <_strtod_l+0x47e>
 800908e:	4974      	ldr	r1, [pc, #464]	@ (8009260 <_strtod_l+0x590>)
 8009090:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009094:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009098:	4652      	mov	r2, sl
 800909a:	465b      	mov	r3, fp
 800909c:	f7f7 fabc 	bl	8000618 <__aeabi_dmul>
 80090a0:	4682      	mov	sl, r0
 80090a2:	468b      	mov	fp, r1
 80090a4:	e64d      	b.n	8008d42 <_strtod_l+0x72>
 80090a6:	4b6e      	ldr	r3, [pc, #440]	@ (8009260 <_strtod_l+0x590>)
 80090a8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80090ac:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80090b0:	f7f7 fab2 	bl	8000618 <__aeabi_dmul>
 80090b4:	4682      	mov	sl, r0
 80090b6:	9808      	ldr	r0, [sp, #32]
 80090b8:	468b      	mov	fp, r1
 80090ba:	f7f7 fa33 	bl	8000524 <__aeabi_ui2d>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4650      	mov	r0, sl
 80090c4:	4659      	mov	r1, fp
 80090c6:	f7f7 f8f1 	bl	80002ac <__adddf3>
 80090ca:	2d0f      	cmp	r5, #15
 80090cc:	4682      	mov	sl, r0
 80090ce:	468b      	mov	fp, r1
 80090d0:	ddd5      	ble.n	800907e <_strtod_l+0x3ae>
 80090d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090d4:	1b2c      	subs	r4, r5, r4
 80090d6:	441c      	add	r4, r3
 80090d8:	2c00      	cmp	r4, #0
 80090da:	f340 8096 	ble.w	800920a <_strtod_l+0x53a>
 80090de:	f014 030f 	ands.w	r3, r4, #15
 80090e2:	d00a      	beq.n	80090fa <_strtod_l+0x42a>
 80090e4:	495e      	ldr	r1, [pc, #376]	@ (8009260 <_strtod_l+0x590>)
 80090e6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80090ea:	4652      	mov	r2, sl
 80090ec:	465b      	mov	r3, fp
 80090ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f2:	f7f7 fa91 	bl	8000618 <__aeabi_dmul>
 80090f6:	4682      	mov	sl, r0
 80090f8:	468b      	mov	fp, r1
 80090fa:	f034 040f 	bics.w	r4, r4, #15
 80090fe:	d073      	beq.n	80091e8 <_strtod_l+0x518>
 8009100:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009104:	dd48      	ble.n	8009198 <_strtod_l+0x4c8>
 8009106:	2400      	movs	r4, #0
 8009108:	46a0      	mov	r8, r4
 800910a:	940a      	str	r4, [sp, #40]	@ 0x28
 800910c:	46a1      	mov	r9, r4
 800910e:	9a05      	ldr	r2, [sp, #20]
 8009110:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009268 <_strtod_l+0x598>
 8009114:	2322      	movs	r3, #34	@ 0x22
 8009116:	6013      	str	r3, [r2, #0]
 8009118:	f04f 0a00 	mov.w	sl, #0
 800911c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800911e:	2b00      	cmp	r3, #0
 8009120:	f43f ae0f 	beq.w	8008d42 <_strtod_l+0x72>
 8009124:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009126:	9805      	ldr	r0, [sp, #20]
 8009128:	f7ff f942 	bl	80083b0 <_Bfree>
 800912c:	9805      	ldr	r0, [sp, #20]
 800912e:	4649      	mov	r1, r9
 8009130:	f7ff f93e 	bl	80083b0 <_Bfree>
 8009134:	9805      	ldr	r0, [sp, #20]
 8009136:	4641      	mov	r1, r8
 8009138:	f7ff f93a 	bl	80083b0 <_Bfree>
 800913c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800913e:	9805      	ldr	r0, [sp, #20]
 8009140:	f7ff f936 	bl	80083b0 <_Bfree>
 8009144:	9805      	ldr	r0, [sp, #20]
 8009146:	4621      	mov	r1, r4
 8009148:	f7ff f932 	bl	80083b0 <_Bfree>
 800914c:	e5f9      	b.n	8008d42 <_strtod_l+0x72>
 800914e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009150:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009154:	4293      	cmp	r3, r2
 8009156:	dbbc      	blt.n	80090d2 <_strtod_l+0x402>
 8009158:	4c41      	ldr	r4, [pc, #260]	@ (8009260 <_strtod_l+0x590>)
 800915a:	f1c5 050f 	rsb	r5, r5, #15
 800915e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009162:	4652      	mov	r2, sl
 8009164:	465b      	mov	r3, fp
 8009166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800916a:	f7f7 fa55 	bl	8000618 <__aeabi_dmul>
 800916e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009170:	1b5d      	subs	r5, r3, r5
 8009172:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009176:	e9d4 2300 	ldrd	r2, r3, [r4]
 800917a:	e78f      	b.n	800909c <_strtod_l+0x3cc>
 800917c:	3316      	adds	r3, #22
 800917e:	dba8      	blt.n	80090d2 <_strtod_l+0x402>
 8009180:	4b37      	ldr	r3, [pc, #220]	@ (8009260 <_strtod_l+0x590>)
 8009182:	eba9 0808 	sub.w	r8, r9, r8
 8009186:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800918a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800918e:	4650      	mov	r0, sl
 8009190:	4659      	mov	r1, fp
 8009192:	f7f7 fb6b 	bl	800086c <__aeabi_ddiv>
 8009196:	e783      	b.n	80090a0 <_strtod_l+0x3d0>
 8009198:	4b32      	ldr	r3, [pc, #200]	@ (8009264 <_strtod_l+0x594>)
 800919a:	9308      	str	r3, [sp, #32]
 800919c:	2300      	movs	r3, #0
 800919e:	1124      	asrs	r4, r4, #4
 80091a0:	4650      	mov	r0, sl
 80091a2:	4659      	mov	r1, fp
 80091a4:	461e      	mov	r6, r3
 80091a6:	2c01      	cmp	r4, #1
 80091a8:	dc21      	bgt.n	80091ee <_strtod_l+0x51e>
 80091aa:	b10b      	cbz	r3, 80091b0 <_strtod_l+0x4e0>
 80091ac:	4682      	mov	sl, r0
 80091ae:	468b      	mov	fp, r1
 80091b0:	492c      	ldr	r1, [pc, #176]	@ (8009264 <_strtod_l+0x594>)
 80091b2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80091b6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80091ba:	4652      	mov	r2, sl
 80091bc:	465b      	mov	r3, fp
 80091be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091c2:	f7f7 fa29 	bl	8000618 <__aeabi_dmul>
 80091c6:	4b28      	ldr	r3, [pc, #160]	@ (8009268 <_strtod_l+0x598>)
 80091c8:	460a      	mov	r2, r1
 80091ca:	400b      	ands	r3, r1
 80091cc:	4927      	ldr	r1, [pc, #156]	@ (800926c <_strtod_l+0x59c>)
 80091ce:	428b      	cmp	r3, r1
 80091d0:	4682      	mov	sl, r0
 80091d2:	d898      	bhi.n	8009106 <_strtod_l+0x436>
 80091d4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80091d8:	428b      	cmp	r3, r1
 80091da:	bf86      	itte	hi
 80091dc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8009270 <_strtod_l+0x5a0>
 80091e0:	f04f 3aff 	movhi.w	sl, #4294967295
 80091e4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80091e8:	2300      	movs	r3, #0
 80091ea:	9308      	str	r3, [sp, #32]
 80091ec:	e07a      	b.n	80092e4 <_strtod_l+0x614>
 80091ee:	07e2      	lsls	r2, r4, #31
 80091f0:	d505      	bpl.n	80091fe <_strtod_l+0x52e>
 80091f2:	9b08      	ldr	r3, [sp, #32]
 80091f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091f8:	f7f7 fa0e 	bl	8000618 <__aeabi_dmul>
 80091fc:	2301      	movs	r3, #1
 80091fe:	9a08      	ldr	r2, [sp, #32]
 8009200:	3208      	adds	r2, #8
 8009202:	3601      	adds	r6, #1
 8009204:	1064      	asrs	r4, r4, #1
 8009206:	9208      	str	r2, [sp, #32]
 8009208:	e7cd      	b.n	80091a6 <_strtod_l+0x4d6>
 800920a:	d0ed      	beq.n	80091e8 <_strtod_l+0x518>
 800920c:	4264      	negs	r4, r4
 800920e:	f014 020f 	ands.w	r2, r4, #15
 8009212:	d00a      	beq.n	800922a <_strtod_l+0x55a>
 8009214:	4b12      	ldr	r3, [pc, #72]	@ (8009260 <_strtod_l+0x590>)
 8009216:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800921a:	4650      	mov	r0, sl
 800921c:	4659      	mov	r1, fp
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 fb23 	bl	800086c <__aeabi_ddiv>
 8009226:	4682      	mov	sl, r0
 8009228:	468b      	mov	fp, r1
 800922a:	1124      	asrs	r4, r4, #4
 800922c:	d0dc      	beq.n	80091e8 <_strtod_l+0x518>
 800922e:	2c1f      	cmp	r4, #31
 8009230:	dd20      	ble.n	8009274 <_strtod_l+0x5a4>
 8009232:	2400      	movs	r4, #0
 8009234:	46a0      	mov	r8, r4
 8009236:	940a      	str	r4, [sp, #40]	@ 0x28
 8009238:	46a1      	mov	r9, r4
 800923a:	9a05      	ldr	r2, [sp, #20]
 800923c:	2322      	movs	r3, #34	@ 0x22
 800923e:	f04f 0a00 	mov.w	sl, #0
 8009242:	f04f 0b00 	mov.w	fp, #0
 8009246:	6013      	str	r3, [r2, #0]
 8009248:	e768      	b.n	800911c <_strtod_l+0x44c>
 800924a:	bf00      	nop
 800924c:	0800acbd 	.word	0x0800acbd
 8009250:	0800aed4 	.word	0x0800aed4
 8009254:	0800acb5 	.word	0x0800acb5
 8009258:	0800acec 	.word	0x0800acec
 800925c:	0800b07d 	.word	0x0800b07d
 8009260:	0800ae08 	.word	0x0800ae08
 8009264:	0800ade0 	.word	0x0800ade0
 8009268:	7ff00000 	.word	0x7ff00000
 800926c:	7ca00000 	.word	0x7ca00000
 8009270:	7fefffff 	.word	0x7fefffff
 8009274:	f014 0310 	ands.w	r3, r4, #16
 8009278:	bf18      	it	ne
 800927a:	236a      	movne	r3, #106	@ 0x6a
 800927c:	4ea9      	ldr	r6, [pc, #676]	@ (8009524 <_strtod_l+0x854>)
 800927e:	9308      	str	r3, [sp, #32]
 8009280:	4650      	mov	r0, sl
 8009282:	4659      	mov	r1, fp
 8009284:	2300      	movs	r3, #0
 8009286:	07e2      	lsls	r2, r4, #31
 8009288:	d504      	bpl.n	8009294 <_strtod_l+0x5c4>
 800928a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800928e:	f7f7 f9c3 	bl	8000618 <__aeabi_dmul>
 8009292:	2301      	movs	r3, #1
 8009294:	1064      	asrs	r4, r4, #1
 8009296:	f106 0608 	add.w	r6, r6, #8
 800929a:	d1f4      	bne.n	8009286 <_strtod_l+0x5b6>
 800929c:	b10b      	cbz	r3, 80092a2 <_strtod_l+0x5d2>
 800929e:	4682      	mov	sl, r0
 80092a0:	468b      	mov	fp, r1
 80092a2:	9b08      	ldr	r3, [sp, #32]
 80092a4:	b1b3      	cbz	r3, 80092d4 <_strtod_l+0x604>
 80092a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80092aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	4659      	mov	r1, fp
 80092b2:	dd0f      	ble.n	80092d4 <_strtod_l+0x604>
 80092b4:	2b1f      	cmp	r3, #31
 80092b6:	dd55      	ble.n	8009364 <_strtod_l+0x694>
 80092b8:	2b34      	cmp	r3, #52	@ 0x34
 80092ba:	bfde      	ittt	le
 80092bc:	f04f 33ff 	movle.w	r3, #4294967295
 80092c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80092c4:	4093      	lslle	r3, r2
 80092c6:	f04f 0a00 	mov.w	sl, #0
 80092ca:	bfcc      	ite	gt
 80092cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80092d0:	ea03 0b01 	andle.w	fp, r3, r1
 80092d4:	2200      	movs	r2, #0
 80092d6:	2300      	movs	r3, #0
 80092d8:	4650      	mov	r0, sl
 80092da:	4659      	mov	r1, fp
 80092dc:	f7f7 fc04 	bl	8000ae8 <__aeabi_dcmpeq>
 80092e0:	2800      	cmp	r0, #0
 80092e2:	d1a6      	bne.n	8009232 <_strtod_l+0x562>
 80092e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80092ea:	9805      	ldr	r0, [sp, #20]
 80092ec:	462b      	mov	r3, r5
 80092ee:	463a      	mov	r2, r7
 80092f0:	f7ff f8c6 	bl	8008480 <__s2b>
 80092f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f af05 	beq.w	8009106 <_strtod_l+0x436>
 80092fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092fe:	2a00      	cmp	r2, #0
 8009300:	eba9 0308 	sub.w	r3, r9, r8
 8009304:	bfa8      	it	ge
 8009306:	2300      	movge	r3, #0
 8009308:	9312      	str	r3, [sp, #72]	@ 0x48
 800930a:	2400      	movs	r4, #0
 800930c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009310:	9316      	str	r3, [sp, #88]	@ 0x58
 8009312:	46a0      	mov	r8, r4
 8009314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	6859      	ldr	r1, [r3, #4]
 800931a:	f7ff f809 	bl	8008330 <_Balloc>
 800931e:	4681      	mov	r9, r0
 8009320:	2800      	cmp	r0, #0
 8009322:	f43f aef4 	beq.w	800910e <_strtod_l+0x43e>
 8009326:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	3202      	adds	r2, #2
 800932c:	f103 010c 	add.w	r1, r3, #12
 8009330:	0092      	lsls	r2, r2, #2
 8009332:	300c      	adds	r0, #12
 8009334:	f000 fd72 	bl	8009e1c <memcpy>
 8009338:	ec4b ab10 	vmov	d0, sl, fp
 800933c:	9805      	ldr	r0, [sp, #20]
 800933e:	aa1c      	add	r2, sp, #112	@ 0x70
 8009340:	a91b      	add	r1, sp, #108	@ 0x6c
 8009342:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009346:	f7ff fbd7 	bl	8008af8 <__d2b>
 800934a:	901a      	str	r0, [sp, #104]	@ 0x68
 800934c:	2800      	cmp	r0, #0
 800934e:	f43f aede 	beq.w	800910e <_strtod_l+0x43e>
 8009352:	9805      	ldr	r0, [sp, #20]
 8009354:	2101      	movs	r1, #1
 8009356:	f7ff f929 	bl	80085ac <__i2b>
 800935a:	4680      	mov	r8, r0
 800935c:	b948      	cbnz	r0, 8009372 <_strtod_l+0x6a2>
 800935e:	f04f 0800 	mov.w	r8, #0
 8009362:	e6d4      	b.n	800910e <_strtod_l+0x43e>
 8009364:	f04f 32ff 	mov.w	r2, #4294967295
 8009368:	fa02 f303 	lsl.w	r3, r2, r3
 800936c:	ea03 0a0a 	and.w	sl, r3, sl
 8009370:	e7b0      	b.n	80092d4 <_strtod_l+0x604>
 8009372:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009374:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009376:	2d00      	cmp	r5, #0
 8009378:	bfab      	itete	ge
 800937a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800937c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800937e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009380:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009382:	bfac      	ite	ge
 8009384:	18ef      	addge	r7, r5, r3
 8009386:	1b5e      	sublt	r6, r3, r5
 8009388:	9b08      	ldr	r3, [sp, #32]
 800938a:	1aed      	subs	r5, r5, r3
 800938c:	4415      	add	r5, r2
 800938e:	4b66      	ldr	r3, [pc, #408]	@ (8009528 <_strtod_l+0x858>)
 8009390:	3d01      	subs	r5, #1
 8009392:	429d      	cmp	r5, r3
 8009394:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009398:	da50      	bge.n	800943c <_strtod_l+0x76c>
 800939a:	1b5b      	subs	r3, r3, r5
 800939c:	2b1f      	cmp	r3, #31
 800939e:	eba2 0203 	sub.w	r2, r2, r3
 80093a2:	f04f 0101 	mov.w	r1, #1
 80093a6:	dc3d      	bgt.n	8009424 <_strtod_l+0x754>
 80093a8:	fa01 f303 	lsl.w	r3, r1, r3
 80093ac:	9313      	str	r3, [sp, #76]	@ 0x4c
 80093ae:	2300      	movs	r3, #0
 80093b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80093b2:	18bd      	adds	r5, r7, r2
 80093b4:	9b08      	ldr	r3, [sp, #32]
 80093b6:	42af      	cmp	r7, r5
 80093b8:	4416      	add	r6, r2
 80093ba:	441e      	add	r6, r3
 80093bc:	463b      	mov	r3, r7
 80093be:	bfa8      	it	ge
 80093c0:	462b      	movge	r3, r5
 80093c2:	42b3      	cmp	r3, r6
 80093c4:	bfa8      	it	ge
 80093c6:	4633      	movge	r3, r6
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	bfc2      	ittt	gt
 80093cc:	1aed      	subgt	r5, r5, r3
 80093ce:	1af6      	subgt	r6, r6, r3
 80093d0:	1aff      	subgt	r7, r7, r3
 80093d2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	dd16      	ble.n	8009406 <_strtod_l+0x736>
 80093d8:	4641      	mov	r1, r8
 80093da:	9805      	ldr	r0, [sp, #20]
 80093dc:	461a      	mov	r2, r3
 80093de:	f7ff f9a5 	bl	800872c <__pow5mult>
 80093e2:	4680      	mov	r8, r0
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d0ba      	beq.n	800935e <_strtod_l+0x68e>
 80093e8:	4601      	mov	r1, r0
 80093ea:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80093ec:	9805      	ldr	r0, [sp, #20]
 80093ee:	f7ff f8f3 	bl	80085d8 <__multiply>
 80093f2:	900e      	str	r0, [sp, #56]	@ 0x38
 80093f4:	2800      	cmp	r0, #0
 80093f6:	f43f ae8a 	beq.w	800910e <_strtod_l+0x43e>
 80093fa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093fc:	9805      	ldr	r0, [sp, #20]
 80093fe:	f7fe ffd7 	bl	80083b0 <_Bfree>
 8009402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009404:	931a      	str	r3, [sp, #104]	@ 0x68
 8009406:	2d00      	cmp	r5, #0
 8009408:	dc1d      	bgt.n	8009446 <_strtod_l+0x776>
 800940a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800940c:	2b00      	cmp	r3, #0
 800940e:	dd23      	ble.n	8009458 <_strtod_l+0x788>
 8009410:	4649      	mov	r1, r9
 8009412:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009414:	9805      	ldr	r0, [sp, #20]
 8009416:	f7ff f989 	bl	800872c <__pow5mult>
 800941a:	4681      	mov	r9, r0
 800941c:	b9e0      	cbnz	r0, 8009458 <_strtod_l+0x788>
 800941e:	f04f 0900 	mov.w	r9, #0
 8009422:	e674      	b.n	800910e <_strtod_l+0x43e>
 8009424:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8009428:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800942c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009430:	35e2      	adds	r5, #226	@ 0xe2
 8009432:	fa01 f305 	lsl.w	r3, r1, r5
 8009436:	9310      	str	r3, [sp, #64]	@ 0x40
 8009438:	9113      	str	r1, [sp, #76]	@ 0x4c
 800943a:	e7ba      	b.n	80093b2 <_strtod_l+0x6e2>
 800943c:	2300      	movs	r3, #0
 800943e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009440:	2301      	movs	r3, #1
 8009442:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009444:	e7b5      	b.n	80093b2 <_strtod_l+0x6e2>
 8009446:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009448:	9805      	ldr	r0, [sp, #20]
 800944a:	462a      	mov	r2, r5
 800944c:	f7ff f9c8 	bl	80087e0 <__lshift>
 8009450:	901a      	str	r0, [sp, #104]	@ 0x68
 8009452:	2800      	cmp	r0, #0
 8009454:	d1d9      	bne.n	800940a <_strtod_l+0x73a>
 8009456:	e65a      	b.n	800910e <_strtod_l+0x43e>
 8009458:	2e00      	cmp	r6, #0
 800945a:	dd07      	ble.n	800946c <_strtod_l+0x79c>
 800945c:	4649      	mov	r1, r9
 800945e:	9805      	ldr	r0, [sp, #20]
 8009460:	4632      	mov	r2, r6
 8009462:	f7ff f9bd 	bl	80087e0 <__lshift>
 8009466:	4681      	mov	r9, r0
 8009468:	2800      	cmp	r0, #0
 800946a:	d0d8      	beq.n	800941e <_strtod_l+0x74e>
 800946c:	2f00      	cmp	r7, #0
 800946e:	dd08      	ble.n	8009482 <_strtod_l+0x7b2>
 8009470:	4641      	mov	r1, r8
 8009472:	9805      	ldr	r0, [sp, #20]
 8009474:	463a      	mov	r2, r7
 8009476:	f7ff f9b3 	bl	80087e0 <__lshift>
 800947a:	4680      	mov	r8, r0
 800947c:	2800      	cmp	r0, #0
 800947e:	f43f ae46 	beq.w	800910e <_strtod_l+0x43e>
 8009482:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009484:	9805      	ldr	r0, [sp, #20]
 8009486:	464a      	mov	r2, r9
 8009488:	f7ff fa32 	bl	80088f0 <__mdiff>
 800948c:	4604      	mov	r4, r0
 800948e:	2800      	cmp	r0, #0
 8009490:	f43f ae3d 	beq.w	800910e <_strtod_l+0x43e>
 8009494:	68c3      	ldr	r3, [r0, #12]
 8009496:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009498:	2300      	movs	r3, #0
 800949a:	60c3      	str	r3, [r0, #12]
 800949c:	4641      	mov	r1, r8
 800949e:	f7ff fa0b 	bl	80088b8 <__mcmp>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	da46      	bge.n	8009534 <_strtod_l+0x864>
 80094a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80094a8:	ea53 030a 	orrs.w	r3, r3, sl
 80094ac:	d16c      	bne.n	8009588 <_strtod_l+0x8b8>
 80094ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d168      	bne.n	8009588 <_strtod_l+0x8b8>
 80094b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094ba:	0d1b      	lsrs	r3, r3, #20
 80094bc:	051b      	lsls	r3, r3, #20
 80094be:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094c2:	d961      	bls.n	8009588 <_strtod_l+0x8b8>
 80094c4:	6963      	ldr	r3, [r4, #20]
 80094c6:	b913      	cbnz	r3, 80094ce <_strtod_l+0x7fe>
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	dd5c      	ble.n	8009588 <_strtod_l+0x8b8>
 80094ce:	4621      	mov	r1, r4
 80094d0:	2201      	movs	r2, #1
 80094d2:	9805      	ldr	r0, [sp, #20]
 80094d4:	f7ff f984 	bl	80087e0 <__lshift>
 80094d8:	4641      	mov	r1, r8
 80094da:	4604      	mov	r4, r0
 80094dc:	f7ff f9ec 	bl	80088b8 <__mcmp>
 80094e0:	2800      	cmp	r0, #0
 80094e2:	dd51      	ble.n	8009588 <_strtod_l+0x8b8>
 80094e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094e8:	9a08      	ldr	r2, [sp, #32]
 80094ea:	0d1b      	lsrs	r3, r3, #20
 80094ec:	051b      	lsls	r3, r3, #20
 80094ee:	2a00      	cmp	r2, #0
 80094f0:	d06b      	beq.n	80095ca <_strtod_l+0x8fa>
 80094f2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094f6:	d868      	bhi.n	80095ca <_strtod_l+0x8fa>
 80094f8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80094fc:	f67f ae9d 	bls.w	800923a <_strtod_l+0x56a>
 8009500:	4b0a      	ldr	r3, [pc, #40]	@ (800952c <_strtod_l+0x85c>)
 8009502:	4650      	mov	r0, sl
 8009504:	4659      	mov	r1, fp
 8009506:	2200      	movs	r2, #0
 8009508:	f7f7 f886 	bl	8000618 <__aeabi_dmul>
 800950c:	4b08      	ldr	r3, [pc, #32]	@ (8009530 <_strtod_l+0x860>)
 800950e:	400b      	ands	r3, r1
 8009510:	4682      	mov	sl, r0
 8009512:	468b      	mov	fp, r1
 8009514:	2b00      	cmp	r3, #0
 8009516:	f47f ae05 	bne.w	8009124 <_strtod_l+0x454>
 800951a:	9a05      	ldr	r2, [sp, #20]
 800951c:	2322      	movs	r3, #34	@ 0x22
 800951e:	6013      	str	r3, [r2, #0]
 8009520:	e600      	b.n	8009124 <_strtod_l+0x454>
 8009522:	bf00      	nop
 8009524:	0800af00 	.word	0x0800af00
 8009528:	fffffc02 	.word	0xfffffc02
 800952c:	39500000 	.word	0x39500000
 8009530:	7ff00000 	.word	0x7ff00000
 8009534:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009538:	d165      	bne.n	8009606 <_strtod_l+0x936>
 800953a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800953c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009540:	b35a      	cbz	r2, 800959a <_strtod_l+0x8ca>
 8009542:	4a9f      	ldr	r2, [pc, #636]	@ (80097c0 <_strtod_l+0xaf0>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d12b      	bne.n	80095a0 <_strtod_l+0x8d0>
 8009548:	9b08      	ldr	r3, [sp, #32]
 800954a:	4651      	mov	r1, sl
 800954c:	b303      	cbz	r3, 8009590 <_strtod_l+0x8c0>
 800954e:	4b9d      	ldr	r3, [pc, #628]	@ (80097c4 <_strtod_l+0xaf4>)
 8009550:	465a      	mov	r2, fp
 8009552:	4013      	ands	r3, r2
 8009554:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009558:	f04f 32ff 	mov.w	r2, #4294967295
 800955c:	d81b      	bhi.n	8009596 <_strtod_l+0x8c6>
 800955e:	0d1b      	lsrs	r3, r3, #20
 8009560:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009564:	fa02 f303 	lsl.w	r3, r2, r3
 8009568:	4299      	cmp	r1, r3
 800956a:	d119      	bne.n	80095a0 <_strtod_l+0x8d0>
 800956c:	4b96      	ldr	r3, [pc, #600]	@ (80097c8 <_strtod_l+0xaf8>)
 800956e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009570:	429a      	cmp	r2, r3
 8009572:	d102      	bne.n	800957a <_strtod_l+0x8aa>
 8009574:	3101      	adds	r1, #1
 8009576:	f43f adca 	beq.w	800910e <_strtod_l+0x43e>
 800957a:	4b92      	ldr	r3, [pc, #584]	@ (80097c4 <_strtod_l+0xaf4>)
 800957c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800957e:	401a      	ands	r2, r3
 8009580:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009584:	f04f 0a00 	mov.w	sl, #0
 8009588:	9b08      	ldr	r3, [sp, #32]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d1b8      	bne.n	8009500 <_strtod_l+0x830>
 800958e:	e5c9      	b.n	8009124 <_strtod_l+0x454>
 8009590:	f04f 33ff 	mov.w	r3, #4294967295
 8009594:	e7e8      	b.n	8009568 <_strtod_l+0x898>
 8009596:	4613      	mov	r3, r2
 8009598:	e7e6      	b.n	8009568 <_strtod_l+0x898>
 800959a:	ea53 030a 	orrs.w	r3, r3, sl
 800959e:	d0a1      	beq.n	80094e4 <_strtod_l+0x814>
 80095a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80095a2:	b1db      	cbz	r3, 80095dc <_strtod_l+0x90c>
 80095a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80095a6:	4213      	tst	r3, r2
 80095a8:	d0ee      	beq.n	8009588 <_strtod_l+0x8b8>
 80095aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ac:	9a08      	ldr	r2, [sp, #32]
 80095ae:	4650      	mov	r0, sl
 80095b0:	4659      	mov	r1, fp
 80095b2:	b1bb      	cbz	r3, 80095e4 <_strtod_l+0x914>
 80095b4:	f7ff fb6e 	bl	8008c94 <sulp>
 80095b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095bc:	ec53 2b10 	vmov	r2, r3, d0
 80095c0:	f7f6 fe74 	bl	80002ac <__adddf3>
 80095c4:	4682      	mov	sl, r0
 80095c6:	468b      	mov	fp, r1
 80095c8:	e7de      	b.n	8009588 <_strtod_l+0x8b8>
 80095ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80095ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80095d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80095d6:	f04f 3aff 	mov.w	sl, #4294967295
 80095da:	e7d5      	b.n	8009588 <_strtod_l+0x8b8>
 80095dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80095de:	ea13 0f0a 	tst.w	r3, sl
 80095e2:	e7e1      	b.n	80095a8 <_strtod_l+0x8d8>
 80095e4:	f7ff fb56 	bl	8008c94 <sulp>
 80095e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80095ec:	ec53 2b10 	vmov	r2, r3, d0
 80095f0:	f7f6 fe5a 	bl	80002a8 <__aeabi_dsub>
 80095f4:	2200      	movs	r2, #0
 80095f6:	2300      	movs	r3, #0
 80095f8:	4682      	mov	sl, r0
 80095fa:	468b      	mov	fp, r1
 80095fc:	f7f7 fa74 	bl	8000ae8 <__aeabi_dcmpeq>
 8009600:	2800      	cmp	r0, #0
 8009602:	d0c1      	beq.n	8009588 <_strtod_l+0x8b8>
 8009604:	e619      	b.n	800923a <_strtod_l+0x56a>
 8009606:	4641      	mov	r1, r8
 8009608:	4620      	mov	r0, r4
 800960a:	f7ff facd 	bl	8008ba8 <__ratio>
 800960e:	ec57 6b10 	vmov	r6, r7, d0
 8009612:	2200      	movs	r2, #0
 8009614:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009618:	4630      	mov	r0, r6
 800961a:	4639      	mov	r1, r7
 800961c:	f7f7 fa78 	bl	8000b10 <__aeabi_dcmple>
 8009620:	2800      	cmp	r0, #0
 8009622:	d06f      	beq.n	8009704 <_strtod_l+0xa34>
 8009624:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009626:	2b00      	cmp	r3, #0
 8009628:	d17a      	bne.n	8009720 <_strtod_l+0xa50>
 800962a:	f1ba 0f00 	cmp.w	sl, #0
 800962e:	d158      	bne.n	80096e2 <_strtod_l+0xa12>
 8009630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009632:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009636:	2b00      	cmp	r3, #0
 8009638:	d15a      	bne.n	80096f0 <_strtod_l+0xa20>
 800963a:	4b64      	ldr	r3, [pc, #400]	@ (80097cc <_strtod_l+0xafc>)
 800963c:	2200      	movs	r2, #0
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f7 fa5b 	bl	8000afc <__aeabi_dcmplt>
 8009646:	2800      	cmp	r0, #0
 8009648:	d159      	bne.n	80096fe <_strtod_l+0xa2e>
 800964a:	4630      	mov	r0, r6
 800964c:	4639      	mov	r1, r7
 800964e:	4b60      	ldr	r3, [pc, #384]	@ (80097d0 <_strtod_l+0xb00>)
 8009650:	2200      	movs	r2, #0
 8009652:	f7f6 ffe1 	bl	8000618 <__aeabi_dmul>
 8009656:	4606      	mov	r6, r0
 8009658:	460f      	mov	r7, r1
 800965a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800965e:	9606      	str	r6, [sp, #24]
 8009660:	9307      	str	r3, [sp, #28]
 8009662:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009666:	4d57      	ldr	r5, [pc, #348]	@ (80097c4 <_strtod_l+0xaf4>)
 8009668:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800966c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800966e:	401d      	ands	r5, r3
 8009670:	4b58      	ldr	r3, [pc, #352]	@ (80097d4 <_strtod_l+0xb04>)
 8009672:	429d      	cmp	r5, r3
 8009674:	f040 80b2 	bne.w	80097dc <_strtod_l+0xb0c>
 8009678:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800967a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800967e:	ec4b ab10 	vmov	d0, sl, fp
 8009682:	f7ff f9c9 	bl	8008a18 <__ulp>
 8009686:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800968a:	ec51 0b10 	vmov	r0, r1, d0
 800968e:	f7f6 ffc3 	bl	8000618 <__aeabi_dmul>
 8009692:	4652      	mov	r2, sl
 8009694:	465b      	mov	r3, fp
 8009696:	f7f6 fe09 	bl	80002ac <__adddf3>
 800969a:	460b      	mov	r3, r1
 800969c:	4949      	ldr	r1, [pc, #292]	@ (80097c4 <_strtod_l+0xaf4>)
 800969e:	4a4e      	ldr	r2, [pc, #312]	@ (80097d8 <_strtod_l+0xb08>)
 80096a0:	4019      	ands	r1, r3
 80096a2:	4291      	cmp	r1, r2
 80096a4:	4682      	mov	sl, r0
 80096a6:	d942      	bls.n	800972e <_strtod_l+0xa5e>
 80096a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096aa:	4b47      	ldr	r3, [pc, #284]	@ (80097c8 <_strtod_l+0xaf8>)
 80096ac:	429a      	cmp	r2, r3
 80096ae:	d103      	bne.n	80096b8 <_strtod_l+0x9e8>
 80096b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80096b2:	3301      	adds	r3, #1
 80096b4:	f43f ad2b 	beq.w	800910e <_strtod_l+0x43e>
 80096b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80097c8 <_strtod_l+0xaf8>
 80096bc:	f04f 3aff 	mov.w	sl, #4294967295
 80096c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096c2:	9805      	ldr	r0, [sp, #20]
 80096c4:	f7fe fe74 	bl	80083b0 <_Bfree>
 80096c8:	9805      	ldr	r0, [sp, #20]
 80096ca:	4649      	mov	r1, r9
 80096cc:	f7fe fe70 	bl	80083b0 <_Bfree>
 80096d0:	9805      	ldr	r0, [sp, #20]
 80096d2:	4641      	mov	r1, r8
 80096d4:	f7fe fe6c 	bl	80083b0 <_Bfree>
 80096d8:	9805      	ldr	r0, [sp, #20]
 80096da:	4621      	mov	r1, r4
 80096dc:	f7fe fe68 	bl	80083b0 <_Bfree>
 80096e0:	e618      	b.n	8009314 <_strtod_l+0x644>
 80096e2:	f1ba 0f01 	cmp.w	sl, #1
 80096e6:	d103      	bne.n	80096f0 <_strtod_l+0xa20>
 80096e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	f43f ada5 	beq.w	800923a <_strtod_l+0x56a>
 80096f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80097a0 <_strtod_l+0xad0>
 80096f4:	4f35      	ldr	r7, [pc, #212]	@ (80097cc <_strtod_l+0xafc>)
 80096f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80096fa:	2600      	movs	r6, #0
 80096fc:	e7b1      	b.n	8009662 <_strtod_l+0x992>
 80096fe:	4f34      	ldr	r7, [pc, #208]	@ (80097d0 <_strtod_l+0xb00>)
 8009700:	2600      	movs	r6, #0
 8009702:	e7aa      	b.n	800965a <_strtod_l+0x98a>
 8009704:	4b32      	ldr	r3, [pc, #200]	@ (80097d0 <_strtod_l+0xb00>)
 8009706:	4630      	mov	r0, r6
 8009708:	4639      	mov	r1, r7
 800970a:	2200      	movs	r2, #0
 800970c:	f7f6 ff84 	bl	8000618 <__aeabi_dmul>
 8009710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	2b00      	cmp	r3, #0
 8009718:	d09f      	beq.n	800965a <_strtod_l+0x98a>
 800971a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800971e:	e7a0      	b.n	8009662 <_strtod_l+0x992>
 8009720:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80097a8 <_strtod_l+0xad8>
 8009724:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009728:	ec57 6b17 	vmov	r6, r7, d7
 800972c:	e799      	b.n	8009662 <_strtod_l+0x992>
 800972e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009732:	9b08      	ldr	r3, [sp, #32]
 8009734:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009738:	2b00      	cmp	r3, #0
 800973a:	d1c1      	bne.n	80096c0 <_strtod_l+0x9f0>
 800973c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009740:	0d1b      	lsrs	r3, r3, #20
 8009742:	051b      	lsls	r3, r3, #20
 8009744:	429d      	cmp	r5, r3
 8009746:	d1bb      	bne.n	80096c0 <_strtod_l+0x9f0>
 8009748:	4630      	mov	r0, r6
 800974a:	4639      	mov	r1, r7
 800974c:	f7f7 fac4 	bl	8000cd8 <__aeabi_d2lz>
 8009750:	f7f6 ff34 	bl	80005bc <__aeabi_l2d>
 8009754:	4602      	mov	r2, r0
 8009756:	460b      	mov	r3, r1
 8009758:	4630      	mov	r0, r6
 800975a:	4639      	mov	r1, r7
 800975c:	f7f6 fda4 	bl	80002a8 <__aeabi_dsub>
 8009760:	460b      	mov	r3, r1
 8009762:	4602      	mov	r2, r0
 8009764:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009768:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800976c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800976e:	ea46 060a 	orr.w	r6, r6, sl
 8009772:	431e      	orrs	r6, r3
 8009774:	d06f      	beq.n	8009856 <_strtod_l+0xb86>
 8009776:	a30e      	add	r3, pc, #56	@ (adr r3, 80097b0 <_strtod_l+0xae0>)
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f7f7 f9be 	bl	8000afc <__aeabi_dcmplt>
 8009780:	2800      	cmp	r0, #0
 8009782:	f47f accf 	bne.w	8009124 <_strtod_l+0x454>
 8009786:	a30c      	add	r3, pc, #48	@ (adr r3, 80097b8 <_strtod_l+0xae8>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009790:	f7f7 f9d2 	bl	8000b38 <__aeabi_dcmpgt>
 8009794:	2800      	cmp	r0, #0
 8009796:	d093      	beq.n	80096c0 <_strtod_l+0x9f0>
 8009798:	e4c4      	b.n	8009124 <_strtod_l+0x454>
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w
 80097a0:	00000000 	.word	0x00000000
 80097a4:	bff00000 	.word	0xbff00000
 80097a8:	00000000 	.word	0x00000000
 80097ac:	3ff00000 	.word	0x3ff00000
 80097b0:	94a03595 	.word	0x94a03595
 80097b4:	3fdfffff 	.word	0x3fdfffff
 80097b8:	35afe535 	.word	0x35afe535
 80097bc:	3fe00000 	.word	0x3fe00000
 80097c0:	000fffff 	.word	0x000fffff
 80097c4:	7ff00000 	.word	0x7ff00000
 80097c8:	7fefffff 	.word	0x7fefffff
 80097cc:	3ff00000 	.word	0x3ff00000
 80097d0:	3fe00000 	.word	0x3fe00000
 80097d4:	7fe00000 	.word	0x7fe00000
 80097d8:	7c9fffff 	.word	0x7c9fffff
 80097dc:	9b08      	ldr	r3, [sp, #32]
 80097de:	b323      	cbz	r3, 800982a <_strtod_l+0xb5a>
 80097e0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80097e4:	d821      	bhi.n	800982a <_strtod_l+0xb5a>
 80097e6:	a328      	add	r3, pc, #160	@ (adr r3, 8009888 <_strtod_l+0xbb8>)
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	4630      	mov	r0, r6
 80097ee:	4639      	mov	r1, r7
 80097f0:	f7f7 f98e 	bl	8000b10 <__aeabi_dcmple>
 80097f4:	b1a0      	cbz	r0, 8009820 <_strtod_l+0xb50>
 80097f6:	4639      	mov	r1, r7
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7f7 f9e5 	bl	8000bc8 <__aeabi_d2uiz>
 80097fe:	2801      	cmp	r0, #1
 8009800:	bf38      	it	cc
 8009802:	2001      	movcc	r0, #1
 8009804:	f7f6 fe8e 	bl	8000524 <__aeabi_ui2d>
 8009808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800980a:	4606      	mov	r6, r0
 800980c:	460f      	mov	r7, r1
 800980e:	b9fb      	cbnz	r3, 8009850 <_strtod_l+0xb80>
 8009810:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009814:	9014      	str	r0, [sp, #80]	@ 0x50
 8009816:	9315      	str	r3, [sp, #84]	@ 0x54
 8009818:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800981c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009820:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009822:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009826:	1b5b      	subs	r3, r3, r5
 8009828:	9311      	str	r3, [sp, #68]	@ 0x44
 800982a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800982e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009832:	f7ff f8f1 	bl	8008a18 <__ulp>
 8009836:	4650      	mov	r0, sl
 8009838:	ec53 2b10 	vmov	r2, r3, d0
 800983c:	4659      	mov	r1, fp
 800983e:	f7f6 feeb 	bl	8000618 <__aeabi_dmul>
 8009842:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009846:	f7f6 fd31 	bl	80002ac <__adddf3>
 800984a:	4682      	mov	sl, r0
 800984c:	468b      	mov	fp, r1
 800984e:	e770      	b.n	8009732 <_strtod_l+0xa62>
 8009850:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009854:	e7e0      	b.n	8009818 <_strtod_l+0xb48>
 8009856:	a30e      	add	r3, pc, #56	@ (adr r3, 8009890 <_strtod_l+0xbc0>)
 8009858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800985c:	f7f7 f94e 	bl	8000afc <__aeabi_dcmplt>
 8009860:	e798      	b.n	8009794 <_strtod_l+0xac4>
 8009862:	2300      	movs	r3, #0
 8009864:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009866:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009868:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800986a:	6013      	str	r3, [r2, #0]
 800986c:	f7ff ba6d 	b.w	8008d4a <_strtod_l+0x7a>
 8009870:	2a65      	cmp	r2, #101	@ 0x65
 8009872:	f43f ab66 	beq.w	8008f42 <_strtod_l+0x272>
 8009876:	2a45      	cmp	r2, #69	@ 0x45
 8009878:	f43f ab63 	beq.w	8008f42 <_strtod_l+0x272>
 800987c:	2301      	movs	r3, #1
 800987e:	f7ff bb9e 	b.w	8008fbe <_strtod_l+0x2ee>
 8009882:	bf00      	nop
 8009884:	f3af 8000 	nop.w
 8009888:	ffc00000 	.word	0xffc00000
 800988c:	41dfffff 	.word	0x41dfffff
 8009890:	94a03595 	.word	0x94a03595
 8009894:	3fcfffff 	.word	0x3fcfffff

08009898 <_strtod_r>:
 8009898:	4b01      	ldr	r3, [pc, #4]	@ (80098a0 <_strtod_r+0x8>)
 800989a:	f7ff ba19 	b.w	8008cd0 <_strtod_l>
 800989e:	bf00      	nop
 80098a0:	2000006c 	.word	0x2000006c

080098a4 <_strtol_l.constprop.0>:
 80098a4:	2b24      	cmp	r3, #36	@ 0x24
 80098a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098aa:	4686      	mov	lr, r0
 80098ac:	4690      	mov	r8, r2
 80098ae:	d801      	bhi.n	80098b4 <_strtol_l.constprop.0+0x10>
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	d106      	bne.n	80098c2 <_strtol_l.constprop.0+0x1e>
 80098b4:	f7fd fdba 	bl	800742c <__errno>
 80098b8:	2316      	movs	r3, #22
 80098ba:	6003      	str	r3, [r0, #0]
 80098bc:	2000      	movs	r0, #0
 80098be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c2:	4834      	ldr	r0, [pc, #208]	@ (8009994 <_strtol_l.constprop.0+0xf0>)
 80098c4:	460d      	mov	r5, r1
 80098c6:	462a      	mov	r2, r5
 80098c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098cc:	5d06      	ldrb	r6, [r0, r4]
 80098ce:	f016 0608 	ands.w	r6, r6, #8
 80098d2:	d1f8      	bne.n	80098c6 <_strtol_l.constprop.0+0x22>
 80098d4:	2c2d      	cmp	r4, #45	@ 0x2d
 80098d6:	d12d      	bne.n	8009934 <_strtol_l.constprop.0+0x90>
 80098d8:	782c      	ldrb	r4, [r5, #0]
 80098da:	2601      	movs	r6, #1
 80098dc:	1c95      	adds	r5, r2, #2
 80098de:	f033 0210 	bics.w	r2, r3, #16
 80098e2:	d109      	bne.n	80098f8 <_strtol_l.constprop.0+0x54>
 80098e4:	2c30      	cmp	r4, #48	@ 0x30
 80098e6:	d12a      	bne.n	800993e <_strtol_l.constprop.0+0x9a>
 80098e8:	782a      	ldrb	r2, [r5, #0]
 80098ea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80098ee:	2a58      	cmp	r2, #88	@ 0x58
 80098f0:	d125      	bne.n	800993e <_strtol_l.constprop.0+0x9a>
 80098f2:	786c      	ldrb	r4, [r5, #1]
 80098f4:	2310      	movs	r3, #16
 80098f6:	3502      	adds	r5, #2
 80098f8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80098fc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009900:	2200      	movs	r2, #0
 8009902:	fbbc f9f3 	udiv	r9, ip, r3
 8009906:	4610      	mov	r0, r2
 8009908:	fb03 ca19 	mls	sl, r3, r9, ip
 800990c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009910:	2f09      	cmp	r7, #9
 8009912:	d81b      	bhi.n	800994c <_strtol_l.constprop.0+0xa8>
 8009914:	463c      	mov	r4, r7
 8009916:	42a3      	cmp	r3, r4
 8009918:	dd27      	ble.n	800996a <_strtol_l.constprop.0+0xc6>
 800991a:	1c57      	adds	r7, r2, #1
 800991c:	d007      	beq.n	800992e <_strtol_l.constprop.0+0x8a>
 800991e:	4581      	cmp	r9, r0
 8009920:	d320      	bcc.n	8009964 <_strtol_l.constprop.0+0xc0>
 8009922:	d101      	bne.n	8009928 <_strtol_l.constprop.0+0x84>
 8009924:	45a2      	cmp	sl, r4
 8009926:	db1d      	blt.n	8009964 <_strtol_l.constprop.0+0xc0>
 8009928:	fb00 4003 	mla	r0, r0, r3, r4
 800992c:	2201      	movs	r2, #1
 800992e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009932:	e7eb      	b.n	800990c <_strtol_l.constprop.0+0x68>
 8009934:	2c2b      	cmp	r4, #43	@ 0x2b
 8009936:	bf04      	itt	eq
 8009938:	782c      	ldrbeq	r4, [r5, #0]
 800993a:	1c95      	addeq	r5, r2, #2
 800993c:	e7cf      	b.n	80098de <_strtol_l.constprop.0+0x3a>
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1da      	bne.n	80098f8 <_strtol_l.constprop.0+0x54>
 8009942:	2c30      	cmp	r4, #48	@ 0x30
 8009944:	bf0c      	ite	eq
 8009946:	2308      	moveq	r3, #8
 8009948:	230a      	movne	r3, #10
 800994a:	e7d5      	b.n	80098f8 <_strtol_l.constprop.0+0x54>
 800994c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009950:	2f19      	cmp	r7, #25
 8009952:	d801      	bhi.n	8009958 <_strtol_l.constprop.0+0xb4>
 8009954:	3c37      	subs	r4, #55	@ 0x37
 8009956:	e7de      	b.n	8009916 <_strtol_l.constprop.0+0x72>
 8009958:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800995c:	2f19      	cmp	r7, #25
 800995e:	d804      	bhi.n	800996a <_strtol_l.constprop.0+0xc6>
 8009960:	3c57      	subs	r4, #87	@ 0x57
 8009962:	e7d8      	b.n	8009916 <_strtol_l.constprop.0+0x72>
 8009964:	f04f 32ff 	mov.w	r2, #4294967295
 8009968:	e7e1      	b.n	800992e <_strtol_l.constprop.0+0x8a>
 800996a:	1c53      	adds	r3, r2, #1
 800996c:	d108      	bne.n	8009980 <_strtol_l.constprop.0+0xdc>
 800996e:	2322      	movs	r3, #34	@ 0x22
 8009970:	f8ce 3000 	str.w	r3, [lr]
 8009974:	4660      	mov	r0, ip
 8009976:	f1b8 0f00 	cmp.w	r8, #0
 800997a:	d0a0      	beq.n	80098be <_strtol_l.constprop.0+0x1a>
 800997c:	1e69      	subs	r1, r5, #1
 800997e:	e006      	b.n	800998e <_strtol_l.constprop.0+0xea>
 8009980:	b106      	cbz	r6, 8009984 <_strtol_l.constprop.0+0xe0>
 8009982:	4240      	negs	r0, r0
 8009984:	f1b8 0f00 	cmp.w	r8, #0
 8009988:	d099      	beq.n	80098be <_strtol_l.constprop.0+0x1a>
 800998a:	2a00      	cmp	r2, #0
 800998c:	d1f6      	bne.n	800997c <_strtol_l.constprop.0+0xd8>
 800998e:	f8c8 1000 	str.w	r1, [r8]
 8009992:	e794      	b.n	80098be <_strtol_l.constprop.0+0x1a>
 8009994:	0800af29 	.word	0x0800af29

08009998 <_strtol_r>:
 8009998:	f7ff bf84 	b.w	80098a4 <_strtol_l.constprop.0>

0800999c <__ssputs_r>:
 800999c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099a0:	688e      	ldr	r6, [r1, #8]
 80099a2:	461f      	mov	r7, r3
 80099a4:	42be      	cmp	r6, r7
 80099a6:	680b      	ldr	r3, [r1, #0]
 80099a8:	4682      	mov	sl, r0
 80099aa:	460c      	mov	r4, r1
 80099ac:	4690      	mov	r8, r2
 80099ae:	d82d      	bhi.n	8009a0c <__ssputs_r+0x70>
 80099b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099b4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099b8:	d026      	beq.n	8009a08 <__ssputs_r+0x6c>
 80099ba:	6965      	ldr	r5, [r4, #20]
 80099bc:	6909      	ldr	r1, [r1, #16]
 80099be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099c2:	eba3 0901 	sub.w	r9, r3, r1
 80099c6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099ca:	1c7b      	adds	r3, r7, #1
 80099cc:	444b      	add	r3, r9
 80099ce:	106d      	asrs	r5, r5, #1
 80099d0:	429d      	cmp	r5, r3
 80099d2:	bf38      	it	cc
 80099d4:	461d      	movcc	r5, r3
 80099d6:	0553      	lsls	r3, r2, #21
 80099d8:	d527      	bpl.n	8009a2a <__ssputs_r+0x8e>
 80099da:	4629      	mov	r1, r5
 80099dc:	f7fe fc1c 	bl	8008218 <_malloc_r>
 80099e0:	4606      	mov	r6, r0
 80099e2:	b360      	cbz	r0, 8009a3e <__ssputs_r+0xa2>
 80099e4:	6921      	ldr	r1, [r4, #16]
 80099e6:	464a      	mov	r2, r9
 80099e8:	f000 fa18 	bl	8009e1c <memcpy>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80099f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	6126      	str	r6, [r4, #16]
 80099fa:	6165      	str	r5, [r4, #20]
 80099fc:	444e      	add	r6, r9
 80099fe:	eba5 0509 	sub.w	r5, r5, r9
 8009a02:	6026      	str	r6, [r4, #0]
 8009a04:	60a5      	str	r5, [r4, #8]
 8009a06:	463e      	mov	r6, r7
 8009a08:	42be      	cmp	r6, r7
 8009a0a:	d900      	bls.n	8009a0e <__ssputs_r+0x72>
 8009a0c:	463e      	mov	r6, r7
 8009a0e:	6820      	ldr	r0, [r4, #0]
 8009a10:	4632      	mov	r2, r6
 8009a12:	4641      	mov	r1, r8
 8009a14:	f000 f9c6 	bl	8009da4 <memmove>
 8009a18:	68a3      	ldr	r3, [r4, #8]
 8009a1a:	1b9b      	subs	r3, r3, r6
 8009a1c:	60a3      	str	r3, [r4, #8]
 8009a1e:	6823      	ldr	r3, [r4, #0]
 8009a20:	4433      	add	r3, r6
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	2000      	movs	r0, #0
 8009a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2a:	462a      	mov	r2, r5
 8009a2c:	f000 fd89 	bl	800a542 <_realloc_r>
 8009a30:	4606      	mov	r6, r0
 8009a32:	2800      	cmp	r0, #0
 8009a34:	d1e0      	bne.n	80099f8 <__ssputs_r+0x5c>
 8009a36:	6921      	ldr	r1, [r4, #16]
 8009a38:	4650      	mov	r0, sl
 8009a3a:	f7fe fb79 	bl	8008130 <_free_r>
 8009a3e:	230c      	movs	r3, #12
 8009a40:	f8ca 3000 	str.w	r3, [sl]
 8009a44:	89a3      	ldrh	r3, [r4, #12]
 8009a46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a4a:	81a3      	strh	r3, [r4, #12]
 8009a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a50:	e7e9      	b.n	8009a26 <__ssputs_r+0x8a>
	...

08009a54 <_svfiprintf_r>:
 8009a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a58:	4698      	mov	r8, r3
 8009a5a:	898b      	ldrh	r3, [r1, #12]
 8009a5c:	061b      	lsls	r3, r3, #24
 8009a5e:	b09d      	sub	sp, #116	@ 0x74
 8009a60:	4607      	mov	r7, r0
 8009a62:	460d      	mov	r5, r1
 8009a64:	4614      	mov	r4, r2
 8009a66:	d510      	bpl.n	8009a8a <_svfiprintf_r+0x36>
 8009a68:	690b      	ldr	r3, [r1, #16]
 8009a6a:	b973      	cbnz	r3, 8009a8a <_svfiprintf_r+0x36>
 8009a6c:	2140      	movs	r1, #64	@ 0x40
 8009a6e:	f7fe fbd3 	bl	8008218 <_malloc_r>
 8009a72:	6028      	str	r0, [r5, #0]
 8009a74:	6128      	str	r0, [r5, #16]
 8009a76:	b930      	cbnz	r0, 8009a86 <_svfiprintf_r+0x32>
 8009a78:	230c      	movs	r3, #12
 8009a7a:	603b      	str	r3, [r7, #0]
 8009a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009a80:	b01d      	add	sp, #116	@ 0x74
 8009a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a86:	2340      	movs	r3, #64	@ 0x40
 8009a88:	616b      	str	r3, [r5, #20]
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a8e:	2320      	movs	r3, #32
 8009a90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009a94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009a98:	2330      	movs	r3, #48	@ 0x30
 8009a9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009c38 <_svfiprintf_r+0x1e4>
 8009a9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009aa2:	f04f 0901 	mov.w	r9, #1
 8009aa6:	4623      	mov	r3, r4
 8009aa8:	469a      	mov	sl, r3
 8009aaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aae:	b10a      	cbz	r2, 8009ab4 <_svfiprintf_r+0x60>
 8009ab0:	2a25      	cmp	r2, #37	@ 0x25
 8009ab2:	d1f9      	bne.n	8009aa8 <_svfiprintf_r+0x54>
 8009ab4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ab8:	d00b      	beq.n	8009ad2 <_svfiprintf_r+0x7e>
 8009aba:	465b      	mov	r3, fp
 8009abc:	4622      	mov	r2, r4
 8009abe:	4629      	mov	r1, r5
 8009ac0:	4638      	mov	r0, r7
 8009ac2:	f7ff ff6b 	bl	800999c <__ssputs_r>
 8009ac6:	3001      	adds	r0, #1
 8009ac8:	f000 80a7 	beq.w	8009c1a <_svfiprintf_r+0x1c6>
 8009acc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ace:	445a      	add	r2, fp
 8009ad0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009ad2:	f89a 3000 	ldrb.w	r3, [sl]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	f000 809f 	beq.w	8009c1a <_svfiprintf_r+0x1c6>
 8009adc:	2300      	movs	r3, #0
 8009ade:	f04f 32ff 	mov.w	r2, #4294967295
 8009ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ae6:	f10a 0a01 	add.w	sl, sl, #1
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	9307      	str	r3, [sp, #28]
 8009aee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009af2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009af4:	4654      	mov	r4, sl
 8009af6:	2205      	movs	r2, #5
 8009af8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009afc:	484e      	ldr	r0, [pc, #312]	@ (8009c38 <_svfiprintf_r+0x1e4>)
 8009afe:	f7f6 fb77 	bl	80001f0 <memchr>
 8009b02:	9a04      	ldr	r2, [sp, #16]
 8009b04:	b9d8      	cbnz	r0, 8009b3e <_svfiprintf_r+0xea>
 8009b06:	06d0      	lsls	r0, r2, #27
 8009b08:	bf44      	itt	mi
 8009b0a:	2320      	movmi	r3, #32
 8009b0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b10:	0711      	lsls	r1, r2, #28
 8009b12:	bf44      	itt	mi
 8009b14:	232b      	movmi	r3, #43	@ 0x2b
 8009b16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b20:	d015      	beq.n	8009b4e <_svfiprintf_r+0xfa>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	4654      	mov	r4, sl
 8009b26:	2000      	movs	r0, #0
 8009b28:	f04f 0c0a 	mov.w	ip, #10
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b32:	3b30      	subs	r3, #48	@ 0x30
 8009b34:	2b09      	cmp	r3, #9
 8009b36:	d94b      	bls.n	8009bd0 <_svfiprintf_r+0x17c>
 8009b38:	b1b0      	cbz	r0, 8009b68 <_svfiprintf_r+0x114>
 8009b3a:	9207      	str	r2, [sp, #28]
 8009b3c:	e014      	b.n	8009b68 <_svfiprintf_r+0x114>
 8009b3e:	eba0 0308 	sub.w	r3, r0, r8
 8009b42:	fa09 f303 	lsl.w	r3, r9, r3
 8009b46:	4313      	orrs	r3, r2
 8009b48:	9304      	str	r3, [sp, #16]
 8009b4a:	46a2      	mov	sl, r4
 8009b4c:	e7d2      	b.n	8009af4 <_svfiprintf_r+0xa0>
 8009b4e:	9b03      	ldr	r3, [sp, #12]
 8009b50:	1d19      	adds	r1, r3, #4
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	9103      	str	r1, [sp, #12]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	bfbb      	ittet	lt
 8009b5a:	425b      	neglt	r3, r3
 8009b5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b60:	9307      	strge	r3, [sp, #28]
 8009b62:	9307      	strlt	r3, [sp, #28]
 8009b64:	bfb8      	it	lt
 8009b66:	9204      	strlt	r2, [sp, #16]
 8009b68:	7823      	ldrb	r3, [r4, #0]
 8009b6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b6c:	d10a      	bne.n	8009b84 <_svfiprintf_r+0x130>
 8009b6e:	7863      	ldrb	r3, [r4, #1]
 8009b70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b72:	d132      	bne.n	8009bda <_svfiprintf_r+0x186>
 8009b74:	9b03      	ldr	r3, [sp, #12]
 8009b76:	1d1a      	adds	r2, r3, #4
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	9203      	str	r2, [sp, #12]
 8009b7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b80:	3402      	adds	r4, #2
 8009b82:	9305      	str	r3, [sp, #20]
 8009b84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009c48 <_svfiprintf_r+0x1f4>
 8009b88:	7821      	ldrb	r1, [r4, #0]
 8009b8a:	2203      	movs	r2, #3
 8009b8c:	4650      	mov	r0, sl
 8009b8e:	f7f6 fb2f 	bl	80001f0 <memchr>
 8009b92:	b138      	cbz	r0, 8009ba4 <_svfiprintf_r+0x150>
 8009b94:	9b04      	ldr	r3, [sp, #16]
 8009b96:	eba0 000a 	sub.w	r0, r0, sl
 8009b9a:	2240      	movs	r2, #64	@ 0x40
 8009b9c:	4082      	lsls	r2, r0
 8009b9e:	4313      	orrs	r3, r2
 8009ba0:	3401      	adds	r4, #1
 8009ba2:	9304      	str	r3, [sp, #16]
 8009ba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ba8:	4824      	ldr	r0, [pc, #144]	@ (8009c3c <_svfiprintf_r+0x1e8>)
 8009baa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bae:	2206      	movs	r2, #6
 8009bb0:	f7f6 fb1e 	bl	80001f0 <memchr>
 8009bb4:	2800      	cmp	r0, #0
 8009bb6:	d036      	beq.n	8009c26 <_svfiprintf_r+0x1d2>
 8009bb8:	4b21      	ldr	r3, [pc, #132]	@ (8009c40 <_svfiprintf_r+0x1ec>)
 8009bba:	bb1b      	cbnz	r3, 8009c04 <_svfiprintf_r+0x1b0>
 8009bbc:	9b03      	ldr	r3, [sp, #12]
 8009bbe:	3307      	adds	r3, #7
 8009bc0:	f023 0307 	bic.w	r3, r3, #7
 8009bc4:	3308      	adds	r3, #8
 8009bc6:	9303      	str	r3, [sp, #12]
 8009bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bca:	4433      	add	r3, r6
 8009bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bce:	e76a      	b.n	8009aa6 <_svfiprintf_r+0x52>
 8009bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	2001      	movs	r0, #1
 8009bd8:	e7a8      	b.n	8009b2c <_svfiprintf_r+0xd8>
 8009bda:	2300      	movs	r3, #0
 8009bdc:	3401      	adds	r4, #1
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	4619      	mov	r1, r3
 8009be2:	f04f 0c0a 	mov.w	ip, #10
 8009be6:	4620      	mov	r0, r4
 8009be8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009bec:	3a30      	subs	r2, #48	@ 0x30
 8009bee:	2a09      	cmp	r2, #9
 8009bf0:	d903      	bls.n	8009bfa <_svfiprintf_r+0x1a6>
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d0c6      	beq.n	8009b84 <_svfiprintf_r+0x130>
 8009bf6:	9105      	str	r1, [sp, #20]
 8009bf8:	e7c4      	b.n	8009b84 <_svfiprintf_r+0x130>
 8009bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009bfe:	4604      	mov	r4, r0
 8009c00:	2301      	movs	r3, #1
 8009c02:	e7f0      	b.n	8009be6 <_svfiprintf_r+0x192>
 8009c04:	ab03      	add	r3, sp, #12
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	462a      	mov	r2, r5
 8009c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009c44 <_svfiprintf_r+0x1f0>)
 8009c0c:	a904      	add	r1, sp, #16
 8009c0e:	4638      	mov	r0, r7
 8009c10:	f7fc fcc8 	bl	80065a4 <_printf_float>
 8009c14:	1c42      	adds	r2, r0, #1
 8009c16:	4606      	mov	r6, r0
 8009c18:	d1d6      	bne.n	8009bc8 <_svfiprintf_r+0x174>
 8009c1a:	89ab      	ldrh	r3, [r5, #12]
 8009c1c:	065b      	lsls	r3, r3, #25
 8009c1e:	f53f af2d 	bmi.w	8009a7c <_svfiprintf_r+0x28>
 8009c22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c24:	e72c      	b.n	8009a80 <_svfiprintf_r+0x2c>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b05      	ldr	r3, [pc, #20]	@ (8009c44 <_svfiprintf_r+0x1f0>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7fc ff4f 	bl	8006ad4 <_printf_i>
 8009c36:	e7ed      	b.n	8009c14 <_svfiprintf_r+0x1c0>
 8009c38:	0800b029 	.word	0x0800b029
 8009c3c:	0800b033 	.word	0x0800b033
 8009c40:	080065a5 	.word	0x080065a5
 8009c44:	0800999d 	.word	0x0800999d
 8009c48:	0800b02f 	.word	0x0800b02f

08009c4c <__sflush_r>:
 8009c4c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c54:	0716      	lsls	r6, r2, #28
 8009c56:	4605      	mov	r5, r0
 8009c58:	460c      	mov	r4, r1
 8009c5a:	d454      	bmi.n	8009d06 <__sflush_r+0xba>
 8009c5c:	684b      	ldr	r3, [r1, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	dc02      	bgt.n	8009c68 <__sflush_r+0x1c>
 8009c62:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	dd48      	ble.n	8009cfa <__sflush_r+0xae>
 8009c68:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c6a:	2e00      	cmp	r6, #0
 8009c6c:	d045      	beq.n	8009cfa <__sflush_r+0xae>
 8009c6e:	2300      	movs	r3, #0
 8009c70:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009c74:	682f      	ldr	r7, [r5, #0]
 8009c76:	6a21      	ldr	r1, [r4, #32]
 8009c78:	602b      	str	r3, [r5, #0]
 8009c7a:	d030      	beq.n	8009cde <__sflush_r+0x92>
 8009c7c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009c7e:	89a3      	ldrh	r3, [r4, #12]
 8009c80:	0759      	lsls	r1, r3, #29
 8009c82:	d505      	bpl.n	8009c90 <__sflush_r+0x44>
 8009c84:	6863      	ldr	r3, [r4, #4]
 8009c86:	1ad2      	subs	r2, r2, r3
 8009c88:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009c8a:	b10b      	cbz	r3, 8009c90 <__sflush_r+0x44>
 8009c8c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009c8e:	1ad2      	subs	r2, r2, r3
 8009c90:	2300      	movs	r3, #0
 8009c92:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009c94:	6a21      	ldr	r1, [r4, #32]
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b0      	blx	r6
 8009c9a:	1c43      	adds	r3, r0, #1
 8009c9c:	89a3      	ldrh	r3, [r4, #12]
 8009c9e:	d106      	bne.n	8009cae <__sflush_r+0x62>
 8009ca0:	6829      	ldr	r1, [r5, #0]
 8009ca2:	291d      	cmp	r1, #29
 8009ca4:	d82b      	bhi.n	8009cfe <__sflush_r+0xb2>
 8009ca6:	4a2a      	ldr	r2, [pc, #168]	@ (8009d50 <__sflush_r+0x104>)
 8009ca8:	410a      	asrs	r2, r1
 8009caa:	07d6      	lsls	r6, r2, #31
 8009cac:	d427      	bmi.n	8009cfe <__sflush_r+0xb2>
 8009cae:	2200      	movs	r2, #0
 8009cb0:	6062      	str	r2, [r4, #4]
 8009cb2:	04d9      	lsls	r1, r3, #19
 8009cb4:	6922      	ldr	r2, [r4, #16]
 8009cb6:	6022      	str	r2, [r4, #0]
 8009cb8:	d504      	bpl.n	8009cc4 <__sflush_r+0x78>
 8009cba:	1c42      	adds	r2, r0, #1
 8009cbc:	d101      	bne.n	8009cc2 <__sflush_r+0x76>
 8009cbe:	682b      	ldr	r3, [r5, #0]
 8009cc0:	b903      	cbnz	r3, 8009cc4 <__sflush_r+0x78>
 8009cc2:	6560      	str	r0, [r4, #84]	@ 0x54
 8009cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009cc6:	602f      	str	r7, [r5, #0]
 8009cc8:	b1b9      	cbz	r1, 8009cfa <__sflush_r+0xae>
 8009cca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cce:	4299      	cmp	r1, r3
 8009cd0:	d002      	beq.n	8009cd8 <__sflush_r+0x8c>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f7fe fa2c 	bl	8008130 <_free_r>
 8009cd8:	2300      	movs	r3, #0
 8009cda:	6363      	str	r3, [r4, #52]	@ 0x34
 8009cdc:	e00d      	b.n	8009cfa <__sflush_r+0xae>
 8009cde:	2301      	movs	r3, #1
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b0      	blx	r6
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	1c50      	adds	r0, r2, #1
 8009ce8:	d1c9      	bne.n	8009c7e <__sflush_r+0x32>
 8009cea:	682b      	ldr	r3, [r5, #0]
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d0c6      	beq.n	8009c7e <__sflush_r+0x32>
 8009cf0:	2b1d      	cmp	r3, #29
 8009cf2:	d001      	beq.n	8009cf8 <__sflush_r+0xac>
 8009cf4:	2b16      	cmp	r3, #22
 8009cf6:	d11e      	bne.n	8009d36 <__sflush_r+0xea>
 8009cf8:	602f      	str	r7, [r5, #0]
 8009cfa:	2000      	movs	r0, #0
 8009cfc:	e022      	b.n	8009d44 <__sflush_r+0xf8>
 8009cfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d02:	b21b      	sxth	r3, r3
 8009d04:	e01b      	b.n	8009d3e <__sflush_r+0xf2>
 8009d06:	690f      	ldr	r7, [r1, #16]
 8009d08:	2f00      	cmp	r7, #0
 8009d0a:	d0f6      	beq.n	8009cfa <__sflush_r+0xae>
 8009d0c:	0793      	lsls	r3, r2, #30
 8009d0e:	680e      	ldr	r6, [r1, #0]
 8009d10:	bf08      	it	eq
 8009d12:	694b      	ldreq	r3, [r1, #20]
 8009d14:	600f      	str	r7, [r1, #0]
 8009d16:	bf18      	it	ne
 8009d18:	2300      	movne	r3, #0
 8009d1a:	eba6 0807 	sub.w	r8, r6, r7
 8009d1e:	608b      	str	r3, [r1, #8]
 8009d20:	f1b8 0f00 	cmp.w	r8, #0
 8009d24:	dde9      	ble.n	8009cfa <__sflush_r+0xae>
 8009d26:	6a21      	ldr	r1, [r4, #32]
 8009d28:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009d2a:	4643      	mov	r3, r8
 8009d2c:	463a      	mov	r2, r7
 8009d2e:	4628      	mov	r0, r5
 8009d30:	47b0      	blx	r6
 8009d32:	2800      	cmp	r0, #0
 8009d34:	dc08      	bgt.n	8009d48 <__sflush_r+0xfc>
 8009d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d3e:	81a3      	strh	r3, [r4, #12]
 8009d40:	f04f 30ff 	mov.w	r0, #4294967295
 8009d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d48:	4407      	add	r7, r0
 8009d4a:	eba8 0800 	sub.w	r8, r8, r0
 8009d4e:	e7e7      	b.n	8009d20 <__sflush_r+0xd4>
 8009d50:	dfbffffe 	.word	0xdfbffffe

08009d54 <_fflush_r>:
 8009d54:	b538      	push	{r3, r4, r5, lr}
 8009d56:	690b      	ldr	r3, [r1, #16]
 8009d58:	4605      	mov	r5, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	b913      	cbnz	r3, 8009d64 <_fflush_r+0x10>
 8009d5e:	2500      	movs	r5, #0
 8009d60:	4628      	mov	r0, r5
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	b118      	cbz	r0, 8009d6e <_fflush_r+0x1a>
 8009d66:	6a03      	ldr	r3, [r0, #32]
 8009d68:	b90b      	cbnz	r3, 8009d6e <_fflush_r+0x1a>
 8009d6a:	f7fd fa73 	bl	8007254 <__sinit>
 8009d6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0f3      	beq.n	8009d5e <_fflush_r+0xa>
 8009d76:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009d78:	07d0      	lsls	r0, r2, #31
 8009d7a:	d404      	bmi.n	8009d86 <_fflush_r+0x32>
 8009d7c:	0599      	lsls	r1, r3, #22
 8009d7e:	d402      	bmi.n	8009d86 <_fflush_r+0x32>
 8009d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d82:	f7fd fb7e 	bl	8007482 <__retarget_lock_acquire_recursive>
 8009d86:	4628      	mov	r0, r5
 8009d88:	4621      	mov	r1, r4
 8009d8a:	f7ff ff5f 	bl	8009c4c <__sflush_r>
 8009d8e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009d90:	07da      	lsls	r2, r3, #31
 8009d92:	4605      	mov	r5, r0
 8009d94:	d4e4      	bmi.n	8009d60 <_fflush_r+0xc>
 8009d96:	89a3      	ldrh	r3, [r4, #12]
 8009d98:	059b      	lsls	r3, r3, #22
 8009d9a:	d4e1      	bmi.n	8009d60 <_fflush_r+0xc>
 8009d9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d9e:	f7fd fb71 	bl	8007484 <__retarget_lock_release_recursive>
 8009da2:	e7dd      	b.n	8009d60 <_fflush_r+0xc>

08009da4 <memmove>:
 8009da4:	4288      	cmp	r0, r1
 8009da6:	b510      	push	{r4, lr}
 8009da8:	eb01 0402 	add.w	r4, r1, r2
 8009dac:	d902      	bls.n	8009db4 <memmove+0x10>
 8009dae:	4284      	cmp	r4, r0
 8009db0:	4623      	mov	r3, r4
 8009db2:	d807      	bhi.n	8009dc4 <memmove+0x20>
 8009db4:	1e43      	subs	r3, r0, #1
 8009db6:	42a1      	cmp	r1, r4
 8009db8:	d008      	beq.n	8009dcc <memmove+0x28>
 8009dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009dc2:	e7f8      	b.n	8009db6 <memmove+0x12>
 8009dc4:	4402      	add	r2, r0
 8009dc6:	4601      	mov	r1, r0
 8009dc8:	428a      	cmp	r2, r1
 8009dca:	d100      	bne.n	8009dce <memmove+0x2a>
 8009dcc:	bd10      	pop	{r4, pc}
 8009dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009dd6:	e7f7      	b.n	8009dc8 <memmove+0x24>

08009dd8 <strncmp>:
 8009dd8:	b510      	push	{r4, lr}
 8009dda:	b16a      	cbz	r2, 8009df8 <strncmp+0x20>
 8009ddc:	3901      	subs	r1, #1
 8009dde:	1884      	adds	r4, r0, r2
 8009de0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d103      	bne.n	8009df4 <strncmp+0x1c>
 8009dec:	42a0      	cmp	r0, r4
 8009dee:	d001      	beq.n	8009df4 <strncmp+0x1c>
 8009df0:	2a00      	cmp	r2, #0
 8009df2:	d1f5      	bne.n	8009de0 <strncmp+0x8>
 8009df4:	1ad0      	subs	r0, r2, r3
 8009df6:	bd10      	pop	{r4, pc}
 8009df8:	4610      	mov	r0, r2
 8009dfa:	e7fc      	b.n	8009df6 <strncmp+0x1e>

08009dfc <_sbrk_r>:
 8009dfc:	b538      	push	{r3, r4, r5, lr}
 8009dfe:	4d06      	ldr	r5, [pc, #24]	@ (8009e18 <_sbrk_r+0x1c>)
 8009e00:	2300      	movs	r3, #0
 8009e02:	4604      	mov	r4, r0
 8009e04:	4608      	mov	r0, r1
 8009e06:	602b      	str	r3, [r5, #0]
 8009e08:	f7f8 fb32 	bl	8002470 <_sbrk>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_sbrk_r+0x1a>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_sbrk_r+0x1a>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	20000be8 	.word	0x20000be8

08009e1c <memcpy>:
 8009e1c:	440a      	add	r2, r1
 8009e1e:	4291      	cmp	r1, r2
 8009e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e24:	d100      	bne.n	8009e28 <memcpy+0xc>
 8009e26:	4770      	bx	lr
 8009e28:	b510      	push	{r4, lr}
 8009e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e32:	4291      	cmp	r1, r2
 8009e34:	d1f9      	bne.n	8009e2a <memcpy+0xe>
 8009e36:	bd10      	pop	{r4, pc}

08009e38 <nan>:
 8009e38:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009e40 <nan+0x8>
 8009e3c:	4770      	bx	lr
 8009e3e:	bf00      	nop
 8009e40:	00000000 	.word	0x00000000
 8009e44:	7ff80000 	.word	0x7ff80000

08009e48 <__assert_func>:
 8009e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e4a:	4614      	mov	r4, r2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	4b09      	ldr	r3, [pc, #36]	@ (8009e74 <__assert_func+0x2c>)
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	4605      	mov	r5, r0
 8009e54:	68d8      	ldr	r0, [r3, #12]
 8009e56:	b954      	cbnz	r4, 8009e6e <__assert_func+0x26>
 8009e58:	4b07      	ldr	r3, [pc, #28]	@ (8009e78 <__assert_func+0x30>)
 8009e5a:	461c      	mov	r4, r3
 8009e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e60:	9100      	str	r1, [sp, #0]
 8009e62:	462b      	mov	r3, r5
 8009e64:	4905      	ldr	r1, [pc, #20]	@ (8009e7c <__assert_func+0x34>)
 8009e66:	f000 fba7 	bl	800a5b8 <fiprintf>
 8009e6a:	f000 fbb7 	bl	800a5dc <abort>
 8009e6e:	4b04      	ldr	r3, [pc, #16]	@ (8009e80 <__assert_func+0x38>)
 8009e70:	e7f4      	b.n	8009e5c <__assert_func+0x14>
 8009e72:	bf00      	nop
 8009e74:	2000001c 	.word	0x2000001c
 8009e78:	0800b07d 	.word	0x0800b07d
 8009e7c:	0800b04f 	.word	0x0800b04f
 8009e80:	0800b042 	.word	0x0800b042

08009e84 <_calloc_r>:
 8009e84:	b570      	push	{r4, r5, r6, lr}
 8009e86:	fba1 5402 	umull	r5, r4, r1, r2
 8009e8a:	b93c      	cbnz	r4, 8009e9c <_calloc_r+0x18>
 8009e8c:	4629      	mov	r1, r5
 8009e8e:	f7fe f9c3 	bl	8008218 <_malloc_r>
 8009e92:	4606      	mov	r6, r0
 8009e94:	b928      	cbnz	r0, 8009ea2 <_calloc_r+0x1e>
 8009e96:	2600      	movs	r6, #0
 8009e98:	4630      	mov	r0, r6
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	220c      	movs	r2, #12
 8009e9e:	6002      	str	r2, [r0, #0]
 8009ea0:	e7f9      	b.n	8009e96 <_calloc_r+0x12>
 8009ea2:	462a      	mov	r2, r5
 8009ea4:	4621      	mov	r1, r4
 8009ea6:	f7fd fa6e 	bl	8007386 <memset>
 8009eaa:	e7f5      	b.n	8009e98 <_calloc_r+0x14>

08009eac <rshift>:
 8009eac:	6903      	ldr	r3, [r0, #16]
 8009eae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009eb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009eb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009eba:	f100 0414 	add.w	r4, r0, #20
 8009ebe:	dd45      	ble.n	8009f4c <rshift+0xa0>
 8009ec0:	f011 011f 	ands.w	r1, r1, #31
 8009ec4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ec8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009ecc:	d10c      	bne.n	8009ee8 <rshift+0x3c>
 8009ece:	f100 0710 	add.w	r7, r0, #16
 8009ed2:	4629      	mov	r1, r5
 8009ed4:	42b1      	cmp	r1, r6
 8009ed6:	d334      	bcc.n	8009f42 <rshift+0x96>
 8009ed8:	1a9b      	subs	r3, r3, r2
 8009eda:	009b      	lsls	r3, r3, #2
 8009edc:	1eea      	subs	r2, r5, #3
 8009ede:	4296      	cmp	r6, r2
 8009ee0:	bf38      	it	cc
 8009ee2:	2300      	movcc	r3, #0
 8009ee4:	4423      	add	r3, r4
 8009ee6:	e015      	b.n	8009f14 <rshift+0x68>
 8009ee8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009eec:	f1c1 0820 	rsb	r8, r1, #32
 8009ef0:	40cf      	lsrs	r7, r1
 8009ef2:	f105 0e04 	add.w	lr, r5, #4
 8009ef6:	46a1      	mov	r9, r4
 8009ef8:	4576      	cmp	r6, lr
 8009efa:	46f4      	mov	ip, lr
 8009efc:	d815      	bhi.n	8009f2a <rshift+0x7e>
 8009efe:	1a9a      	subs	r2, r3, r2
 8009f00:	0092      	lsls	r2, r2, #2
 8009f02:	3a04      	subs	r2, #4
 8009f04:	3501      	adds	r5, #1
 8009f06:	42ae      	cmp	r6, r5
 8009f08:	bf38      	it	cc
 8009f0a:	2200      	movcc	r2, #0
 8009f0c:	18a3      	adds	r3, r4, r2
 8009f0e:	50a7      	str	r7, [r4, r2]
 8009f10:	b107      	cbz	r7, 8009f14 <rshift+0x68>
 8009f12:	3304      	adds	r3, #4
 8009f14:	1b1a      	subs	r2, r3, r4
 8009f16:	42a3      	cmp	r3, r4
 8009f18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f1c:	bf08      	it	eq
 8009f1e:	2300      	moveq	r3, #0
 8009f20:	6102      	str	r2, [r0, #16]
 8009f22:	bf08      	it	eq
 8009f24:	6143      	streq	r3, [r0, #20]
 8009f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2a:	f8dc c000 	ldr.w	ip, [ip]
 8009f2e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f32:	ea4c 0707 	orr.w	r7, ip, r7
 8009f36:	f849 7b04 	str.w	r7, [r9], #4
 8009f3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009f3e:	40cf      	lsrs	r7, r1
 8009f40:	e7da      	b.n	8009ef8 <rshift+0x4c>
 8009f42:	f851 cb04 	ldr.w	ip, [r1], #4
 8009f46:	f847 cf04 	str.w	ip, [r7, #4]!
 8009f4a:	e7c3      	b.n	8009ed4 <rshift+0x28>
 8009f4c:	4623      	mov	r3, r4
 8009f4e:	e7e1      	b.n	8009f14 <rshift+0x68>

08009f50 <__hexdig_fun>:
 8009f50:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009f54:	2b09      	cmp	r3, #9
 8009f56:	d802      	bhi.n	8009f5e <__hexdig_fun+0xe>
 8009f58:	3820      	subs	r0, #32
 8009f5a:	b2c0      	uxtb	r0, r0
 8009f5c:	4770      	bx	lr
 8009f5e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009f62:	2b05      	cmp	r3, #5
 8009f64:	d801      	bhi.n	8009f6a <__hexdig_fun+0x1a>
 8009f66:	3847      	subs	r0, #71	@ 0x47
 8009f68:	e7f7      	b.n	8009f5a <__hexdig_fun+0xa>
 8009f6a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009f6e:	2b05      	cmp	r3, #5
 8009f70:	d801      	bhi.n	8009f76 <__hexdig_fun+0x26>
 8009f72:	3827      	subs	r0, #39	@ 0x27
 8009f74:	e7f1      	b.n	8009f5a <__hexdig_fun+0xa>
 8009f76:	2000      	movs	r0, #0
 8009f78:	4770      	bx	lr
	...

08009f7c <__gethex>:
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	b085      	sub	sp, #20
 8009f82:	468a      	mov	sl, r1
 8009f84:	9302      	str	r3, [sp, #8]
 8009f86:	680b      	ldr	r3, [r1, #0]
 8009f88:	9001      	str	r0, [sp, #4]
 8009f8a:	4690      	mov	r8, r2
 8009f8c:	1c9c      	adds	r4, r3, #2
 8009f8e:	46a1      	mov	r9, r4
 8009f90:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009f94:	2830      	cmp	r0, #48	@ 0x30
 8009f96:	d0fa      	beq.n	8009f8e <__gethex+0x12>
 8009f98:	eba9 0303 	sub.w	r3, r9, r3
 8009f9c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009fa0:	f7ff ffd6 	bl	8009f50 <__hexdig_fun>
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	2800      	cmp	r0, #0
 8009fa8:	d168      	bne.n	800a07c <__gethex+0x100>
 8009faa:	49a0      	ldr	r1, [pc, #640]	@ (800a22c <__gethex+0x2b0>)
 8009fac:	2201      	movs	r2, #1
 8009fae:	4648      	mov	r0, r9
 8009fb0:	f7ff ff12 	bl	8009dd8 <strncmp>
 8009fb4:	4607      	mov	r7, r0
 8009fb6:	2800      	cmp	r0, #0
 8009fb8:	d167      	bne.n	800a08a <__gethex+0x10e>
 8009fba:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009fbe:	4626      	mov	r6, r4
 8009fc0:	f7ff ffc6 	bl	8009f50 <__hexdig_fun>
 8009fc4:	2800      	cmp	r0, #0
 8009fc6:	d062      	beq.n	800a08e <__gethex+0x112>
 8009fc8:	4623      	mov	r3, r4
 8009fca:	7818      	ldrb	r0, [r3, #0]
 8009fcc:	2830      	cmp	r0, #48	@ 0x30
 8009fce:	4699      	mov	r9, r3
 8009fd0:	f103 0301 	add.w	r3, r3, #1
 8009fd4:	d0f9      	beq.n	8009fca <__gethex+0x4e>
 8009fd6:	f7ff ffbb 	bl	8009f50 <__hexdig_fun>
 8009fda:	fab0 f580 	clz	r5, r0
 8009fde:	096d      	lsrs	r5, r5, #5
 8009fe0:	f04f 0b01 	mov.w	fp, #1
 8009fe4:	464a      	mov	r2, r9
 8009fe6:	4616      	mov	r6, r2
 8009fe8:	3201      	adds	r2, #1
 8009fea:	7830      	ldrb	r0, [r6, #0]
 8009fec:	f7ff ffb0 	bl	8009f50 <__hexdig_fun>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d1f8      	bne.n	8009fe6 <__gethex+0x6a>
 8009ff4:	498d      	ldr	r1, [pc, #564]	@ (800a22c <__gethex+0x2b0>)
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f7ff feed 	bl	8009dd8 <strncmp>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d13f      	bne.n	800a082 <__gethex+0x106>
 800a002:	b944      	cbnz	r4, 800a016 <__gethex+0x9a>
 800a004:	1c74      	adds	r4, r6, #1
 800a006:	4622      	mov	r2, r4
 800a008:	4616      	mov	r6, r2
 800a00a:	3201      	adds	r2, #1
 800a00c:	7830      	ldrb	r0, [r6, #0]
 800a00e:	f7ff ff9f 	bl	8009f50 <__hexdig_fun>
 800a012:	2800      	cmp	r0, #0
 800a014:	d1f8      	bne.n	800a008 <__gethex+0x8c>
 800a016:	1ba4      	subs	r4, r4, r6
 800a018:	00a7      	lsls	r7, r4, #2
 800a01a:	7833      	ldrb	r3, [r6, #0]
 800a01c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a020:	2b50      	cmp	r3, #80	@ 0x50
 800a022:	d13e      	bne.n	800a0a2 <__gethex+0x126>
 800a024:	7873      	ldrb	r3, [r6, #1]
 800a026:	2b2b      	cmp	r3, #43	@ 0x2b
 800a028:	d033      	beq.n	800a092 <__gethex+0x116>
 800a02a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a02c:	d034      	beq.n	800a098 <__gethex+0x11c>
 800a02e:	1c71      	adds	r1, r6, #1
 800a030:	2400      	movs	r4, #0
 800a032:	7808      	ldrb	r0, [r1, #0]
 800a034:	f7ff ff8c 	bl	8009f50 <__hexdig_fun>
 800a038:	1e43      	subs	r3, r0, #1
 800a03a:	b2db      	uxtb	r3, r3
 800a03c:	2b18      	cmp	r3, #24
 800a03e:	d830      	bhi.n	800a0a2 <__gethex+0x126>
 800a040:	f1a0 0210 	sub.w	r2, r0, #16
 800a044:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a048:	f7ff ff82 	bl	8009f50 <__hexdig_fun>
 800a04c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a050:	fa5f fc8c 	uxtb.w	ip, ip
 800a054:	f1bc 0f18 	cmp.w	ip, #24
 800a058:	f04f 030a 	mov.w	r3, #10
 800a05c:	d91e      	bls.n	800a09c <__gethex+0x120>
 800a05e:	b104      	cbz	r4, 800a062 <__gethex+0xe6>
 800a060:	4252      	negs	r2, r2
 800a062:	4417      	add	r7, r2
 800a064:	f8ca 1000 	str.w	r1, [sl]
 800a068:	b1ed      	cbz	r5, 800a0a6 <__gethex+0x12a>
 800a06a:	f1bb 0f00 	cmp.w	fp, #0
 800a06e:	bf0c      	ite	eq
 800a070:	2506      	moveq	r5, #6
 800a072:	2500      	movne	r5, #0
 800a074:	4628      	mov	r0, r5
 800a076:	b005      	add	sp, #20
 800a078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	2500      	movs	r5, #0
 800a07e:	462c      	mov	r4, r5
 800a080:	e7b0      	b.n	8009fe4 <__gethex+0x68>
 800a082:	2c00      	cmp	r4, #0
 800a084:	d1c7      	bne.n	800a016 <__gethex+0x9a>
 800a086:	4627      	mov	r7, r4
 800a088:	e7c7      	b.n	800a01a <__gethex+0x9e>
 800a08a:	464e      	mov	r6, r9
 800a08c:	462f      	mov	r7, r5
 800a08e:	2501      	movs	r5, #1
 800a090:	e7c3      	b.n	800a01a <__gethex+0x9e>
 800a092:	2400      	movs	r4, #0
 800a094:	1cb1      	adds	r1, r6, #2
 800a096:	e7cc      	b.n	800a032 <__gethex+0xb6>
 800a098:	2401      	movs	r4, #1
 800a09a:	e7fb      	b.n	800a094 <__gethex+0x118>
 800a09c:	fb03 0002 	mla	r0, r3, r2, r0
 800a0a0:	e7ce      	b.n	800a040 <__gethex+0xc4>
 800a0a2:	4631      	mov	r1, r6
 800a0a4:	e7de      	b.n	800a064 <__gethex+0xe8>
 800a0a6:	eba6 0309 	sub.w	r3, r6, r9
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	4629      	mov	r1, r5
 800a0ae:	2b07      	cmp	r3, #7
 800a0b0:	dc0a      	bgt.n	800a0c8 <__gethex+0x14c>
 800a0b2:	9801      	ldr	r0, [sp, #4]
 800a0b4:	f7fe f93c 	bl	8008330 <_Balloc>
 800a0b8:	4604      	mov	r4, r0
 800a0ba:	b940      	cbnz	r0, 800a0ce <__gethex+0x152>
 800a0bc:	4b5c      	ldr	r3, [pc, #368]	@ (800a230 <__gethex+0x2b4>)
 800a0be:	4602      	mov	r2, r0
 800a0c0:	21e4      	movs	r1, #228	@ 0xe4
 800a0c2:	485c      	ldr	r0, [pc, #368]	@ (800a234 <__gethex+0x2b8>)
 800a0c4:	f7ff fec0 	bl	8009e48 <__assert_func>
 800a0c8:	3101      	adds	r1, #1
 800a0ca:	105b      	asrs	r3, r3, #1
 800a0cc:	e7ef      	b.n	800a0ae <__gethex+0x132>
 800a0ce:	f100 0a14 	add.w	sl, r0, #20
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4655      	mov	r5, sl
 800a0d6:	469b      	mov	fp, r3
 800a0d8:	45b1      	cmp	r9, r6
 800a0da:	d337      	bcc.n	800a14c <__gethex+0x1d0>
 800a0dc:	f845 bb04 	str.w	fp, [r5], #4
 800a0e0:	eba5 050a 	sub.w	r5, r5, sl
 800a0e4:	10ad      	asrs	r5, r5, #2
 800a0e6:	6125      	str	r5, [r4, #16]
 800a0e8:	4658      	mov	r0, fp
 800a0ea:	f7fe fa13 	bl	8008514 <__hi0bits>
 800a0ee:	016d      	lsls	r5, r5, #5
 800a0f0:	f8d8 6000 	ldr.w	r6, [r8]
 800a0f4:	1a2d      	subs	r5, r5, r0
 800a0f6:	42b5      	cmp	r5, r6
 800a0f8:	dd54      	ble.n	800a1a4 <__gethex+0x228>
 800a0fa:	1bad      	subs	r5, r5, r6
 800a0fc:	4629      	mov	r1, r5
 800a0fe:	4620      	mov	r0, r4
 800a100:	f7fe fda7 	bl	8008c52 <__any_on>
 800a104:	4681      	mov	r9, r0
 800a106:	b178      	cbz	r0, 800a128 <__gethex+0x1ac>
 800a108:	1e6b      	subs	r3, r5, #1
 800a10a:	1159      	asrs	r1, r3, #5
 800a10c:	f003 021f 	and.w	r2, r3, #31
 800a110:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a114:	f04f 0901 	mov.w	r9, #1
 800a118:	fa09 f202 	lsl.w	r2, r9, r2
 800a11c:	420a      	tst	r2, r1
 800a11e:	d003      	beq.n	800a128 <__gethex+0x1ac>
 800a120:	454b      	cmp	r3, r9
 800a122:	dc36      	bgt.n	800a192 <__gethex+0x216>
 800a124:	f04f 0902 	mov.w	r9, #2
 800a128:	4629      	mov	r1, r5
 800a12a:	4620      	mov	r0, r4
 800a12c:	f7ff febe 	bl	8009eac <rshift>
 800a130:	442f      	add	r7, r5
 800a132:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a136:	42bb      	cmp	r3, r7
 800a138:	da42      	bge.n	800a1c0 <__gethex+0x244>
 800a13a:	9801      	ldr	r0, [sp, #4]
 800a13c:	4621      	mov	r1, r4
 800a13e:	f7fe f937 	bl	80083b0 <_Bfree>
 800a142:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a144:	2300      	movs	r3, #0
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	25a3      	movs	r5, #163	@ 0xa3
 800a14a:	e793      	b.n	800a074 <__gethex+0xf8>
 800a14c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a150:	2a2e      	cmp	r2, #46	@ 0x2e
 800a152:	d012      	beq.n	800a17a <__gethex+0x1fe>
 800a154:	2b20      	cmp	r3, #32
 800a156:	d104      	bne.n	800a162 <__gethex+0x1e6>
 800a158:	f845 bb04 	str.w	fp, [r5], #4
 800a15c:	f04f 0b00 	mov.w	fp, #0
 800a160:	465b      	mov	r3, fp
 800a162:	7830      	ldrb	r0, [r6, #0]
 800a164:	9303      	str	r3, [sp, #12]
 800a166:	f7ff fef3 	bl	8009f50 <__hexdig_fun>
 800a16a:	9b03      	ldr	r3, [sp, #12]
 800a16c:	f000 000f 	and.w	r0, r0, #15
 800a170:	4098      	lsls	r0, r3
 800a172:	ea4b 0b00 	orr.w	fp, fp, r0
 800a176:	3304      	adds	r3, #4
 800a178:	e7ae      	b.n	800a0d8 <__gethex+0x15c>
 800a17a:	45b1      	cmp	r9, r6
 800a17c:	d8ea      	bhi.n	800a154 <__gethex+0x1d8>
 800a17e:	492b      	ldr	r1, [pc, #172]	@ (800a22c <__gethex+0x2b0>)
 800a180:	9303      	str	r3, [sp, #12]
 800a182:	2201      	movs	r2, #1
 800a184:	4630      	mov	r0, r6
 800a186:	f7ff fe27 	bl	8009dd8 <strncmp>
 800a18a:	9b03      	ldr	r3, [sp, #12]
 800a18c:	2800      	cmp	r0, #0
 800a18e:	d1e1      	bne.n	800a154 <__gethex+0x1d8>
 800a190:	e7a2      	b.n	800a0d8 <__gethex+0x15c>
 800a192:	1ea9      	subs	r1, r5, #2
 800a194:	4620      	mov	r0, r4
 800a196:	f7fe fd5c 	bl	8008c52 <__any_on>
 800a19a:	2800      	cmp	r0, #0
 800a19c:	d0c2      	beq.n	800a124 <__gethex+0x1a8>
 800a19e:	f04f 0903 	mov.w	r9, #3
 800a1a2:	e7c1      	b.n	800a128 <__gethex+0x1ac>
 800a1a4:	da09      	bge.n	800a1ba <__gethex+0x23e>
 800a1a6:	1b75      	subs	r5, r6, r5
 800a1a8:	4621      	mov	r1, r4
 800a1aa:	9801      	ldr	r0, [sp, #4]
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	f7fe fb17 	bl	80087e0 <__lshift>
 800a1b2:	1b7f      	subs	r7, r7, r5
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	f100 0a14 	add.w	sl, r0, #20
 800a1ba:	f04f 0900 	mov.w	r9, #0
 800a1be:	e7b8      	b.n	800a132 <__gethex+0x1b6>
 800a1c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a1c4:	42bd      	cmp	r5, r7
 800a1c6:	dd6f      	ble.n	800a2a8 <__gethex+0x32c>
 800a1c8:	1bed      	subs	r5, r5, r7
 800a1ca:	42ae      	cmp	r6, r5
 800a1cc:	dc34      	bgt.n	800a238 <__gethex+0x2bc>
 800a1ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1d2:	2b02      	cmp	r3, #2
 800a1d4:	d022      	beq.n	800a21c <__gethex+0x2a0>
 800a1d6:	2b03      	cmp	r3, #3
 800a1d8:	d024      	beq.n	800a224 <__gethex+0x2a8>
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d115      	bne.n	800a20a <__gethex+0x28e>
 800a1de:	42ae      	cmp	r6, r5
 800a1e0:	d113      	bne.n	800a20a <__gethex+0x28e>
 800a1e2:	2e01      	cmp	r6, #1
 800a1e4:	d10b      	bne.n	800a1fe <__gethex+0x282>
 800a1e6:	9a02      	ldr	r2, [sp, #8]
 800a1e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	6123      	str	r3, [r4, #16]
 800a1f2:	f8ca 3000 	str.w	r3, [sl]
 800a1f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a1f8:	2562      	movs	r5, #98	@ 0x62
 800a1fa:	601c      	str	r4, [r3, #0]
 800a1fc:	e73a      	b.n	800a074 <__gethex+0xf8>
 800a1fe:	1e71      	subs	r1, r6, #1
 800a200:	4620      	mov	r0, r4
 800a202:	f7fe fd26 	bl	8008c52 <__any_on>
 800a206:	2800      	cmp	r0, #0
 800a208:	d1ed      	bne.n	800a1e6 <__gethex+0x26a>
 800a20a:	9801      	ldr	r0, [sp, #4]
 800a20c:	4621      	mov	r1, r4
 800a20e:	f7fe f8cf 	bl	80083b0 <_Bfree>
 800a212:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a214:	2300      	movs	r3, #0
 800a216:	6013      	str	r3, [r2, #0]
 800a218:	2550      	movs	r5, #80	@ 0x50
 800a21a:	e72b      	b.n	800a074 <__gethex+0xf8>
 800a21c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d1f3      	bne.n	800a20a <__gethex+0x28e>
 800a222:	e7e0      	b.n	800a1e6 <__gethex+0x26a>
 800a224:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1dd      	bne.n	800a1e6 <__gethex+0x26a>
 800a22a:	e7ee      	b.n	800a20a <__gethex+0x28e>
 800a22c:	0800aed0 	.word	0x0800aed0
 800a230:	0800ad65 	.word	0x0800ad65
 800a234:	0800b07e 	.word	0x0800b07e
 800a238:	1e6f      	subs	r7, r5, #1
 800a23a:	f1b9 0f00 	cmp.w	r9, #0
 800a23e:	d130      	bne.n	800a2a2 <__gethex+0x326>
 800a240:	b127      	cbz	r7, 800a24c <__gethex+0x2d0>
 800a242:	4639      	mov	r1, r7
 800a244:	4620      	mov	r0, r4
 800a246:	f7fe fd04 	bl	8008c52 <__any_on>
 800a24a:	4681      	mov	r9, r0
 800a24c:	117a      	asrs	r2, r7, #5
 800a24e:	2301      	movs	r3, #1
 800a250:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a254:	f007 071f 	and.w	r7, r7, #31
 800a258:	40bb      	lsls	r3, r7
 800a25a:	4213      	tst	r3, r2
 800a25c:	4629      	mov	r1, r5
 800a25e:	4620      	mov	r0, r4
 800a260:	bf18      	it	ne
 800a262:	f049 0902 	orrne.w	r9, r9, #2
 800a266:	f7ff fe21 	bl	8009eac <rshift>
 800a26a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a26e:	1b76      	subs	r6, r6, r5
 800a270:	2502      	movs	r5, #2
 800a272:	f1b9 0f00 	cmp.w	r9, #0
 800a276:	d047      	beq.n	800a308 <__gethex+0x38c>
 800a278:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d015      	beq.n	800a2ac <__gethex+0x330>
 800a280:	2b03      	cmp	r3, #3
 800a282:	d017      	beq.n	800a2b4 <__gethex+0x338>
 800a284:	2b01      	cmp	r3, #1
 800a286:	d109      	bne.n	800a29c <__gethex+0x320>
 800a288:	f019 0f02 	tst.w	r9, #2
 800a28c:	d006      	beq.n	800a29c <__gethex+0x320>
 800a28e:	f8da 3000 	ldr.w	r3, [sl]
 800a292:	ea49 0903 	orr.w	r9, r9, r3
 800a296:	f019 0f01 	tst.w	r9, #1
 800a29a:	d10e      	bne.n	800a2ba <__gethex+0x33e>
 800a29c:	f045 0510 	orr.w	r5, r5, #16
 800a2a0:	e032      	b.n	800a308 <__gethex+0x38c>
 800a2a2:	f04f 0901 	mov.w	r9, #1
 800a2a6:	e7d1      	b.n	800a24c <__gethex+0x2d0>
 800a2a8:	2501      	movs	r5, #1
 800a2aa:	e7e2      	b.n	800a272 <__gethex+0x2f6>
 800a2ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2ae:	f1c3 0301 	rsb	r3, r3, #1
 800a2b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a2b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0f0      	beq.n	800a29c <__gethex+0x320>
 800a2ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a2be:	f104 0314 	add.w	r3, r4, #20
 800a2c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a2c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a2ca:	f04f 0c00 	mov.w	ip, #0
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a2d8:	d01b      	beq.n	800a312 <__gethex+0x396>
 800a2da:	3201      	adds	r2, #1
 800a2dc:	6002      	str	r2, [r0, #0]
 800a2de:	2d02      	cmp	r5, #2
 800a2e0:	f104 0314 	add.w	r3, r4, #20
 800a2e4:	d13c      	bne.n	800a360 <__gethex+0x3e4>
 800a2e6:	f8d8 2000 	ldr.w	r2, [r8]
 800a2ea:	3a01      	subs	r2, #1
 800a2ec:	42b2      	cmp	r2, r6
 800a2ee:	d109      	bne.n	800a304 <__gethex+0x388>
 800a2f0:	1171      	asrs	r1, r6, #5
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a2f8:	f006 061f 	and.w	r6, r6, #31
 800a2fc:	fa02 f606 	lsl.w	r6, r2, r6
 800a300:	421e      	tst	r6, r3
 800a302:	d13a      	bne.n	800a37a <__gethex+0x3fe>
 800a304:	f045 0520 	orr.w	r5, r5, #32
 800a308:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a30a:	601c      	str	r4, [r3, #0]
 800a30c:	9b02      	ldr	r3, [sp, #8]
 800a30e:	601f      	str	r7, [r3, #0]
 800a310:	e6b0      	b.n	800a074 <__gethex+0xf8>
 800a312:	4299      	cmp	r1, r3
 800a314:	f843 cc04 	str.w	ip, [r3, #-4]
 800a318:	d8d9      	bhi.n	800a2ce <__gethex+0x352>
 800a31a:	68a3      	ldr	r3, [r4, #8]
 800a31c:	459b      	cmp	fp, r3
 800a31e:	db17      	blt.n	800a350 <__gethex+0x3d4>
 800a320:	6861      	ldr	r1, [r4, #4]
 800a322:	9801      	ldr	r0, [sp, #4]
 800a324:	3101      	adds	r1, #1
 800a326:	f7fe f803 	bl	8008330 <_Balloc>
 800a32a:	4681      	mov	r9, r0
 800a32c:	b918      	cbnz	r0, 800a336 <__gethex+0x3ba>
 800a32e:	4b1a      	ldr	r3, [pc, #104]	@ (800a398 <__gethex+0x41c>)
 800a330:	4602      	mov	r2, r0
 800a332:	2184      	movs	r1, #132	@ 0x84
 800a334:	e6c5      	b.n	800a0c2 <__gethex+0x146>
 800a336:	6922      	ldr	r2, [r4, #16]
 800a338:	3202      	adds	r2, #2
 800a33a:	f104 010c 	add.w	r1, r4, #12
 800a33e:	0092      	lsls	r2, r2, #2
 800a340:	300c      	adds	r0, #12
 800a342:	f7ff fd6b 	bl	8009e1c <memcpy>
 800a346:	4621      	mov	r1, r4
 800a348:	9801      	ldr	r0, [sp, #4]
 800a34a:	f7fe f831 	bl	80083b0 <_Bfree>
 800a34e:	464c      	mov	r4, r9
 800a350:	6923      	ldr	r3, [r4, #16]
 800a352:	1c5a      	adds	r2, r3, #1
 800a354:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a358:	6122      	str	r2, [r4, #16]
 800a35a:	2201      	movs	r2, #1
 800a35c:	615a      	str	r2, [r3, #20]
 800a35e:	e7be      	b.n	800a2de <__gethex+0x362>
 800a360:	6922      	ldr	r2, [r4, #16]
 800a362:	455a      	cmp	r2, fp
 800a364:	dd0b      	ble.n	800a37e <__gethex+0x402>
 800a366:	2101      	movs	r1, #1
 800a368:	4620      	mov	r0, r4
 800a36a:	f7ff fd9f 	bl	8009eac <rshift>
 800a36e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a372:	3701      	adds	r7, #1
 800a374:	42bb      	cmp	r3, r7
 800a376:	f6ff aee0 	blt.w	800a13a <__gethex+0x1be>
 800a37a:	2501      	movs	r5, #1
 800a37c:	e7c2      	b.n	800a304 <__gethex+0x388>
 800a37e:	f016 061f 	ands.w	r6, r6, #31
 800a382:	d0fa      	beq.n	800a37a <__gethex+0x3fe>
 800a384:	4453      	add	r3, sl
 800a386:	f1c6 0620 	rsb	r6, r6, #32
 800a38a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a38e:	f7fe f8c1 	bl	8008514 <__hi0bits>
 800a392:	42b0      	cmp	r0, r6
 800a394:	dbe7      	blt.n	800a366 <__gethex+0x3ea>
 800a396:	e7f0      	b.n	800a37a <__gethex+0x3fe>
 800a398:	0800ad65 	.word	0x0800ad65

0800a39c <L_shift>:
 800a39c:	f1c2 0208 	rsb	r2, r2, #8
 800a3a0:	0092      	lsls	r2, r2, #2
 800a3a2:	b570      	push	{r4, r5, r6, lr}
 800a3a4:	f1c2 0620 	rsb	r6, r2, #32
 800a3a8:	6843      	ldr	r3, [r0, #4]
 800a3aa:	6804      	ldr	r4, [r0, #0]
 800a3ac:	fa03 f506 	lsl.w	r5, r3, r6
 800a3b0:	432c      	orrs	r4, r5
 800a3b2:	40d3      	lsrs	r3, r2
 800a3b4:	6004      	str	r4, [r0, #0]
 800a3b6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a3ba:	4288      	cmp	r0, r1
 800a3bc:	d3f4      	bcc.n	800a3a8 <L_shift+0xc>
 800a3be:	bd70      	pop	{r4, r5, r6, pc}

0800a3c0 <__match>:
 800a3c0:	b530      	push	{r4, r5, lr}
 800a3c2:	6803      	ldr	r3, [r0, #0]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a3ca:	b914      	cbnz	r4, 800a3d2 <__match+0x12>
 800a3cc:	6003      	str	r3, [r0, #0]
 800a3ce:	2001      	movs	r0, #1
 800a3d0:	bd30      	pop	{r4, r5, pc}
 800a3d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a3da:	2d19      	cmp	r5, #25
 800a3dc:	bf98      	it	ls
 800a3de:	3220      	addls	r2, #32
 800a3e0:	42a2      	cmp	r2, r4
 800a3e2:	d0f0      	beq.n	800a3c6 <__match+0x6>
 800a3e4:	2000      	movs	r0, #0
 800a3e6:	e7f3      	b.n	800a3d0 <__match+0x10>

0800a3e8 <__hexnan>:
 800a3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3ec:	680b      	ldr	r3, [r1, #0]
 800a3ee:	6801      	ldr	r1, [r0, #0]
 800a3f0:	115e      	asrs	r6, r3, #5
 800a3f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a3f6:	f013 031f 	ands.w	r3, r3, #31
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	bf18      	it	ne
 800a3fe:	3604      	addne	r6, #4
 800a400:	2500      	movs	r5, #0
 800a402:	1f37      	subs	r7, r6, #4
 800a404:	4682      	mov	sl, r0
 800a406:	4690      	mov	r8, r2
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a40e:	46b9      	mov	r9, r7
 800a410:	463c      	mov	r4, r7
 800a412:	9502      	str	r5, [sp, #8]
 800a414:	46ab      	mov	fp, r5
 800a416:	784a      	ldrb	r2, [r1, #1]
 800a418:	1c4b      	adds	r3, r1, #1
 800a41a:	9303      	str	r3, [sp, #12]
 800a41c:	b342      	cbz	r2, 800a470 <__hexnan+0x88>
 800a41e:	4610      	mov	r0, r2
 800a420:	9105      	str	r1, [sp, #20]
 800a422:	9204      	str	r2, [sp, #16]
 800a424:	f7ff fd94 	bl	8009f50 <__hexdig_fun>
 800a428:	2800      	cmp	r0, #0
 800a42a:	d151      	bne.n	800a4d0 <__hexnan+0xe8>
 800a42c:	9a04      	ldr	r2, [sp, #16]
 800a42e:	9905      	ldr	r1, [sp, #20]
 800a430:	2a20      	cmp	r2, #32
 800a432:	d818      	bhi.n	800a466 <__hexnan+0x7e>
 800a434:	9b02      	ldr	r3, [sp, #8]
 800a436:	459b      	cmp	fp, r3
 800a438:	dd13      	ble.n	800a462 <__hexnan+0x7a>
 800a43a:	454c      	cmp	r4, r9
 800a43c:	d206      	bcs.n	800a44c <__hexnan+0x64>
 800a43e:	2d07      	cmp	r5, #7
 800a440:	dc04      	bgt.n	800a44c <__hexnan+0x64>
 800a442:	462a      	mov	r2, r5
 800a444:	4649      	mov	r1, r9
 800a446:	4620      	mov	r0, r4
 800a448:	f7ff ffa8 	bl	800a39c <L_shift>
 800a44c:	4544      	cmp	r4, r8
 800a44e:	d952      	bls.n	800a4f6 <__hexnan+0x10e>
 800a450:	2300      	movs	r3, #0
 800a452:	f1a4 0904 	sub.w	r9, r4, #4
 800a456:	f844 3c04 	str.w	r3, [r4, #-4]
 800a45a:	f8cd b008 	str.w	fp, [sp, #8]
 800a45e:	464c      	mov	r4, r9
 800a460:	461d      	mov	r5, r3
 800a462:	9903      	ldr	r1, [sp, #12]
 800a464:	e7d7      	b.n	800a416 <__hexnan+0x2e>
 800a466:	2a29      	cmp	r2, #41	@ 0x29
 800a468:	d157      	bne.n	800a51a <__hexnan+0x132>
 800a46a:	3102      	adds	r1, #2
 800a46c:	f8ca 1000 	str.w	r1, [sl]
 800a470:	f1bb 0f00 	cmp.w	fp, #0
 800a474:	d051      	beq.n	800a51a <__hexnan+0x132>
 800a476:	454c      	cmp	r4, r9
 800a478:	d206      	bcs.n	800a488 <__hexnan+0xa0>
 800a47a:	2d07      	cmp	r5, #7
 800a47c:	dc04      	bgt.n	800a488 <__hexnan+0xa0>
 800a47e:	462a      	mov	r2, r5
 800a480:	4649      	mov	r1, r9
 800a482:	4620      	mov	r0, r4
 800a484:	f7ff ff8a 	bl	800a39c <L_shift>
 800a488:	4544      	cmp	r4, r8
 800a48a:	d936      	bls.n	800a4fa <__hexnan+0x112>
 800a48c:	f1a8 0204 	sub.w	r2, r8, #4
 800a490:	4623      	mov	r3, r4
 800a492:	f853 1b04 	ldr.w	r1, [r3], #4
 800a496:	f842 1f04 	str.w	r1, [r2, #4]!
 800a49a:	429f      	cmp	r7, r3
 800a49c:	d2f9      	bcs.n	800a492 <__hexnan+0xaa>
 800a49e:	1b3b      	subs	r3, r7, r4
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	3304      	adds	r3, #4
 800a4a6:	3401      	adds	r4, #1
 800a4a8:	3e03      	subs	r6, #3
 800a4aa:	42b4      	cmp	r4, r6
 800a4ac:	bf88      	it	hi
 800a4ae:	2304      	movhi	r3, #4
 800a4b0:	4443      	add	r3, r8
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f843 2b04 	str.w	r2, [r3], #4
 800a4b8:	429f      	cmp	r7, r3
 800a4ba:	d2fb      	bcs.n	800a4b4 <__hexnan+0xcc>
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	b91b      	cbnz	r3, 800a4c8 <__hexnan+0xe0>
 800a4c0:	4547      	cmp	r7, r8
 800a4c2:	d128      	bne.n	800a516 <__hexnan+0x12e>
 800a4c4:	2301      	movs	r3, #1
 800a4c6:	603b      	str	r3, [r7, #0]
 800a4c8:	2005      	movs	r0, #5
 800a4ca:	b007      	add	sp, #28
 800a4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d0:	3501      	adds	r5, #1
 800a4d2:	2d08      	cmp	r5, #8
 800a4d4:	f10b 0b01 	add.w	fp, fp, #1
 800a4d8:	dd06      	ble.n	800a4e8 <__hexnan+0x100>
 800a4da:	4544      	cmp	r4, r8
 800a4dc:	d9c1      	bls.n	800a462 <__hexnan+0x7a>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a4e4:	2501      	movs	r5, #1
 800a4e6:	3c04      	subs	r4, #4
 800a4e8:	6822      	ldr	r2, [r4, #0]
 800a4ea:	f000 000f 	and.w	r0, r0, #15
 800a4ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a4f2:	6020      	str	r0, [r4, #0]
 800a4f4:	e7b5      	b.n	800a462 <__hexnan+0x7a>
 800a4f6:	2508      	movs	r5, #8
 800a4f8:	e7b3      	b.n	800a462 <__hexnan+0x7a>
 800a4fa:	9b01      	ldr	r3, [sp, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d0dd      	beq.n	800a4bc <__hexnan+0xd4>
 800a500:	f1c3 0320 	rsb	r3, r3, #32
 800a504:	f04f 32ff 	mov.w	r2, #4294967295
 800a508:	40da      	lsrs	r2, r3
 800a50a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a50e:	4013      	ands	r3, r2
 800a510:	f846 3c04 	str.w	r3, [r6, #-4]
 800a514:	e7d2      	b.n	800a4bc <__hexnan+0xd4>
 800a516:	3f04      	subs	r7, #4
 800a518:	e7d0      	b.n	800a4bc <__hexnan+0xd4>
 800a51a:	2004      	movs	r0, #4
 800a51c:	e7d5      	b.n	800a4ca <__hexnan+0xe2>

0800a51e <__ascii_mbtowc>:
 800a51e:	b082      	sub	sp, #8
 800a520:	b901      	cbnz	r1, 800a524 <__ascii_mbtowc+0x6>
 800a522:	a901      	add	r1, sp, #4
 800a524:	b142      	cbz	r2, 800a538 <__ascii_mbtowc+0x1a>
 800a526:	b14b      	cbz	r3, 800a53c <__ascii_mbtowc+0x1e>
 800a528:	7813      	ldrb	r3, [r2, #0]
 800a52a:	600b      	str	r3, [r1, #0]
 800a52c:	7812      	ldrb	r2, [r2, #0]
 800a52e:	1e10      	subs	r0, r2, #0
 800a530:	bf18      	it	ne
 800a532:	2001      	movne	r0, #1
 800a534:	b002      	add	sp, #8
 800a536:	4770      	bx	lr
 800a538:	4610      	mov	r0, r2
 800a53a:	e7fb      	b.n	800a534 <__ascii_mbtowc+0x16>
 800a53c:	f06f 0001 	mvn.w	r0, #1
 800a540:	e7f8      	b.n	800a534 <__ascii_mbtowc+0x16>

0800a542 <_realloc_r>:
 800a542:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a546:	4680      	mov	r8, r0
 800a548:	4615      	mov	r5, r2
 800a54a:	460c      	mov	r4, r1
 800a54c:	b921      	cbnz	r1, 800a558 <_realloc_r+0x16>
 800a54e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a552:	4611      	mov	r1, r2
 800a554:	f7fd be60 	b.w	8008218 <_malloc_r>
 800a558:	b92a      	cbnz	r2, 800a566 <_realloc_r+0x24>
 800a55a:	f7fd fde9 	bl	8008130 <_free_r>
 800a55e:	2400      	movs	r4, #0
 800a560:	4620      	mov	r0, r4
 800a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a566:	f000 f840 	bl	800a5ea <_malloc_usable_size_r>
 800a56a:	4285      	cmp	r5, r0
 800a56c:	4606      	mov	r6, r0
 800a56e:	d802      	bhi.n	800a576 <_realloc_r+0x34>
 800a570:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a574:	d8f4      	bhi.n	800a560 <_realloc_r+0x1e>
 800a576:	4629      	mov	r1, r5
 800a578:	4640      	mov	r0, r8
 800a57a:	f7fd fe4d 	bl	8008218 <_malloc_r>
 800a57e:	4607      	mov	r7, r0
 800a580:	2800      	cmp	r0, #0
 800a582:	d0ec      	beq.n	800a55e <_realloc_r+0x1c>
 800a584:	42b5      	cmp	r5, r6
 800a586:	462a      	mov	r2, r5
 800a588:	4621      	mov	r1, r4
 800a58a:	bf28      	it	cs
 800a58c:	4632      	movcs	r2, r6
 800a58e:	f7ff fc45 	bl	8009e1c <memcpy>
 800a592:	4621      	mov	r1, r4
 800a594:	4640      	mov	r0, r8
 800a596:	f7fd fdcb 	bl	8008130 <_free_r>
 800a59a:	463c      	mov	r4, r7
 800a59c:	e7e0      	b.n	800a560 <_realloc_r+0x1e>

0800a59e <__ascii_wctomb>:
 800a59e:	4603      	mov	r3, r0
 800a5a0:	4608      	mov	r0, r1
 800a5a2:	b141      	cbz	r1, 800a5b6 <__ascii_wctomb+0x18>
 800a5a4:	2aff      	cmp	r2, #255	@ 0xff
 800a5a6:	d904      	bls.n	800a5b2 <__ascii_wctomb+0x14>
 800a5a8:	228a      	movs	r2, #138	@ 0x8a
 800a5aa:	601a      	str	r2, [r3, #0]
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	4770      	bx	lr
 800a5b2:	700a      	strb	r2, [r1, #0]
 800a5b4:	2001      	movs	r0, #1
 800a5b6:	4770      	bx	lr

0800a5b8 <fiprintf>:
 800a5b8:	b40e      	push	{r1, r2, r3}
 800a5ba:	b503      	push	{r0, r1, lr}
 800a5bc:	4601      	mov	r1, r0
 800a5be:	ab03      	add	r3, sp, #12
 800a5c0:	4805      	ldr	r0, [pc, #20]	@ (800a5d8 <fiprintf+0x20>)
 800a5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5c6:	6800      	ldr	r0, [r0, #0]
 800a5c8:	9301      	str	r3, [sp, #4]
 800a5ca:	f000 f83f 	bl	800a64c <_vfiprintf_r>
 800a5ce:	b002      	add	sp, #8
 800a5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5d4:	b003      	add	sp, #12
 800a5d6:	4770      	bx	lr
 800a5d8:	2000001c 	.word	0x2000001c

0800a5dc <abort>:
 800a5dc:	b508      	push	{r3, lr}
 800a5de:	2006      	movs	r0, #6
 800a5e0:	f000 fa08 	bl	800a9f4 <raise>
 800a5e4:	2001      	movs	r0, #1
 800a5e6:	f7f7 fecb 	bl	8002380 <_exit>

0800a5ea <_malloc_usable_size_r>:
 800a5ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ee:	1f18      	subs	r0, r3, #4
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	bfbc      	itt	lt
 800a5f4:	580b      	ldrlt	r3, [r1, r0]
 800a5f6:	18c0      	addlt	r0, r0, r3
 800a5f8:	4770      	bx	lr

0800a5fa <__sfputc_r>:
 800a5fa:	6893      	ldr	r3, [r2, #8]
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	b410      	push	{r4}
 800a602:	6093      	str	r3, [r2, #8]
 800a604:	da08      	bge.n	800a618 <__sfputc_r+0x1e>
 800a606:	6994      	ldr	r4, [r2, #24]
 800a608:	42a3      	cmp	r3, r4
 800a60a:	db01      	blt.n	800a610 <__sfputc_r+0x16>
 800a60c:	290a      	cmp	r1, #10
 800a60e:	d103      	bne.n	800a618 <__sfputc_r+0x1e>
 800a610:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a614:	f000 b932 	b.w	800a87c <__swbuf_r>
 800a618:	6813      	ldr	r3, [r2, #0]
 800a61a:	1c58      	adds	r0, r3, #1
 800a61c:	6010      	str	r0, [r2, #0]
 800a61e:	7019      	strb	r1, [r3, #0]
 800a620:	4608      	mov	r0, r1
 800a622:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <__sfputs_r>:
 800a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a62a:	4606      	mov	r6, r0
 800a62c:	460f      	mov	r7, r1
 800a62e:	4614      	mov	r4, r2
 800a630:	18d5      	adds	r5, r2, r3
 800a632:	42ac      	cmp	r4, r5
 800a634:	d101      	bne.n	800a63a <__sfputs_r+0x12>
 800a636:	2000      	movs	r0, #0
 800a638:	e007      	b.n	800a64a <__sfputs_r+0x22>
 800a63a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a63e:	463a      	mov	r2, r7
 800a640:	4630      	mov	r0, r6
 800a642:	f7ff ffda 	bl	800a5fa <__sfputc_r>
 800a646:	1c43      	adds	r3, r0, #1
 800a648:	d1f3      	bne.n	800a632 <__sfputs_r+0xa>
 800a64a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a64c <_vfiprintf_r>:
 800a64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a650:	460d      	mov	r5, r1
 800a652:	b09d      	sub	sp, #116	@ 0x74
 800a654:	4614      	mov	r4, r2
 800a656:	4698      	mov	r8, r3
 800a658:	4606      	mov	r6, r0
 800a65a:	b118      	cbz	r0, 800a664 <_vfiprintf_r+0x18>
 800a65c:	6a03      	ldr	r3, [r0, #32]
 800a65e:	b90b      	cbnz	r3, 800a664 <_vfiprintf_r+0x18>
 800a660:	f7fc fdf8 	bl	8007254 <__sinit>
 800a664:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a666:	07d9      	lsls	r1, r3, #31
 800a668:	d405      	bmi.n	800a676 <_vfiprintf_r+0x2a>
 800a66a:	89ab      	ldrh	r3, [r5, #12]
 800a66c:	059a      	lsls	r2, r3, #22
 800a66e:	d402      	bmi.n	800a676 <_vfiprintf_r+0x2a>
 800a670:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a672:	f7fc ff06 	bl	8007482 <__retarget_lock_acquire_recursive>
 800a676:	89ab      	ldrh	r3, [r5, #12]
 800a678:	071b      	lsls	r3, r3, #28
 800a67a:	d501      	bpl.n	800a680 <_vfiprintf_r+0x34>
 800a67c:	692b      	ldr	r3, [r5, #16]
 800a67e:	b99b      	cbnz	r3, 800a6a8 <_vfiprintf_r+0x5c>
 800a680:	4629      	mov	r1, r5
 800a682:	4630      	mov	r0, r6
 800a684:	f000 f938 	bl	800a8f8 <__swsetup_r>
 800a688:	b170      	cbz	r0, 800a6a8 <_vfiprintf_r+0x5c>
 800a68a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a68c:	07dc      	lsls	r4, r3, #31
 800a68e:	d504      	bpl.n	800a69a <_vfiprintf_r+0x4e>
 800a690:	f04f 30ff 	mov.w	r0, #4294967295
 800a694:	b01d      	add	sp, #116	@ 0x74
 800a696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a69a:	89ab      	ldrh	r3, [r5, #12]
 800a69c:	0598      	lsls	r0, r3, #22
 800a69e:	d4f7      	bmi.n	800a690 <_vfiprintf_r+0x44>
 800a6a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6a2:	f7fc feef 	bl	8007484 <__retarget_lock_release_recursive>
 800a6a6:	e7f3      	b.n	800a690 <_vfiprintf_r+0x44>
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a6b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6b6:	2330      	movs	r3, #48	@ 0x30
 800a6b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a868 <_vfiprintf_r+0x21c>
 800a6bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a6c0:	f04f 0901 	mov.w	r9, #1
 800a6c4:	4623      	mov	r3, r4
 800a6c6:	469a      	mov	sl, r3
 800a6c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6cc:	b10a      	cbz	r2, 800a6d2 <_vfiprintf_r+0x86>
 800a6ce:	2a25      	cmp	r2, #37	@ 0x25
 800a6d0:	d1f9      	bne.n	800a6c6 <_vfiprintf_r+0x7a>
 800a6d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a6d6:	d00b      	beq.n	800a6f0 <_vfiprintf_r+0xa4>
 800a6d8:	465b      	mov	r3, fp
 800a6da:	4622      	mov	r2, r4
 800a6dc:	4629      	mov	r1, r5
 800a6de:	4630      	mov	r0, r6
 800a6e0:	f7ff ffa2 	bl	800a628 <__sfputs_r>
 800a6e4:	3001      	adds	r0, #1
 800a6e6:	f000 80a7 	beq.w	800a838 <_vfiprintf_r+0x1ec>
 800a6ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a6ec:	445a      	add	r2, fp
 800a6ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 809f 	beq.w	800a838 <_vfiprintf_r+0x1ec>
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a700:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a704:	f10a 0a01 	add.w	sl, sl, #1
 800a708:	9304      	str	r3, [sp, #16]
 800a70a:	9307      	str	r3, [sp, #28]
 800a70c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a710:	931a      	str	r3, [sp, #104]	@ 0x68
 800a712:	4654      	mov	r4, sl
 800a714:	2205      	movs	r2, #5
 800a716:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a71a:	4853      	ldr	r0, [pc, #332]	@ (800a868 <_vfiprintf_r+0x21c>)
 800a71c:	f7f5 fd68 	bl	80001f0 <memchr>
 800a720:	9a04      	ldr	r2, [sp, #16]
 800a722:	b9d8      	cbnz	r0, 800a75c <_vfiprintf_r+0x110>
 800a724:	06d1      	lsls	r1, r2, #27
 800a726:	bf44      	itt	mi
 800a728:	2320      	movmi	r3, #32
 800a72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a72e:	0713      	lsls	r3, r2, #28
 800a730:	bf44      	itt	mi
 800a732:	232b      	movmi	r3, #43	@ 0x2b
 800a734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a738:	f89a 3000 	ldrb.w	r3, [sl]
 800a73c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a73e:	d015      	beq.n	800a76c <_vfiprintf_r+0x120>
 800a740:	9a07      	ldr	r2, [sp, #28]
 800a742:	4654      	mov	r4, sl
 800a744:	2000      	movs	r0, #0
 800a746:	f04f 0c0a 	mov.w	ip, #10
 800a74a:	4621      	mov	r1, r4
 800a74c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a750:	3b30      	subs	r3, #48	@ 0x30
 800a752:	2b09      	cmp	r3, #9
 800a754:	d94b      	bls.n	800a7ee <_vfiprintf_r+0x1a2>
 800a756:	b1b0      	cbz	r0, 800a786 <_vfiprintf_r+0x13a>
 800a758:	9207      	str	r2, [sp, #28]
 800a75a:	e014      	b.n	800a786 <_vfiprintf_r+0x13a>
 800a75c:	eba0 0308 	sub.w	r3, r0, r8
 800a760:	fa09 f303 	lsl.w	r3, r9, r3
 800a764:	4313      	orrs	r3, r2
 800a766:	9304      	str	r3, [sp, #16]
 800a768:	46a2      	mov	sl, r4
 800a76a:	e7d2      	b.n	800a712 <_vfiprintf_r+0xc6>
 800a76c:	9b03      	ldr	r3, [sp, #12]
 800a76e:	1d19      	adds	r1, r3, #4
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	9103      	str	r1, [sp, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	bfbb      	ittet	lt
 800a778:	425b      	neglt	r3, r3
 800a77a:	f042 0202 	orrlt.w	r2, r2, #2
 800a77e:	9307      	strge	r3, [sp, #28]
 800a780:	9307      	strlt	r3, [sp, #28]
 800a782:	bfb8      	it	lt
 800a784:	9204      	strlt	r2, [sp, #16]
 800a786:	7823      	ldrb	r3, [r4, #0]
 800a788:	2b2e      	cmp	r3, #46	@ 0x2e
 800a78a:	d10a      	bne.n	800a7a2 <_vfiprintf_r+0x156>
 800a78c:	7863      	ldrb	r3, [r4, #1]
 800a78e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a790:	d132      	bne.n	800a7f8 <_vfiprintf_r+0x1ac>
 800a792:	9b03      	ldr	r3, [sp, #12]
 800a794:	1d1a      	adds	r2, r3, #4
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	9203      	str	r2, [sp, #12]
 800a79a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a79e:	3402      	adds	r4, #2
 800a7a0:	9305      	str	r3, [sp, #20]
 800a7a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a878 <_vfiprintf_r+0x22c>
 800a7a6:	7821      	ldrb	r1, [r4, #0]
 800a7a8:	2203      	movs	r2, #3
 800a7aa:	4650      	mov	r0, sl
 800a7ac:	f7f5 fd20 	bl	80001f0 <memchr>
 800a7b0:	b138      	cbz	r0, 800a7c2 <_vfiprintf_r+0x176>
 800a7b2:	9b04      	ldr	r3, [sp, #16]
 800a7b4:	eba0 000a 	sub.w	r0, r0, sl
 800a7b8:	2240      	movs	r2, #64	@ 0x40
 800a7ba:	4082      	lsls	r2, r0
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	3401      	adds	r4, #1
 800a7c0:	9304      	str	r3, [sp, #16]
 800a7c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c6:	4829      	ldr	r0, [pc, #164]	@ (800a86c <_vfiprintf_r+0x220>)
 800a7c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a7cc:	2206      	movs	r2, #6
 800a7ce:	f7f5 fd0f 	bl	80001f0 <memchr>
 800a7d2:	2800      	cmp	r0, #0
 800a7d4:	d03f      	beq.n	800a856 <_vfiprintf_r+0x20a>
 800a7d6:	4b26      	ldr	r3, [pc, #152]	@ (800a870 <_vfiprintf_r+0x224>)
 800a7d8:	bb1b      	cbnz	r3, 800a822 <_vfiprintf_r+0x1d6>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	3307      	adds	r3, #7
 800a7de:	f023 0307 	bic.w	r3, r3, #7
 800a7e2:	3308      	adds	r3, #8
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a7e8:	443b      	add	r3, r7
 800a7ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7ec:	e76a      	b.n	800a6c4 <_vfiprintf_r+0x78>
 800a7ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	2001      	movs	r0, #1
 800a7f6:	e7a8      	b.n	800a74a <_vfiprintf_r+0xfe>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	3401      	adds	r4, #1
 800a7fc:	9305      	str	r3, [sp, #20]
 800a7fe:	4619      	mov	r1, r3
 800a800:	f04f 0c0a 	mov.w	ip, #10
 800a804:	4620      	mov	r0, r4
 800a806:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a80a:	3a30      	subs	r2, #48	@ 0x30
 800a80c:	2a09      	cmp	r2, #9
 800a80e:	d903      	bls.n	800a818 <_vfiprintf_r+0x1cc>
 800a810:	2b00      	cmp	r3, #0
 800a812:	d0c6      	beq.n	800a7a2 <_vfiprintf_r+0x156>
 800a814:	9105      	str	r1, [sp, #20]
 800a816:	e7c4      	b.n	800a7a2 <_vfiprintf_r+0x156>
 800a818:	fb0c 2101 	mla	r1, ip, r1, r2
 800a81c:	4604      	mov	r4, r0
 800a81e:	2301      	movs	r3, #1
 800a820:	e7f0      	b.n	800a804 <_vfiprintf_r+0x1b8>
 800a822:	ab03      	add	r3, sp, #12
 800a824:	9300      	str	r3, [sp, #0]
 800a826:	462a      	mov	r2, r5
 800a828:	4b12      	ldr	r3, [pc, #72]	@ (800a874 <_vfiprintf_r+0x228>)
 800a82a:	a904      	add	r1, sp, #16
 800a82c:	4630      	mov	r0, r6
 800a82e:	f7fb feb9 	bl	80065a4 <_printf_float>
 800a832:	4607      	mov	r7, r0
 800a834:	1c78      	adds	r0, r7, #1
 800a836:	d1d6      	bne.n	800a7e6 <_vfiprintf_r+0x19a>
 800a838:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a83a:	07d9      	lsls	r1, r3, #31
 800a83c:	d405      	bmi.n	800a84a <_vfiprintf_r+0x1fe>
 800a83e:	89ab      	ldrh	r3, [r5, #12]
 800a840:	059a      	lsls	r2, r3, #22
 800a842:	d402      	bmi.n	800a84a <_vfiprintf_r+0x1fe>
 800a844:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a846:	f7fc fe1d 	bl	8007484 <__retarget_lock_release_recursive>
 800a84a:	89ab      	ldrh	r3, [r5, #12]
 800a84c:	065b      	lsls	r3, r3, #25
 800a84e:	f53f af1f 	bmi.w	800a690 <_vfiprintf_r+0x44>
 800a852:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a854:	e71e      	b.n	800a694 <_vfiprintf_r+0x48>
 800a856:	ab03      	add	r3, sp, #12
 800a858:	9300      	str	r3, [sp, #0]
 800a85a:	462a      	mov	r2, r5
 800a85c:	4b05      	ldr	r3, [pc, #20]	@ (800a874 <_vfiprintf_r+0x228>)
 800a85e:	a904      	add	r1, sp, #16
 800a860:	4630      	mov	r0, r6
 800a862:	f7fc f937 	bl	8006ad4 <_printf_i>
 800a866:	e7e4      	b.n	800a832 <_vfiprintf_r+0x1e6>
 800a868:	0800b029 	.word	0x0800b029
 800a86c:	0800b033 	.word	0x0800b033
 800a870:	080065a5 	.word	0x080065a5
 800a874:	0800a629 	.word	0x0800a629
 800a878:	0800b02f 	.word	0x0800b02f

0800a87c <__swbuf_r>:
 800a87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a87e:	460e      	mov	r6, r1
 800a880:	4614      	mov	r4, r2
 800a882:	4605      	mov	r5, r0
 800a884:	b118      	cbz	r0, 800a88e <__swbuf_r+0x12>
 800a886:	6a03      	ldr	r3, [r0, #32]
 800a888:	b90b      	cbnz	r3, 800a88e <__swbuf_r+0x12>
 800a88a:	f7fc fce3 	bl	8007254 <__sinit>
 800a88e:	69a3      	ldr	r3, [r4, #24]
 800a890:	60a3      	str	r3, [r4, #8]
 800a892:	89a3      	ldrh	r3, [r4, #12]
 800a894:	071a      	lsls	r2, r3, #28
 800a896:	d501      	bpl.n	800a89c <__swbuf_r+0x20>
 800a898:	6923      	ldr	r3, [r4, #16]
 800a89a:	b943      	cbnz	r3, 800a8ae <__swbuf_r+0x32>
 800a89c:	4621      	mov	r1, r4
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f000 f82a 	bl	800a8f8 <__swsetup_r>
 800a8a4:	b118      	cbz	r0, 800a8ae <__swbuf_r+0x32>
 800a8a6:	f04f 37ff 	mov.w	r7, #4294967295
 800a8aa:	4638      	mov	r0, r7
 800a8ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	6922      	ldr	r2, [r4, #16]
 800a8b2:	1a98      	subs	r0, r3, r2
 800a8b4:	6963      	ldr	r3, [r4, #20]
 800a8b6:	b2f6      	uxtb	r6, r6
 800a8b8:	4283      	cmp	r3, r0
 800a8ba:	4637      	mov	r7, r6
 800a8bc:	dc05      	bgt.n	800a8ca <__swbuf_r+0x4e>
 800a8be:	4621      	mov	r1, r4
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f7ff fa47 	bl	8009d54 <_fflush_r>
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d1ed      	bne.n	800a8a6 <__swbuf_r+0x2a>
 800a8ca:	68a3      	ldr	r3, [r4, #8]
 800a8cc:	3b01      	subs	r3, #1
 800a8ce:	60a3      	str	r3, [r4, #8]
 800a8d0:	6823      	ldr	r3, [r4, #0]
 800a8d2:	1c5a      	adds	r2, r3, #1
 800a8d4:	6022      	str	r2, [r4, #0]
 800a8d6:	701e      	strb	r6, [r3, #0]
 800a8d8:	6962      	ldr	r2, [r4, #20]
 800a8da:	1c43      	adds	r3, r0, #1
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d004      	beq.n	800a8ea <__swbuf_r+0x6e>
 800a8e0:	89a3      	ldrh	r3, [r4, #12]
 800a8e2:	07db      	lsls	r3, r3, #31
 800a8e4:	d5e1      	bpl.n	800a8aa <__swbuf_r+0x2e>
 800a8e6:	2e0a      	cmp	r6, #10
 800a8e8:	d1df      	bne.n	800a8aa <__swbuf_r+0x2e>
 800a8ea:	4621      	mov	r1, r4
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	f7ff fa31 	bl	8009d54 <_fflush_r>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	d0d9      	beq.n	800a8aa <__swbuf_r+0x2e>
 800a8f6:	e7d6      	b.n	800a8a6 <__swbuf_r+0x2a>

0800a8f8 <__swsetup_r>:
 800a8f8:	b538      	push	{r3, r4, r5, lr}
 800a8fa:	4b29      	ldr	r3, [pc, #164]	@ (800a9a0 <__swsetup_r+0xa8>)
 800a8fc:	4605      	mov	r5, r0
 800a8fe:	6818      	ldr	r0, [r3, #0]
 800a900:	460c      	mov	r4, r1
 800a902:	b118      	cbz	r0, 800a90c <__swsetup_r+0x14>
 800a904:	6a03      	ldr	r3, [r0, #32]
 800a906:	b90b      	cbnz	r3, 800a90c <__swsetup_r+0x14>
 800a908:	f7fc fca4 	bl	8007254 <__sinit>
 800a90c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a910:	0719      	lsls	r1, r3, #28
 800a912:	d422      	bmi.n	800a95a <__swsetup_r+0x62>
 800a914:	06da      	lsls	r2, r3, #27
 800a916:	d407      	bmi.n	800a928 <__swsetup_r+0x30>
 800a918:	2209      	movs	r2, #9
 800a91a:	602a      	str	r2, [r5, #0]
 800a91c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a920:	81a3      	strh	r3, [r4, #12]
 800a922:	f04f 30ff 	mov.w	r0, #4294967295
 800a926:	e033      	b.n	800a990 <__swsetup_r+0x98>
 800a928:	0758      	lsls	r0, r3, #29
 800a92a:	d512      	bpl.n	800a952 <__swsetup_r+0x5a>
 800a92c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a92e:	b141      	cbz	r1, 800a942 <__swsetup_r+0x4a>
 800a930:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a934:	4299      	cmp	r1, r3
 800a936:	d002      	beq.n	800a93e <__swsetup_r+0x46>
 800a938:	4628      	mov	r0, r5
 800a93a:	f7fd fbf9 	bl	8008130 <_free_r>
 800a93e:	2300      	movs	r3, #0
 800a940:	6363      	str	r3, [r4, #52]	@ 0x34
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a948:	81a3      	strh	r3, [r4, #12]
 800a94a:	2300      	movs	r3, #0
 800a94c:	6063      	str	r3, [r4, #4]
 800a94e:	6923      	ldr	r3, [r4, #16]
 800a950:	6023      	str	r3, [r4, #0]
 800a952:	89a3      	ldrh	r3, [r4, #12]
 800a954:	f043 0308 	orr.w	r3, r3, #8
 800a958:	81a3      	strh	r3, [r4, #12]
 800a95a:	6923      	ldr	r3, [r4, #16]
 800a95c:	b94b      	cbnz	r3, 800a972 <__swsetup_r+0x7a>
 800a95e:	89a3      	ldrh	r3, [r4, #12]
 800a960:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a964:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a968:	d003      	beq.n	800a972 <__swsetup_r+0x7a>
 800a96a:	4621      	mov	r1, r4
 800a96c:	4628      	mov	r0, r5
 800a96e:	f000 f883 	bl	800aa78 <__smakebuf_r>
 800a972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a976:	f013 0201 	ands.w	r2, r3, #1
 800a97a:	d00a      	beq.n	800a992 <__swsetup_r+0x9a>
 800a97c:	2200      	movs	r2, #0
 800a97e:	60a2      	str	r2, [r4, #8]
 800a980:	6962      	ldr	r2, [r4, #20]
 800a982:	4252      	negs	r2, r2
 800a984:	61a2      	str	r2, [r4, #24]
 800a986:	6922      	ldr	r2, [r4, #16]
 800a988:	b942      	cbnz	r2, 800a99c <__swsetup_r+0xa4>
 800a98a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a98e:	d1c5      	bne.n	800a91c <__swsetup_r+0x24>
 800a990:	bd38      	pop	{r3, r4, r5, pc}
 800a992:	0799      	lsls	r1, r3, #30
 800a994:	bf58      	it	pl
 800a996:	6962      	ldrpl	r2, [r4, #20]
 800a998:	60a2      	str	r2, [r4, #8]
 800a99a:	e7f4      	b.n	800a986 <__swsetup_r+0x8e>
 800a99c:	2000      	movs	r0, #0
 800a99e:	e7f7      	b.n	800a990 <__swsetup_r+0x98>
 800a9a0:	2000001c 	.word	0x2000001c

0800a9a4 <_raise_r>:
 800a9a4:	291f      	cmp	r1, #31
 800a9a6:	b538      	push	{r3, r4, r5, lr}
 800a9a8:	4605      	mov	r5, r0
 800a9aa:	460c      	mov	r4, r1
 800a9ac:	d904      	bls.n	800a9b8 <_raise_r+0x14>
 800a9ae:	2316      	movs	r3, #22
 800a9b0:	6003      	str	r3, [r0, #0]
 800a9b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a9ba:	b112      	cbz	r2, 800a9c2 <_raise_r+0x1e>
 800a9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9c0:	b94b      	cbnz	r3, 800a9d6 <_raise_r+0x32>
 800a9c2:	4628      	mov	r0, r5
 800a9c4:	f000 f830 	bl	800aa28 <_getpid_r>
 800a9c8:	4622      	mov	r2, r4
 800a9ca:	4601      	mov	r1, r0
 800a9cc:	4628      	mov	r0, r5
 800a9ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9d2:	f000 b817 	b.w	800aa04 <_kill_r>
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d00a      	beq.n	800a9f0 <_raise_r+0x4c>
 800a9da:	1c59      	adds	r1, r3, #1
 800a9dc:	d103      	bne.n	800a9e6 <_raise_r+0x42>
 800a9de:	2316      	movs	r3, #22
 800a9e0:	6003      	str	r3, [r0, #0]
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	e7e7      	b.n	800a9b6 <_raise_r+0x12>
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a9ec:	4620      	mov	r0, r4
 800a9ee:	4798      	blx	r3
 800a9f0:	2000      	movs	r0, #0
 800a9f2:	e7e0      	b.n	800a9b6 <_raise_r+0x12>

0800a9f4 <raise>:
 800a9f4:	4b02      	ldr	r3, [pc, #8]	@ (800aa00 <raise+0xc>)
 800a9f6:	4601      	mov	r1, r0
 800a9f8:	6818      	ldr	r0, [r3, #0]
 800a9fa:	f7ff bfd3 	b.w	800a9a4 <_raise_r>
 800a9fe:	bf00      	nop
 800aa00:	2000001c 	.word	0x2000001c

0800aa04 <_kill_r>:
 800aa04:	b538      	push	{r3, r4, r5, lr}
 800aa06:	4d07      	ldr	r5, [pc, #28]	@ (800aa24 <_kill_r+0x20>)
 800aa08:	2300      	movs	r3, #0
 800aa0a:	4604      	mov	r4, r0
 800aa0c:	4608      	mov	r0, r1
 800aa0e:	4611      	mov	r1, r2
 800aa10:	602b      	str	r3, [r5, #0]
 800aa12:	f7f7 fca5 	bl	8002360 <_kill>
 800aa16:	1c43      	adds	r3, r0, #1
 800aa18:	d102      	bne.n	800aa20 <_kill_r+0x1c>
 800aa1a:	682b      	ldr	r3, [r5, #0]
 800aa1c:	b103      	cbz	r3, 800aa20 <_kill_r+0x1c>
 800aa1e:	6023      	str	r3, [r4, #0]
 800aa20:	bd38      	pop	{r3, r4, r5, pc}
 800aa22:	bf00      	nop
 800aa24:	20000be8 	.word	0x20000be8

0800aa28 <_getpid_r>:
 800aa28:	f7f7 bc92 	b.w	8002350 <_getpid>

0800aa2c <__swhatbuf_r>:
 800aa2c:	b570      	push	{r4, r5, r6, lr}
 800aa2e:	460c      	mov	r4, r1
 800aa30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa34:	2900      	cmp	r1, #0
 800aa36:	b096      	sub	sp, #88	@ 0x58
 800aa38:	4615      	mov	r5, r2
 800aa3a:	461e      	mov	r6, r3
 800aa3c:	da0d      	bge.n	800aa5a <__swhatbuf_r+0x2e>
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa44:	f04f 0100 	mov.w	r1, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2340      	movne	r3, #64	@ 0x40
 800aa4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa50:	2000      	movs	r0, #0
 800aa52:	6031      	str	r1, [r6, #0]
 800aa54:	602b      	str	r3, [r5, #0]
 800aa56:	b016      	add	sp, #88	@ 0x58
 800aa58:	bd70      	pop	{r4, r5, r6, pc}
 800aa5a:	466a      	mov	r2, sp
 800aa5c:	f000 f848 	bl	800aaf0 <_fstat_r>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	dbec      	blt.n	800aa3e <__swhatbuf_r+0x12>
 800aa64:	9901      	ldr	r1, [sp, #4]
 800aa66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa6e:	4259      	negs	r1, r3
 800aa70:	4159      	adcs	r1, r3
 800aa72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa76:	e7eb      	b.n	800aa50 <__swhatbuf_r+0x24>

0800aa78 <__smakebuf_r>:
 800aa78:	898b      	ldrh	r3, [r1, #12]
 800aa7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa7c:	079d      	lsls	r5, r3, #30
 800aa7e:	4606      	mov	r6, r0
 800aa80:	460c      	mov	r4, r1
 800aa82:	d507      	bpl.n	800aa94 <__smakebuf_r+0x1c>
 800aa84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa88:	6023      	str	r3, [r4, #0]
 800aa8a:	6123      	str	r3, [r4, #16]
 800aa8c:	2301      	movs	r3, #1
 800aa8e:	6163      	str	r3, [r4, #20]
 800aa90:	b003      	add	sp, #12
 800aa92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa94:	ab01      	add	r3, sp, #4
 800aa96:	466a      	mov	r2, sp
 800aa98:	f7ff ffc8 	bl	800aa2c <__swhatbuf_r>
 800aa9c:	9f00      	ldr	r7, [sp, #0]
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	f7fd fbb8 	bl	8008218 <_malloc_r>
 800aaa8:	b948      	cbnz	r0, 800aabe <__smakebuf_r+0x46>
 800aaaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aaae:	059a      	lsls	r2, r3, #22
 800aab0:	d4ee      	bmi.n	800aa90 <__smakebuf_r+0x18>
 800aab2:	f023 0303 	bic.w	r3, r3, #3
 800aab6:	f043 0302 	orr.w	r3, r3, #2
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	e7e2      	b.n	800aa84 <__smakebuf_r+0xc>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	6020      	str	r0, [r4, #0]
 800aac2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aac6:	81a3      	strh	r3, [r4, #12]
 800aac8:	9b01      	ldr	r3, [sp, #4]
 800aaca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aace:	b15b      	cbz	r3, 800aae8 <__smakebuf_r+0x70>
 800aad0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad4:	4630      	mov	r0, r6
 800aad6:	f000 f81d 	bl	800ab14 <_isatty_r>
 800aada:	b128      	cbz	r0, 800aae8 <__smakebuf_r+0x70>
 800aadc:	89a3      	ldrh	r3, [r4, #12]
 800aade:	f023 0303 	bic.w	r3, r3, #3
 800aae2:	f043 0301 	orr.w	r3, r3, #1
 800aae6:	81a3      	strh	r3, [r4, #12]
 800aae8:	89a3      	ldrh	r3, [r4, #12]
 800aaea:	431d      	orrs	r5, r3
 800aaec:	81a5      	strh	r5, [r4, #12]
 800aaee:	e7cf      	b.n	800aa90 <__smakebuf_r+0x18>

0800aaf0 <_fstat_r>:
 800aaf0:	b538      	push	{r3, r4, r5, lr}
 800aaf2:	4d07      	ldr	r5, [pc, #28]	@ (800ab10 <_fstat_r+0x20>)
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	4604      	mov	r4, r0
 800aaf8:	4608      	mov	r0, r1
 800aafa:	4611      	mov	r1, r2
 800aafc:	602b      	str	r3, [r5, #0]
 800aafe:	f7f7 fc8f 	bl	8002420 <_fstat>
 800ab02:	1c43      	adds	r3, r0, #1
 800ab04:	d102      	bne.n	800ab0c <_fstat_r+0x1c>
 800ab06:	682b      	ldr	r3, [r5, #0]
 800ab08:	b103      	cbz	r3, 800ab0c <_fstat_r+0x1c>
 800ab0a:	6023      	str	r3, [r4, #0]
 800ab0c:	bd38      	pop	{r3, r4, r5, pc}
 800ab0e:	bf00      	nop
 800ab10:	20000be8 	.word	0x20000be8

0800ab14 <_isatty_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d06      	ldr	r5, [pc, #24]	@ (800ab30 <_isatty_r+0x1c>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	602b      	str	r3, [r5, #0]
 800ab20:	f7f7 fc8e 	bl	8002440 <_isatty>
 800ab24:	1c43      	adds	r3, r0, #1
 800ab26:	d102      	bne.n	800ab2e <_isatty_r+0x1a>
 800ab28:	682b      	ldr	r3, [r5, #0]
 800ab2a:	b103      	cbz	r3, 800ab2e <_isatty_r+0x1a>
 800ab2c:	6023      	str	r3, [r4, #0]
 800ab2e:	bd38      	pop	{r3, r4, r5, pc}
 800ab30:	20000be8 	.word	0x20000be8

0800ab34 <_init>:
 800ab34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab36:	bf00      	nop
 800ab38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab3a:	bc08      	pop	{r3}
 800ab3c:	469e      	mov	lr, r3
 800ab3e:	4770      	bx	lr

0800ab40 <_fini>:
 800ab40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab42:	bf00      	nop
 800ab44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab46:	bc08      	pop	{r3}
 800ab48:	469e      	mov	lr, r3
 800ab4a:	4770      	bx	lr
